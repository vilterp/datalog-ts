main :- value.
value :- (object | array | intLit | stringLit).
object :- ["{", repSep(keyValue, ","), "}"].
keyValue :- [stringLit, ": ", value].
intLit :- repSep(digit, "").
array :- ["[", repSep(value, ","), "]"].
digit :- [0-9].
stringLit :- ["\"", repSep([a-z], ""), "\""].
----
application/json
{
  "main": {
    "type": "Ref",
    "captureName": null,
    "rule": "value"
  },
  "value": {
    "type": "Choice",
    "choices": [
      {
        "type": "Ref",
        "captureName": null,
        "rule": "object"
      },
      {
        "type": "Ref",
        "captureName": null,
        "rule": "array"
      },
      {
        "type": "Ref",
        "captureName": null,
        "rule": "intLit"
      },
      {
        "type": "Ref",
        "captureName": null,
        "rule": "stringLit"
      }
    ]
  },
  "object": {
    "type": "Sequence",
    "items": [
      {
        "type": "Text",
        "value": "{"
      },
      {
        "type": "RepSep",
        "rep": {
          "type": "Ref",
          "captureName": null,
          "rule": "keyValue"
        },
        "sep": {
          "type": "Text",
          "value": ","
        }
      },
      {
        "type": "Text",
        "value": "}"
      }
    ]
  },
  "keyValue": {
    "type": "Sequence",
    "items": [
      {
        "type": "Ref",
        "captureName": null,
        "rule": "stringLit"
      },
      {
        "type": "Text",
        "value": ": "
      },
      {
        "type": "Ref",
        "captureName": null,
        "rule": "value"
      }
    ]
  },
  "intLit": {
    "type": "RepSep",
    "rep": {
      "type": "Ref",
      "captureName": null,
      "rule": "digit"
    },
    "sep": {
      "type": "Text",
      "value": ""
    }
  },
  "array": {
    "type": "Sequence",
    "items": [
      {
        "type": "Text",
        "value": "["
      },
      {
        "type": "RepSep",
        "rep": {
          "type": "Ref",
          "captureName": null,
          "rule": "value"
        },
        "sep": {
          "type": "Text",
          "value": ","
        }
      },
      {
        "type": "Text",
        "value": "]"
      }
    ]
  },
  "digit": {
    "type": "Char",
    "rule": {
      "type": "Range",
      "from": "0",
      "to": "9"
    }
  },
  "stringLit": {
    "type": "Sequence",
    "items": [
      {
        "type": "Text",
        "value": "\""
      },
      {
        "type": "RepSep",
        "rep": {
          "type": "Char",
          "rule": {
            "type": "Range",
            "from": "a",
            "to": "z"
          }
        },
        "sep": {
          "type": "Text",
          "value": ""
        }
      },
      {
        "type": "Text",
        "value": "\""
      }
    ]
  }
}

notQuote :- ^'"'.
----
application/json
{
  "notQuote": {
    "type": "Char",
    "rule": {
      "type": "Not",
      "rule": {
        "type": "Literal",
        "value": "\""
      }
    }
  }
}

escapedQuote :- ['\\', '"'].
----
application/json
{
  "escapedQuote": {
    "type": "Sequence",
    "items": [
      {
        "type": "Char",
        "rule": {
          "type": "Literal",
          "value": "\\"
        }
      },
      {
        "type": "Char",
        "rule": {
          "type": "Literal",
          "value": "\""
        }
      }
    ]
  }
}

stringChar :- (^'"' | ['\\', '"']).
----
application/json
{
  "stringChar": {
    "type": "Choice",
    "choices": [
      {
        "type": "Char",
        "rule": {
          "type": "Not",
          "rule": {
            "type": "Literal",
            "value": "\""
          }
        }
      },
      {
        "type": "Sequence",
        "items": [
          {
            "type": "Char",
            "rule": {
              "type": "Literal",
              "value": "\\"
            }
          },
          {
            "type": "Char",
            "rule": {
              "type": "Literal",
              "value": "\""
            }
          }
        ]
      }
    ]
  }
}

commentChar :- ^'\n'.
----
application/json
{
  "commentChar": {
    "type": "Char",
    "rule": {
      "type": "Not",
      "rule": {
        "type": "Literal",
        "value": "\n"
      }
    }
  }
}

backslash :- '\\'.
----
application/json
{
  "backslash": {
    "type": "Char",
    "rule": {
      "type": "Literal",
      "value": "\\"
    }
  }
}

singleChar :- "here's a backslash: \\ there it was!".
----
application/json
{
  "singleChar": {
    "type": "Text",
    "value": "here's a backslash: \\ there it was!"
  }
}

binOp :- [left:term, "==", right:term].
----
application/json
{
  "binOp": {
    "type": "Sequence",
    "items": [
      {
        "type": "Ref",
        "captureName": "left",
        "rule": "term"
      },
      {
        "type": "Text",
        "value": "=="
      },
      {
        "type": "Ref",
        "captureName": "right",
        "rule": "term"
      }
    ]
  }
}
