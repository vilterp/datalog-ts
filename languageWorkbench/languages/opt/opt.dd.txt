opt
rule coalMax{timestep: T} {
  loadLevel{timestep: T} &
  coalOutput{level: CoalLevel, timestep: T} &
  coalMax{level: MaxLevel}
  =>
  CoalLevel <= MaxLevel
}
scope.Usage{}?
----
application/datalog
scope.Usage{definitionScopeID: "coalMax", defnSpan: span{from: 118, to: 126}, kind: "var", name: "MaxLevel", usageScopeID: "coalMax", usageSpan: span{from: 148, to: 156}}.
scope.Usage{definitionScopeID: "coalMax", defnSpan: span{from: 50, to: 51}, kind: "var", name: "T", usageScopeID: "coalMax", usageSpan: span{from: 96, to: 97}}.
scope.Usage{definitionScopeID: "coalMax", defnSpan: span{from: 75, to: 84}, kind: "var", name: "CoalLevel", usageScopeID: "coalMax", usageSpan: span{from: 135, to: 144}}.
scope.Usage{definitionScopeID: "coalMax", defnSpan: span{from: 96, to: 97}, kind: "var", name: "T", usageScopeID: "coalMax", usageSpan: span{from: 50, to: 51}}.

opt
var foo {}
input bar {}
rule coalMax{timestep: T} {
  loadLevel{timestep: T} &
  coalOutput{level: CoalLevel, timestep: T} &
  coalMax{level: MaxLevel}
  =>
  CoalLevel <= MaxLevel
}
scope.Defn{}?
----
application/datalog
scope.Defn{kind: "attr", name: "a", scopeID: "base.add", span: span{from: -1, to: -1}, type: "any"}.
scope.Defn{kind: "attr", name: "b", scopeID: "base.add", span: span{from: -1, to: -1}, type: "any"}.
scope.Defn{kind: "attr", name: "res", scopeID: "base.add", span: span{from: -1, to: -1}, type: "any"}.
scope.Defn{kind: "relation", name: "bar", scopeID: global{}, span: span{from: 17, to: 20}, type: "any"}.
scope.Defn{kind: "relation", name: "base.add", scopeID: global{}, span: span{from: -1, to: -1}, type: "any"}.
scope.Defn{kind: "relation", name: "foo", scopeID: global{}, span: span{from: 4, to: 7}, type: "any"}.
scope.Defn{kind: "rule", name: "coalMax", scopeID: global{}, span: span{from: 29, to: 36}, type: "any"}.
scope.Defn{kind: "var", name: "CoalLevel", scopeID: "coalMax", span: span{from: 99, to: 108}, type: "any"}.
scope.Defn{kind: "var", name: "MaxLevel", scopeID: "coalMax", span: span{from: 142, to: 150}, type: "any"}.
scope.Defn{kind: "var", name: "T", scopeID: "coalMax", span: span{from: 120, to: 121}, type: "any"}.
scope.Defn{kind: "var", name: "T", scopeID: "coalMax", span: span{from: 74, to: 75}, type: "any"}.

opt
var coalOutput {
  timestep,
  level
}
var natGasOutput {
  timestep,
  level
}
input loadLevel {
  timestep,
  level
}
param coalMax { min: 0, max: 100, init: 50 }
param coalRampRate { min: 0, max: 100, init: 50 }
param coalPrice { min: 0, max: 100, init: 50 }
param natGasPrice { min: 0, max: 100, init: 50 }
minimize {
  loadLevel{timestep: T} &
  coalOutput{level: CoalLevel, timestep: T} &
  natGasOutput{level: NatGasLevel, timestep: T} &
  coalPrice{price: CoalPrice} &
  natGasPrice{price: NatGasPrice}
  =>
  CoalPrice*CoalLevel + NatGasPrice*NatGasLevel
}
rule outputEqualsDemand{timestep: T} {
  loadLevel{level: LoadLevel, timestep: T} &
  coalOutput{level: CoalLevel, timestep: T} &
  natGasOutput{level: NatGasLevel, timestep: T}
  =>
  CoalLevel + NatGasLevel = LoadLevel
}
rule coalMax{timestep: T} {
  loadLevel{timestep: T} &
  coalOutput{level: CoalLevel, timestep: T} &
  coalMax{level: MaxLevel}
  =>
  CoalLevel <= MaxLevel
}
rule coalRampRate{timestep: T2} {
  loadLevel{timestep: T1} &
  loadLevel{timestep: T2} &
  coalOutput{level: L1, timestep: T1} &
  coalOutput{level: L2, timestep: T2} &
  base.add{a: T1, b: 1, res: T2} &
  coalRampRate{rate: RampRate}
  =>
  -1*L1 + L2 <= RampRate
}
tc.Problem{}?
----
application/datalog
tc.Problem{desc: undefinedVar{name: "level"}, span: span{from: 900, to: 905}}.
tc.Problem{desc: undefinedVar{name: "price"}, span: span{from: 457, to: 462}}.
tc.Problem{desc: undefinedVar{name: "price"}, span: span{from: 491, to: 496}}.
tc.Problem{desc: undefinedVar{name: "rate"}, span: span{from: 1168, to: 1172}}.
