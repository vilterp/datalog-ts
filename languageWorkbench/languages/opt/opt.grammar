main :- repSep(declaration, ws).

declaration :- (
  varRelationDecl |
  inputRelationDecl |
  objective |
  constraint
).

varRelationDecl :- [varKW, ws, ident, ws, schemaSpec].
inputRelationDecl :- [inputKW, ws, ident, ws, schemaSpec].

schemaSpec :- ["{", ws, repSep(ident, [",", ws]), ws, "}"].

objective :- [
  sense, ws, "{", ws,
  conjuncts,
  ws, sepKW, ws,
  scalarExpr, ws,
  "}"
].

constraint :- [
  ruleKW, ws, record, ws, "{", ws,
  conjuncts, ws,
  sepKW, ws,
  constraintComparison, ws,
"}"].

constraintComparison :- [scalarExpr, ws, comparisonOp, ws, scalarExpr].

conjuncts :- repSep(clause, [ws, "&", ws]).
clause :- (record | comparison).

scalarExpr :- repSep(scalarTerm, [ws, "+", ws]).
scalarTerm :- [([term, ws, "*", ws] | ""), term].
comparison :- [left:term, ws, comparisonOp, ws, right:term].
comparisonOp :- ("<=" | ">=" | ">" | "<" | "=" | "!=").

record :- [ident, "{", ws, recordAttrs, ws, "}"].
recordAttrs :- repSep((recordKeyValue | placeholder), commaSpace).
recordKeyValue :- [ident, ":", ws, term].

term :- (record | int | var | string | placeholder).
var :- [[A-Z], repSep(([A-Z]|alphaNum), "")].

sense :- ("minimize" | "maximize").
varKW :- "var".
inputKW :- "input".
ruleKW :- "rule".
sepKW :- "=>".

ident :- [alpha, repSep((alphaNum | "."), "")].
int :- [("-" | ""), first:num, repSep(num, "")].
string :- ["\"", repSep(stringChar, ""), "\""].
stringChar :- (^'"' | ['\\', '"']).
alpha :- ([a-z] | [A-Z] | "_").
num :- [0-9].
alphaNum :- (alpha | num).
ws :- repSep((" "|"\n"), "").
commaWS :- [",", ws].
placeholder :- "???".
commaSpace :- [",", ws].
