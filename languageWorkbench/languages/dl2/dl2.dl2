table ast.rule {
  record: inRef(ast.record:parentID)
}
table ast.record {
  qualifier: inRef(ast.qualifier:parentID)
}
table ast.tableDecl {
  qualifier: inRef(ast.qualifier:parentID),
  attr: inRef(ast.tableAttr:parentID)
}
table ast.tableAttr {
  ident: inRef(ast.ident:parentID)
}

def scope.Defn{scopeID: I, span: S, name: N, kind: K, type: "any"} {
  scope.defnRule{scopeID: I, span: S, name: N, kind: K} |
  scope.defnTable{scopeID: I, span: S, name: N, kind: K} |
  scope.defnAttr{scopeID: I, span: S, name: N, kind: K}
}

def scope.defnRule{scopeID: global{}, span: S, name: N, kind: "relation"} {
  ast.rule {
    record {
      qualifier {
        text: N,
        span: S
      }
    }
  }
}

def scope.defnTable{scopeID: global{}, span: S, name: N, kind: "relation"} {
  ast.tableDecl {
    qualifier {
      text: N,
      span: S
    }
  }
}

def scope.defnAttr{scopeID: I, span: S, name: N, kind: "attr"} {
  ast.tableDecl {
    qualifier {
      text: I
    },
    attr {
      ident {
        text: N,
        span: S
      }
    }
  }
}

table hl.mapping {}

hl.mapping{rule: "ident", type: "ident"}.
hl.mapping{rule: "var", type: "typeParameter"}.
hl.mapping{rule: "int", type: "number"}.
hl.mapping{rule: "bool", type: "number"}.
hl.mapping{rule: "string", type: "string"}.
hl.mapping{rule: "comment", type: "comment"}.
hl.mapping{rule: "tableKW", type: "keyword"}.
hl.mapping{rule: "importKW", type: "keyword"}.
hl.mapping{rule: "inRefKW", type: "keyword"}.
hl.mapping{rule: "outRefKW", type: "keyword"}.
hl.mapping{rule: "defKW", type: "keyword"}.
hl.mapping{rule: "path", type: "string"}.
