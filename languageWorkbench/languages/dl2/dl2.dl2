table ast.rule {
  record: inRef(ast.record:parentID)
}
table ast.record {
  qualifier: inRef(ast.qualifier:parentID)
}
table ast.tableDecl {
  qualifier: inRef(ast.qualifier:parentID),
  attr: inRef(ast.tableAttr:parentID)
}
table ast.tableAttr {
  ident: inRef(ast.ident:parentID),
  refSpec: inRef(ast.refSpec:parentID)
}
table ast.nested {
  qualifier: inRef(ast.qualifier:parentID),
  attr: inRef(ast.nestedAttr:parentID)
}
table ast.nestedAttr {
  nested: inRef(ast.nested:parentID)
}
table ast.refSpec {
  inRef: inRef(ast.inRef:parentID),
  outRef: inRef(ast.outRef:parentID)
}
table ast.inRef {
  qualifier: inRef(ast.qualifier:parentID),
  ident: inRef(ast.ident:parentID)
}
table ast.conjunct {
  nested: inRef(ast.nested:parentID)
}

def scope.Defn{scopeID: I, span: S, name: N, kind: K, type: "any"} {
  scope.defnRule{scopeID: I, span: S, name: N, kind: K} |
  scope.defnTable{scopeID: I, span: S, name: N, kind: K} |
  scope.defnAttr{scopeID: I, span: S, name: N, kind: K}
}

def scope.defnRule{scopeID: global{}, span: S, name: N, kind: "relation"} {
  ast.rule {
    record {
      qualifier {
        text: N,
        span: S
      }
    }
  }
}

def scope.Var{scopeID: I, name: N, span: S, kind: K} {
  # scope.varNestedAttr{scopeID: I, name: N, span: S, kind: K}
}

# def scope.varNestedAttr{scopeID: InnerTable, name: InnerAttr, span: S, kind: "attr"} {
#   ast.nested {
#     id: NestedID,
#     qualifier { text: OuterAttr },
#     attr {
#       nested {
#         qualifier {
#           text: InnerAttr,
#           span: S
#         }
#       }
#     }
#   } &
#   scope.nestedTable{id: NestedID, table: OuterTable} &
#   scope.inRef{fromTable: OuterTable, toTable: InnerTable, accessor: OuterAttr, pointer: InnerAttr}
# }

def scope.nestedTable{outerID: OuterID, innerID: InnerID, outerTable: OuterTable, innerTable: InnerTable, accessor: A} {
  scope.nestedRootTable{outerID: OuterID, innerID: InnerID, outerTable: OuterTable, innerTable: InnerTable, accessor: A} |
  scope.nestedNestedTable{outerID: OuterID, innerID: InnerID, outerTable: OuterTable, innerTable: InnerTable, accessor: A}
}

def scope.nestedRootTable{outerID: OuterID, innerID: InnerID, outerTable: OuterTable, innerTable: InnerTable, accessor: InnerAttr} {
  ast.conjunct {
    nested {
      id: OuterID,
      qualifier {
        text: OuterTable
      },
      attr {
        nested {
          id: InnerID,
          qualifier {
            text: InnerAttr
          }
        }
      }
    }
  } &
  scope.inRef{fromTable: OuterTable, toTable: InnerTable, accessor: InnerAttr}
}

def scope.nestedNestedTable{outerID: OuterID, innerID: InnerID, outerTable: OuterTable, innerTable: InnerTable} {
  ast.nested {
    id: OuterID,
    qualifier { text: OuterAttr },
    attr {
      nested {
        id: InnerID,
        qualifier {
          text: InnerAttr
        }
      }
    }
  } &
  scope.nestedTable{innerID: OuterID, innerTable: OuterTable} &
  scope.inRef{fromTable: OuterTable, toTable: InnerTable, accessor: OuterAttr, pointer: InnerAttr} &
}

def scope.inRef{fromTable: F, toTable: T, accessor: A, pointer: P} {
  ast.tableDecl {
    qualifier {
      text: F
    },
    attr {
      ident {
        text: A
      },
      refSpec {
        inRef {
          qualifier {
            text: T
          },
          ident {
            text: P
          }
        }
      }
    }
  }
}

def scope.defnTable{scopeID: global{}, span: S, name: N, kind: "relation"} {
  ast.tableDecl {
    qualifier {
      text: N,
      span: S
    }
  }
}

def scope.defnAttr{scopeID: I, span: S, name: N, kind: "attr"} {
  ast.tableDecl {
    qualifier {
      text: I
    },
    attr {
      ident {
        text: N,
        span: S
      }
    }
  }
}

table hl.mapping {}

hl.mapping{rule: "ident", type: "ident"}.
hl.mapping{rule: "var", type: "typeParameter"}.
hl.mapping{rule: "int", type: "number"}.
hl.mapping{rule: "bool", type: "number"}.
hl.mapping{rule: "string", type: "string"}.
hl.mapping{rule: "comment", type: "comment"}.
hl.mapping{rule: "tableKW", type: "keyword"}.
hl.mapping{rule: "importKW", type: "keyword"}.
hl.mapping{rule: "inRefKW", type: "keyword"}.
hl.mapping{rule: "outRefKW", type: "keyword"}.
hl.mapping{rule: "defKW", type: "keyword"}.
hl.mapping{rule: "path", type: "string"}.
