main :- [ws, repSep(statement, ws), ws].
statement :- (rule | fact | query | deleteFact | tableDecl | loadStmt).
comment :- ["#", repSep(commentChar, "")].
tableDecl :- [tableKW, ws, name:ident].
loadStmt :- [loadKW, ws, path].

query :- [record, "?"].
fact :- [record, "."].
deleteFact :- ["-", record, "."].

rule :- [record, ws, ":-", ws, repSep(disjunct, [ws, "|", ws]), "."].
disjunct :- repSep(conjunct, [ws, "&", ws]).
conjunct :- (record | comparison | arithmetic | negation | aggregation | placeholder).
negation :- ["!", record].
aggregation :- [aggregation:ident, "[", repSep(var, commaSpace), ":", ws, record, "]"].

comparison :- [left:term, ws, comparisonOp, ws, right:term].
comparisonOp :- ("<=" | ">=" | ">" | "<" | "=" | "!=").

arithmetic :- (assignmentOnLeft | assignmentOnRight).
assignmentOnRight :- [left:term, ws, arithmeticOp, ws, right:term, ws, "=", ws, result:term].
assignmentOnLeft :- [result:term, ws, "=", ws, left:term, ws, arithmeticOp, ws, right:term].
arithmeticOp :- ("+" | "*" | "-").

term :- (record | int | var | string | bool | array | dict | placeholder).
var :- [[A-Z], repSep(([A-Z]|alphaNum), "")].
record :- [ident, "{", ws, recordAttrs, ws, "}"].
dict :- ["{", ws, repSep(dictKeyValue, commaSpace), ws, "}"].
dictKeyValue :- [key:string, ":", ws, value:term].
recordAttrs :- repSep((recordKeyValue | placeholder), commaSpace).
recordKeyValue :- [ident, ":", ws, term].
int :- [("-" | ""), first:num, repSep(num, "")].
bool :- ("true" | "false").
array :- ["[", ws, repSep(term, commaSpace), ws, "]"].

tableKW :- ".table".
loadKW :- ".load".

ident :- [alpha, repSep((alphaNum | "."), "")].
string :- ["\"", repSep(stringChar, ""), "\""].
stringChar :- (^'"' | ['\\', '"']).
alpha :- ([a-z] | [A-Z] | "_").
num :- [0-9].
alphaNum :- (alpha | num).
ws :- repSep([spaces, (comment | "")], "\n").
spaces :- repSep(" ", "").
placeholder :- "???".
commaSpace :- [",", ws].
path :- repSep(pathSegment, "/").
pathSegment :- repSep(([a-z]|[A-Z]|[0-9]|'_'|'-'|'.'), "").

commentChar :- ^'\n'.
