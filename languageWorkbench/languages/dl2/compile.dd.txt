import "ast"
table constraint {
  record: inRef(record.parentID),
  constraintComparison: inRef(record.parentID)
}
table record {
  ident: inRef(ident.parentID)
}
table ident {
  text
}
table constraintComparison {
  scalarExpr: inRef(scalarExpr.parentID)
}
table scalarExpr {
  scalarTerm: inRef(scalarTerm.parentID)
}
table term {
  var: inRef(var.parentID)
}
table var {
  text,
  span
}
varInComparison{scope: I, name: N, span: S} :-
  constraint {
    record {
      ident {
        text: I
      }
    },
    constraintComparison {
      scalarExpr {
        scalarTerm {
          term {
            var{text: N, span: S}
          }
        }
      }
    }
  }.
----
text/plain
varInComparison{name: N, scope: I, span: S} :- 
  constraint{id: VconstraintID} &
  record{id: VrecordID, parentID: VconstraintID} &
  record{parentID: VrecordID, text: I} &
  record{parentID: VconstraintID}
