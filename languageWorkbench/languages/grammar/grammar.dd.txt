grammar
foo :- ["bar:", ???].
bar :- "foo".
ide.Suggestion{}?
----
application/datalog
ide.Suggestion{id: global{}, name: "bar", span: span{from: 16, to: 19}, type: "any"}.
ide.Suggestion{id: global{}, name: "foo", span: span{from: 16, to: 19}, type: "any"}.

grammar
foo :- baz.
tc.Problem{}?
----
application/datalog
tc.Problem{desc: undefinedRule{name: "baz"}, span: span{from: 7, to: 10}}.

grammar
a :- (^'"' | ['\\', '"']).
astInternal.node{}?
----
application/datalog
astInternal.node{id: 0, parentID: -1, rule: "main", span: span{from: 0, to: 26}, text: "a :- (^'\"' | ['\\\\', '\"'])."}.
astInternal.node{id: 1, parentID: 0, rule: "ruleDefn", span: span{from: 0, to: 26}, text: "a :- (^'\"' | ['\\\\', '\"'])."}.
astInternal.node{id: 10, parentID: 9, rule: "charRule", span: span{from: 6, to: 10}, text: "^'\"'"}.
astInternal.node{id: 11, parentID: 10, rule: "notChar", span: span{from: 6, to: 10}, text: "^'\"'"}.
astInternal.node{id: 12, parentID: 11, rule: "charRule", span: span{from: 7, to: 10}, text: "'\"'"}.
astInternal.node{id: 13, parentID: 12, rule: "singleChar", span: span{from: 7, to: 10}, text: "'\"'"}.
astInternal.node{id: 14, parentID: 7, rule: "rule", span: span{from: 13, to: 24}, text: "['\\\\', '\"']"}.
astInternal.node{id: 15, parentID: 14, rule: "seq", span: span{from: 13, to: 24}, text: "['\\\\', '\"']"}.
astInternal.node{id: 16, parentID: 15, rule: "ws", span: span{from: 14, to: 14}, text: ""}.
astInternal.node{id: 17, parentID: 15, rule: "rule", span: span{from: 14, to: 18}, text: "'\\\\'"}.
astInternal.node{id: 18, parentID: 17, rule: "charRule", span: span{from: 14, to: 18}, text: "'\\\\'"}.
astInternal.node{id: 19, parentID: 18, rule: "singleChar", span: span{from: 14, to: 18}, text: "'\\\\'"}.
astInternal.node{id: 2, parentID: 1, rule: "ident", span: span{from: 0, to: 1}, text: "a"}.
astInternal.node{id: 20, parentID: 15, rule: "rule", span: span{from: 20, to: 23}, text: "'\"'"}.
astInternal.node{id: 21, parentID: 20, rule: "charRule", span: span{from: 20, to: 23}, text: "'\"'"}.
astInternal.node{id: 22, parentID: 21, rule: "singleChar", span: span{from: 20, to: 23}, text: "'\"'"}.
astInternal.node{id: 23, parentID: 15, rule: "ws", span: span{from: 18, to: 18}, text: ""}.
astInternal.node{id: 24, parentID: 15, rule: "ws", span: span{from: 19, to: 20}, text: " "}.
astInternal.node{id: 25, parentID: 15, rule: "ws", span: span{from: 23, to: 23}, text: ""}.
astInternal.node{id: 26, parentID: 7, rule: "ws", span: span{from: 10, to: 11}, text: " "}.
astInternal.node{id: 27, parentID: 7, rule: "ws", span: span{from: 12, to: 13}, text: " "}.
astInternal.node{id: 28, parentID: 7, rule: "ws", span: span{from: 24, to: 24}, text: ""}.
astInternal.node{id: 29, parentID: 0, rule: "ws", span: span{from: 26, to: 26}, text: ""}.
astInternal.node{id: 3, parentID: 2, rule: "alpha", span: span{from: 0, to: 1}, text: "a"}.
astInternal.node{id: 4, parentID: 1, rule: "ws", span: span{from: 1, to: 2}, text: " "}.
astInternal.node{id: 5, parentID: 1, rule: "ws", span: span{from: 4, to: 5}, text: " "}.
astInternal.node{id: 6, parentID: 1, rule: "rule", span: span{from: 5, to: 25}, text: "(^'\"' | ['\\\\', '\"'])"}.
astInternal.node{id: 7, parentID: 6, rule: "choice", span: span{from: 5, to: 25}, text: "(^'\"' | ['\\\\', '\"'])"}.
astInternal.node{id: 8, parentID: 7, rule: "ws", span: span{from: 6, to: 6}, text: ""}.
astInternal.node{id: 9, parentID: 7, rule: "rule", span: span{from: 6, to: 10}, text: "^'\"'"}.

grammar
commentChar :- '\n'.
astInternal.node{}?
----
application/datalog
astInternal.node{id: 0, parentID: -1, rule: "main", span: span{from: 0, to: 20}, text: "commentChar :- '\\n'."}.
astInternal.node{id: 1, parentID: 0, rule: "ruleDefn", span: span{from: 0, to: 20}, text: "commentChar :- '\\n'."}.
astInternal.node{id: 10, parentID: 2, rule: "alpha", span: span{from: 7, to: 8}, text: "C"}.
astInternal.node{id: 11, parentID: 2, rule: "alpha", span: span{from: 8, to: 9}, text: "h"}.
astInternal.node{id: 12, parentID: 2, rule: "alpha", span: span{from: 9, to: 10}, text: "a"}.
astInternal.node{id: 13, parentID: 2, rule: "alpha", span: span{from: 10, to: 11}, text: "r"}.
astInternal.node{id: 14, parentID: 1, rule: "ws", span: span{from: 11, to: 12}, text: " "}.
astInternal.node{id: 15, parentID: 1, rule: "ws", span: span{from: 14, to: 15}, text: " "}.
astInternal.node{id: 16, parentID: 1, rule: "rule", span: span{from: 15, to: 19}, text: "'\\n'"}.
astInternal.node{id: 17, parentID: 16, rule: "charRule", span: span{from: 15, to: 19}, text: "'\\n'"}.
astInternal.node{id: 18, parentID: 17, rule: "singleChar", span: span{from: 15, to: 19}, text: "'\\n'"}.
astInternal.node{id: 19, parentID: 0, rule: "ws", span: span{from: 20, to: 20}, text: ""}.
astInternal.node{id: 2, parentID: 1, rule: "ident", span: span{from: 0, to: 11}, text: "commentChar"}.
astInternal.node{id: 3, parentID: 2, rule: "alpha", span: span{from: 0, to: 1}, text: "c"}.
astInternal.node{id: 4, parentID: 2, rule: "alpha", span: span{from: 1, to: 2}, text: "o"}.
astInternal.node{id: 5, parentID: 2, rule: "alpha", span: span{from: 2, to: 3}, text: "m"}.
astInternal.node{id: 6, parentID: 2, rule: "alpha", span: span{from: 3, to: 4}, text: "m"}.
astInternal.node{id: 7, parentID: 2, rule: "alpha", span: span{from: 4, to: 5}, text: "e"}.
astInternal.node{id: 8, parentID: 2, rule: "alpha", span: span{from: 5, to: 6}, text: "n"}.
astInternal.node{id: 9, parentID: 2, rule: "alpha", span: span{from: 6, to: 7}, text: "t"}.

grammar
binOp :- [left:op, "==", right:op].
scope.Var{}?
----
application/datalog
scope.Var{kind: "rule", name: "op", scopeID: global{}, span: span{from: 15, to: 17}}.
scope.Var{kind: "rule", name: "op", scopeID: global{}, span: span{from: 31, to: 33}}.
