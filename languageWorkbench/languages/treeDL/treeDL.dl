# Var

scope.Var{scopeID: I, name: N, span: S, kind: K} :-
  var.exprVar{scopeID: I, name: N, span: S, kind: K} |
  var.callVar{scopeID: I, name: N, span: S, kind: K} |
  var.type{scopeID: I, name: N, span: S, kind: K}.
var.exprVar{scopeID: Statement, name: N, span: S, kind: "var"} :-
  ast.Statement{id: Statement} &
  ast.Assign{id: Assign, parentID: Statement} &
  ast.Expr{id: Expr, parentID: Assign} &
  var.expr{id: Expr, name: N, span: S}.
var.expr{id: I, name: N, span: S} :-
  var.memberAccess{id: I, name: N, span: S} |
  var.bindAttr{id: I, name: N, span: S}.
var.memberAccess{id: Expr, name: N, span: span{from: Start, to: End}} :-
  ast.Expr{id: Expr} &
  ast.MemberAccess{id: MemberAccess, parentID: Expr, span: span{from: Start}} &
  ast.Ident{parentID: MemberAccess, text: N, span: span{from: Start, to: End}}.
var.bindAttr{id: Expr, name: N, span: span{from: Start, to: End}} :-
  ast.Expr{id: Expr} &
  ast.Bind{id: Bind, parentID: Expr} &
  ast.Attrs{id: Attrs, parentID: Bind} &
  ast.Attr{id: Attr, parentID: Attrs, span: span{to: End}} &
  ast.Ident{parentID: Attr, text: N, span: span{from: Start, to: End}}. # TODO: use 'key'
var.callVar{scopeID: Stmt, name: N, span: S, kind: "var"} :-
  ast.Statement{id: Stmt} &
  ast.Filter{id: Filter, parentID: Stmt} &
  ast.Ident{parentID: Filter, text: N, span: S}.

var.type{scopeID: I, name: N, span: S, kind: "type"} :-
  var.getType{scopeID: I, name: N, span: S} |
  var.bindType{scopeID: I, name: N, span: S}.
var.getType{scopeID: global{}, name: N, span: S} :-
  ast.Get{id: Get} &
  ast.Ident{parentID: Get, text: N, span: S}.
var.bindType{scopeID: global{}, name: N, span: S} :-
  ast.Bind{id: Get} &
  ast.Ident{parentID: Get, text: N, span: S}.

# Defn

scope.Defn{scopeID: I, span: S, name: N, kind: K, type: T} :-
  defn.localVar{scopeID: I, span: S, name: N, kind: K, type: T} |
  defn.type{scopeID: I, span: S, name: N, kind: K, type: T} |
  defn.bindAttr{scopeID: I, span: S, name: N, kind: K, type: T}.

defn.localVar{scopeID: Statement, span: S, name: N, kind: "var", type: "any"} :-
  ast.Statement{id: Statement} &
  ast.Assign{id: Assign, parentID: Statement} &
  ast.Ident{parentID: Assign, span: S, text: N}.

defn.type{scopeID: global{}, span: S, name: N, kind: "type", type: "any"} :-
  ast.TypeDecl{id: Decl} &
  ast.Ident{parentID: Decl, text: N, span: S}.

defn.bindAttr{scopeID: Typ, span: S, name: N, kind: "attr", type: "any"} :-
  ast.Bind{id: Bind} &
  ast.Ident{parentID: Bind, text: Typ} &
  ast.Attrs{id: Attrs, parentID: Bind} &
  ast.Attr{id: Attr, parentID: Attrs} &
  ast.Ident{parentID: Attr, text: N, span: S, tag: "key"}.

# TODO: attrs from type

# Type Checking

tc.Type{scope: S, var: N, type: T} :-
  tc.type.get{scope: S, var: N, type: T} |
  tc.type.bind{scope: S, var: N, type: T}.
tc.type.get{scope: Statement, var: N, type: T} :-
  ast.Statement{id: Statement} &
  ast.Assign{id: Assign, parentID: Statement} &
  ast.Ident{parentID: Assign, span: S, text: N} &
  ast.Expr{id: Expr, parentID: Assign} &
  ast.Get{id: Get, parentID: Expr} &
  ast.Ident{parentID: Get, text: T}.
tc.type.bind{scope: Statement, var: N, type: T} :-
  ast.Statement{id: Statement} &
  ast.Assign{id: Assign, parentID: Statement} &
  ast.Ident{parentID: Assign, span: S, text: N} &
  ast.Expr{id: Expr, parentID: Assign} &
  ast.Bind{id: Bind, parentID: Expr} &
  ast.Ident{parentID: Bind, text: T}.

# TODO: get type of attr
tc.typeAttr{struct: S, attr: A} :-
  tc.typeAttr.fromBind{struct: S, attr: A} |
  tc.typeAttr.fromBind{struct: S, attr: A}.
tc.typeAttr.fromBind{struct: S, attr: A} :-
  ast.Bind{id: Bind} &
  ast.Ident{parentID: Bind, text: S} &
  ast.Attrs{id: Attrs, parentID: Bind} &
  ast.Attr{id: Attr, parentID: Attrs} &
  ast.Ident{parentID: Attr, tag: "key", text: A}.
tc.typeAttr.fromTypeDecl{struct: S, attr: A, type: T} :-
  ast.TypeDecl{id: Decl} &
  ast.Ident{parentID: Decl, text: S} &
  ast.MemberDecls{id: MemberDecls, parentID: Decl} &
  ast.MemberDecl{id: MemberDecl, parentID: MemberDecls} &
  ast.Ident{parentID: MemberDecl, tag: "name", text: A} &
  ast.Ident{parentID: MemberDecl, tag: "type", text: T}.

# Parent

scope.Parent{parentID: First, childID: Second} :-
  ast.Statement{id: First} &
  ast.Statement{id: Second} &
  astInternal.next{prev: First, next: Second}.

# Problem

tc.Problem{desc: D, span: S} :-
  tc.undefinedVar{desc: D, span: S}.
tc.undefinedVar{desc: undefinedVar{name: N}, span: S} :-
  scope.Var{scopeID: I, name: N, span: S, kind: K} &
  !scope.Item{scopeID: I, name: N, kind: K}.

# Highlight

hl.mapping{rule: "Ident", type: "ident"}.
hl.mapping{rule: "NumberLit", type: "number"}.
hl.mapping{rule: "BoolLit", type: "number"}.
hl.mapping{rule: "StringLit", type: "string"}.
hl.mapping{rule: "comment", type: "comment"}.
hl.mapping{rule: "addKW", type: "keyword"}.
hl.mapping{rule: "setKW", type: "keyword"}.
hl.mapping{rule: "ruleKW", type: "keyword"}.
hl.mapping{rule: "typeKW", type: "keyword"}.
