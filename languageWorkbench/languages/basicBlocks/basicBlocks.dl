scope.Scope{id: I, label: L} :-
  scope.scopeInstr{id: I, label: L} |
  scope.scopeBlock{id: I, label: L}.
scope.scopeInstr{id: I, label: T} :-
  ast.instr{id: I, text: T}.
scope.scopeBlock{id: BlockID, label: T} :-
  ast.block{id: BlockID} &
  ast.label{parentID: BlockID, text: T}.

# this var defined at this node
scope.Defn{scopeID: I, span: S, name: N, kind: K, type: "any"} :-
  scope.defnValue{scopeID: I, span: S, name: N, kind: K} |
  scope.defnLabel{scopeID: I, span: S, name: N, kind: K}.
# definitions of value variables
scope.defnValue{scopeID: global{}, span: S, name: N, kind: "value"} :-
  ast.instr{id: InstrID} &
  ast.valueInstr{id: ValueInstrID, parentID: InstrID} &
  ast.ident{parentID: ValueInstrID, text: N, span: S}.
# definitions of label variables
scope.defnLabel{scopeID: global{}, span: S, name: N, kind: "label"} :-
  ast.label{parentID: BlockID, span: S, text: N} &
  ast.block{id: BlockID}.

# TODO: say which kind of var it's trying to use
# i.e. value vs. label
scope.Var{scopeID: Scope, name: N, span: S, kind: K} :-
  scope.varValue{scopeID: Scope, name: N, span: S, kind: K} |
  scope.varLabel{scopeID: Scope, name: N, span: S, kind: K}.
# variables that refer to values
scope.varValue{scopeID: Scope, name: N, span: S, kind: "value"} :-
  scope.varValue.arg{scopeID: Scope, name: N, span: S} |
  scope.varValue.condGoto{scopeID: Scope, name: N, span: S}.
scope.varValue.arg{scopeID: global{}, name: N, span: S} :-
  ast.ident{parentID: ParamsID, text: N, span: S} &
  ast.params{id: ParamsID, parentID: CallID} &
  ast.call{id: CallID, parentID: RValueID} &
  ast.rvalue{id: RValueID, parentID: ValueInstrID} &
  ast.valueInstr{id: ValueInstrID}.
scope.varValue.condGoto{scopeID: global{}, name: N, span: S} :-
  ast.ifClause{id: IfClauseID} &
  ast.ident{parentID: IfClauseID, text: N, span: S}.
# variables that refer to labels
scope.varLabel{scopeID: global{}, name: N, span: S, kind: "label"} :-
  ast.label{id: LabelID, parentID: GotoID, text: N, span: S} &
  ast.gotoInstr{id: GotoID} |
  ast.label{id: LabelID, parentID: ForkToID, text: N, span: S} &
  ast.forkToInstr{id: ForkToID}.

scope.Placeholder{span: S, scopeID: Scope, kind: K} :-
  scope.placeholderValue{span: S, scopeID: Scope, kind: K} |
  scope.placeholderLabel{span: S, scopeID: Scope, kind: K}.
scope.placeholderValue{span: S, scopeID: global{}, kind: "value"} :-
  ast.Placeholder{id: PlaceholderID, parentID: ParamsID, span: S} &
  ast.params{id: ParamsID, parentID: CallID} &
  ast.call{id: CallID, parentID: RValueID} &
  ast.rvalue{id: RValueID, parentID: ValueInstrID} &
  ast.valueInstr{id: ValueInstrID}.
scope.placeholderLabel{span: S, scopeID: global{}, kind: "label"} :-
  ast.Placeholder{id: PlaceholderID, parentID: GotoInstrID, span: S} &
  ast.gotoInstr{id: GotoInstrID}.

# === highlighting ===

hl.mapping{rule: "gotoKW", type: "keyword"}.
hl.mapping{rule: "ifKW", type: "keyword"}.
hl.mapping{rule: "forkToKW", type: "keyword"}.
hl.mapping{rule: "int", type: "number"}.
hl.mapping{rule: "string", type: "string"}.
hl.mapping{rule: "bool", type: "number"}.
hl.mapping{rule: "ident", type: "ident"}.
hl.mapping{rule: "comment", type: "comment"}.
