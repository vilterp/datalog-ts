fp
let x = 2 in plus2(x)
tc.Type{id: I, type: T}?
----
application/datalog
tc.Type{id: 1, type: "int"}.
tc.Type{id: 15, type: "int"}.
tc.Type{id: 28, type: "int"}.
tc.Type{id: 9, type: "int"}.

fp
let x = 2 in ???
ide.Suggestion{id: I, name: N, span: S, type: T}?
----
application/datalog
ide.Suggestion{id: 15, name: "plus2", span: span{from: 13, to: 16}, type: tapp{from: "int", to: "int"}}.
ide.Suggestion{id: 15, name: "x", span: span{from: 13, to: 16}, type: "int"}.

fp
let x = 40 in plus2(x)
hl.Segment{}?
----
application/datalog
hl.Segment{highlight: false, span: span{from: 0, to: 3}, type: "keyword"}.
hl.Segment{highlight: false, span: span{from: 11, to: 13}, type: "keyword"}.
hl.Segment{highlight: false, span: span{from: 14, to: 19}, type: "variable"}.
hl.Segment{highlight: false, span: span{from: 20, to: 21}, type: "variable"}.
hl.Segment{highlight: false, span: span{from: 4, to: 5}, type: "variable"}.
hl.Segment{highlight: false, span: span{from: 8, to: 10}, type: "number"}.

fp
let x = 2 in
let y = plus2(x) in
plus2(??|||?)
ide.CurrentSuggestion{}?
----
application/datalog
ide.CurrentSuggestion{id: 56, name: "plus2", span: span{from: 39, to: 42}, type: tapp{from: "int", to: "int"}}.
ide.CurrentSuggestion{id: 56, name: "x", span: span{from: 39, to: 42}, type: "int"}.
ide.CurrentSuggestion{id: 56, name: "y", span: span{from: 39, to: 42}, type: "int"}.

fp
plus2("hello world")
astInternal.node{id: 14}?
----
application/datalog
astInternal.node{id: 14, parentID: 2, rule: "expr", span: span{from: 6, to: 19}, text: "\"hello world\""}.

fp
(x: int): int => ???
ide.Suggestion{}?
----
application/datalog
ide.Suggestion{id: 26, name: "plus2", span: span{from: 17, to: 20}, type: tapp{from: "int", to: "int"}}.
ide.Suggestion{id: 26, name: "x", span: span{from: 17, to: 20}, type: "int"}.

fp
(x: int): int => x
tc.Type{}?
----
application/datalog
tc.Type{id: 1, type: tapp{from: "int", to: "int"}}.
tc.Type{id: 26, type: "int"}.

fp
plus2("hello world")
tc.Problem{}?
----
application/datalog
tc.Problem{desc: argTypeMismatch{expected: "int", got: "string"}, span: span{from: 6, to: 19}}.

fp
(x: string): int => plus2(x)
tc.Problem{}?
----
application/datalog
tc.Problem{desc: argTypeMismatch{expected: "int", got: "string"}, span: span{from: 26, to: 27}}.

fp
let x = 2 in y
tc.Problem{}?
----
application/datalog
tc.Problem{desc: undefinedVar{name: "y"}, span: span{from: 13, to: 14}}.

fp
let x = 2 in x
tc.Problem{}?
----
application/datalog

fp
let x = 2 in
let y = x in
plus2(x|||)
ide.CurrentUsageOrDefn{}?
----
application/datalog
ide.CurrentUsageOrDefn{span: span{from: 21, to: 22}, type: "usage"}.
ide.CurrentUsageOrDefn{span: span{from: 32, to: 33}, type: "usage"}.
ide.CurrentUsageOrDefn{span: span{from: 4, to: 5}, type: "defn"}.

fp
let x||| = 2 in
let y = x in
plus2(x)
ide.CurrentUsageOrDefn{}?
----
application/datalog
ide.CurrentUsageOrDefn{span: span{from: 21, to: 22}, type: "usage"}.
ide.CurrentUsageOrDefn{span: span{from: 32, to: 33}, type: "usage"}.
ide.CurrentUsageOrDefn{span: span{from: 4, to: 5}, type: "defn"}.

fp
let z||| = 2 in
let x = 3 in
plus2(x)
ide.CurrentUsageOrDefn{}?
----
application/datalog
ide.CurrentUsageOrDefn{span: span{from: 4, to: 5}, type: "defn"}.

fp
let z||| = somethingUndef in
let x = 3 in
plus2(x)
ide.CurrentUsageOrDefn{}?
----
application/datalog

fp
let x = 2 in x|||
ide.RenameSpan{}?
----
application/datalog
ide.RenameSpan{span: span{from: 13, to: 14}}.
ide.RenameSpan{span: span{from: 4, to: 5}}.

fp
let x||| = 2 in x
ide.RenameSpan{}?
----
application/datalog
ide.RenameSpan{span: span{from: 13, to: 14}}.
ide.RenameSpan{span: span{from: 4, to: 5}}.

fp
let x||| = 2 in 3
ide.RenameSpan{}?
----
application/datalog
ide.RenameSpan{span: span{from: 4, to: 5}}.
