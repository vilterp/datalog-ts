@outline
module Datalog[AST]
    def Defn(…) =
        AST:node
    def Placeholder(…) =
        …
end

// grandparent(a, c) =
//   parent(a, b) and
//   parent(b, c)

// 1:rule
//   2: record
//     3: ident:"grandparent"
//     4: args
//        5: ident:"a"
//        6: ident:"c"
//   7: conjunct
//      8: record
//         9: ident:"parent"
//         10: args
//            11: ident:"a"
//            12: ident:"b"
//   13: conjunct
//      14: record
//         15: ident:"parent"
//         16: args
//            17: ident:"a"
//            18: ident:"b"


def node:parent = {
    (2, 1);
    (3, 2);
    (4, 2);
    // ...
}

def node:span:start = {
    (1, ...);
    (2, ...);
}

def node:span:end = {
    (1, ...);
    (2, ...);
}

// ...?
def node:text = {
    (1, ...);
    (2, ...);
}

def node:rule = {
    (1, "rule");
    (2, "record");
    (3, "ident");
    ...
}


// ....

// this can be autogenerated
module mapping[AST]
    def ident(n) =
        AST:Node(id) and
        AST:rule(id, "ident")
end
