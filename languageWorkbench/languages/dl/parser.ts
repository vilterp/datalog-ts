// generated by parserlib; do not edit.
import {
  textForSpan,
  childByName,
  childrenByName,
  RuleTree,
  extractRuleTree,
} from "../../parserlib/ruleTree";
import { Span, Grammar } from "../../parserlib/types";
import * as parserlib from "../../parserlib/parser";
export type DLAggregation = {
  type: "Aggregation";
  text: string;
  span: Span;
  aggregation: DLIdent;
  var: DLVar[];
  commaSpace: DLCommaSpace[];
  relationExpr: DLRelationExpr;
};
export type DLAlpha = {
  type: "Alpha";
  text: string;
  span: Span;
};
export type DLAlphaNum = DLAlpha | DLNum;
export type DLAnonymousRelation = {
  type: "AnonymousRelation";
  text: string;
  span: Span;
  record: DLRecord;
  relationExpr: DLRelationExpr;
};
export type DLArithmetic = DLAssignmentOnLeft | DLAssignmentOnRight;
export type DLArithmeticOp = {
  type: "ArithmeticOp";
  text: string;
  span: Span;
};
export type DLArray = {
  type: "Array";
  text: string;
  span: Span;
  scalarExpr: DLScalarExpr[];
  commaSpace: DLCommaSpace[];
};
export type DLAssignmentOnLeft = {
  type: "AssignmentOnLeft";
  text: string;
  span: Span;
  result: DLScalarExpr;
  left: DLScalarExpr;
  arithmeticOp: DLArithmeticOp;
  right: DLScalarExpr;
};
export type DLAssignmentOnRight = {
  type: "AssignmentOnRight";
  text: string;
  span: Span;
  left: DLScalarExpr;
  arithmeticOp: DLArithmeticOp;
  right: DLScalarExpr;
  result: DLScalarExpr;
};
export type DLBool = {
  type: "Bool";
  text: string;
  span: Span;
};
export type DLCommaSpace = {
  type: "CommaSpace";
  text: string;
  span: Span;
};
export type DLComment = {
  type: "Comment";
  text: string;
  span: Span;
  commentChar: DLCommentChar[];
};
export type DLCommentChar = {
  type: "CommentChar";
  text: string;
  span: Span;
};
export type DLComparison = {
  type: "Comparison";
  text: string;
  span: Span;
  left: DLScalarExpr;
  comparisonOp: DLComparisonOp;
  right: DLScalarExpr;
};
export type DLComparisonOp = {
  type: "ComparisonOp";
  text: string;
  span: Span;
};
export type DLConjunct =
  | DLRecordCall
  | DLComparison
  | DLArithmetic
  | DLNegation
  | DLPlaceholder;
export type DLDeleteFact = {
  type: "DeleteFact";
  text: string;
  span: Span;
  record: DLRecord;
};
export type DLDict = {
  type: "Dict";
  text: string;
  span: Span;
  dictKeyValue: DLDictKeyValue[];
  commaSpace: DLCommaSpace[];
};
export type DLDictKeyValue = {
  type: "DictKeyValue";
  text: string;
  span: Span;
  key: DLString;
  value: DLScalarExpr;
};
export type DLDisjunct = {
  type: "Disjunct";
  text: string;
  span: Span;
  conjunct: DLConjunct[];
};
export type DLDisjuncts = {
  type: "Disjuncts";
  text: string;
  span: Span;
  disjunct: DLDisjunct[];
};
export type DLFact = {
  type: "Fact";
  text: string;
  span: Span;
  record: DLRecord;
};
export type DLFunctionCall = {
  type: "FunctionCall";
  text: string;
  span: Span;
  ident: DLIdent;
  recordAttrs: DLRecordAttrs[];
  commaSpace: DLCommaSpace[];
};
export type DLIdent = {
  type: "Ident";
  text: string;
  span: Span;
  alpha: DLAlpha;
  alphaNum: DLAlphaNum[];
};
export type DLInt = {
  type: "Int";
  text: string;
  span: Span;
  first: DLNum;
  num: DLNum[];
};
export type DLLoadKW = {
  type: "LoadKW";
  text: string;
  span: Span;
};
export type DLLoadStmt = {
  type: "LoadStmt";
  text: string;
  span: Span;
  loadKW: DLLoadKW;
  path: DLPath;
};
export type DLMain = {
  type: "Main";
  text: string;
  span: Span;
  statement: DLStatement[];
  comment: DLComment[];
};
export type DLNegation = {
  type: "Negation";
  text: string;
  span: Span;
  record: DLRecord;
};
export type DLNum = {
  type: "Num";
  text: string;
  span: Span;
};
export type DLPath = {
  type: "Path";
  text: string;
  span: Span;
  pathSegment: DLPathSegment[];
};
export type DLPathSegment = {
  type: "PathSegment";
  text: string;
  span: Span;
};
export type DLPlaceholder = {
  type: "Placeholder";
  text: string;
  span: Span;
};
export type DLQuery = {
  type: "Query";
  text: string;
  span: Span;
  record: DLRecord;
};
export type DLRecord = {
  type: "Record";
  text: string;
  span: Span;
  recordAttrs: DLRecordAttrs;
};
export type DLRecordAttrs = {
  type: "RecordAttrs";
  text: string;
  span: Span;
  recordKeyValue: DLRecordKeyValue[];
  placeholder: DLPlaceholder[];
  commaSpace: DLCommaSpace[];
};
export type DLRecordCall = {
  type: "RecordCall";
  text: string;
  span: Span;
  ident: DLIdent;
  record: DLRecord;
};
export type DLRecordKeyValue = {
  type: "RecordKeyValue";
  text: string;
  span: Span;
  ident: DLIdent;
  scalarExpr: DLScalarExpr;
};
export type DLRelationExpr =
  | DLDisjuncts
  | DLRelationLiteral
  | DLAnonymousRelation
  | DLAggregation;
export type DLRelationLiteral = {
  type: "RelationLiteral";
  text: string;
  span: Span;
  record: DLRecord[];
  commaSpace: DLCommaSpace[];
};
export type DLRule = {
  type: "Rule";
  text: string;
  span: Span;
  ident: DLIdent;
  relationExpr: DLRelationExpr;
};
export type DLScalarExpr =
  | DLRecord
  | DLFunctionCall
  | DLInt
  | DLVar
  | DLString
  | DLBool
  | DLArray
  | DLDict
  | DLPlaceholder;
export type DLStatement =
  | DLRule
  | DLFact
  | DLQuery
  | DLDeleteFact
  | DLTableDecl
  | DLLoadStmt;
export type DLString = {
  type: "String";
  text: string;
  span: Span;
  stringChar: DLStringChar[];
};
export type DLStringChar = {
  type: "StringChar";
  text: string;
  span: Span;
};
export type DLTableDecl = {
  type: "TableDecl";
  text: string;
  span: Span;
  tableKW: DLTableKW;
  name: DLIdent;
};
export type DLTableKW = {
  type: "TableKW";
  text: string;
  span: Span;
};
export type DLVar = {
  type: "Var";
  text: string;
  span: Span;
  alphaNum: DLAlphaNum[];
};
export type DLWs = {
  type: "Ws";
  text: string;
  span: Span;
};
export function parseAggregation(input: string): DLAggregation {
  const traceTree = parserlib.parse(GRAMMAR, "aggregation", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractAggregation(input, ruleTree);
}
export function parseAlpha(input: string): DLAlpha {
  const traceTree = parserlib.parse(GRAMMAR, "alpha", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractAlpha(input, ruleTree);
}
export function parseAlphaNum(input: string): DLAlphaNum {
  const traceTree = parserlib.parse(GRAMMAR, "alphaNum", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractAlphaNum(input, ruleTree);
}
export function parseAnonymousRelation(input: string): DLAnonymousRelation {
  const traceTree = parserlib.parse(GRAMMAR, "anonymousRelation", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractAnonymousRelation(input, ruleTree);
}
export function parseArithmetic(input: string): DLArithmetic {
  const traceTree = parserlib.parse(GRAMMAR, "arithmetic", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractArithmetic(input, ruleTree);
}
export function parseArithmeticOp(input: string): DLArithmeticOp {
  const traceTree = parserlib.parse(GRAMMAR, "arithmeticOp", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractArithmeticOp(input, ruleTree);
}
export function parseArray(input: string): DLArray {
  const traceTree = parserlib.parse(GRAMMAR, "array", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractArray(input, ruleTree);
}
export function parseAssignmentOnLeft(input: string): DLAssignmentOnLeft {
  const traceTree = parserlib.parse(GRAMMAR, "assignmentOnLeft", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractAssignmentOnLeft(input, ruleTree);
}
export function parseAssignmentOnRight(input: string): DLAssignmentOnRight {
  const traceTree = parserlib.parse(GRAMMAR, "assignmentOnRight", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractAssignmentOnRight(input, ruleTree);
}
export function parseBool(input: string): DLBool {
  const traceTree = parserlib.parse(GRAMMAR, "bool", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractBool(input, ruleTree);
}
export function parseCommaSpace(input: string): DLCommaSpace {
  const traceTree = parserlib.parse(GRAMMAR, "commaSpace", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractCommaSpace(input, ruleTree);
}
export function parseComment(input: string): DLComment {
  const traceTree = parserlib.parse(GRAMMAR, "comment", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractComment(input, ruleTree);
}
export function parseCommentChar(input: string): DLCommentChar {
  const traceTree = parserlib.parse(GRAMMAR, "commentChar", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractCommentChar(input, ruleTree);
}
export function parseComparison(input: string): DLComparison {
  const traceTree = parserlib.parse(GRAMMAR, "comparison", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractComparison(input, ruleTree);
}
export function parseComparisonOp(input: string): DLComparisonOp {
  const traceTree = parserlib.parse(GRAMMAR, "comparisonOp", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractComparisonOp(input, ruleTree);
}
export function parseConjunct(input: string): DLConjunct {
  const traceTree = parserlib.parse(GRAMMAR, "conjunct", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractConjunct(input, ruleTree);
}
export function parseDeleteFact(input: string): DLDeleteFact {
  const traceTree = parserlib.parse(GRAMMAR, "deleteFact", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractDeleteFact(input, ruleTree);
}
export function parseDict(input: string): DLDict {
  const traceTree = parserlib.parse(GRAMMAR, "dict", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractDict(input, ruleTree);
}
export function parseDictKeyValue(input: string): DLDictKeyValue {
  const traceTree = parserlib.parse(GRAMMAR, "dictKeyValue", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractDictKeyValue(input, ruleTree);
}
export function parseDisjunct(input: string): DLDisjunct {
  const traceTree = parserlib.parse(GRAMMAR, "disjunct", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractDisjunct(input, ruleTree);
}
export function parseDisjuncts(input: string): DLDisjuncts {
  const traceTree = parserlib.parse(GRAMMAR, "disjuncts", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractDisjuncts(input, ruleTree);
}
export function parseFact(input: string): DLFact {
  const traceTree = parserlib.parse(GRAMMAR, "fact", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractFact(input, ruleTree);
}
export function parseFunctionCall(input: string): DLFunctionCall {
  const traceTree = parserlib.parse(GRAMMAR, "functionCall", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractFunctionCall(input, ruleTree);
}
export function parseIdent(input: string): DLIdent {
  const traceTree = parserlib.parse(GRAMMAR, "ident", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractIdent(input, ruleTree);
}
export function parseInt(input: string): DLInt {
  const traceTree = parserlib.parse(GRAMMAR, "int", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractInt(input, ruleTree);
}
export function parseLoadKW(input: string): DLLoadKW {
  const traceTree = parserlib.parse(GRAMMAR, "loadKW", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractLoadKW(input, ruleTree);
}
export function parseLoadStmt(input: string): DLLoadStmt {
  const traceTree = parserlib.parse(GRAMMAR, "loadStmt", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractLoadStmt(input, ruleTree);
}
export function parseMain(input: string): DLMain {
  const traceTree = parserlib.parse(GRAMMAR, "main", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractMain(input, ruleTree);
}
export function parseNegation(input: string): DLNegation {
  const traceTree = parserlib.parse(GRAMMAR, "negation", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractNegation(input, ruleTree);
}
export function parseNum(input: string): DLNum {
  const traceTree = parserlib.parse(GRAMMAR, "num", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractNum(input, ruleTree);
}
export function parsePath(input: string): DLPath {
  const traceTree = parserlib.parse(GRAMMAR, "path", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractPath(input, ruleTree);
}
export function parsePathSegment(input: string): DLPathSegment {
  const traceTree = parserlib.parse(GRAMMAR, "pathSegment", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractPathSegment(input, ruleTree);
}
export function parsePlaceholder(input: string): DLPlaceholder {
  const traceTree = parserlib.parse(GRAMMAR, "placeholder", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractPlaceholder(input, ruleTree);
}
export function parseQuery(input: string): DLQuery {
  const traceTree = parserlib.parse(GRAMMAR, "query", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractQuery(input, ruleTree);
}
export function parseRecord(input: string): DLRecord {
  const traceTree = parserlib.parse(GRAMMAR, "record", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractRecord(input, ruleTree);
}
export function parseRecordAttrs(input: string): DLRecordAttrs {
  const traceTree = parserlib.parse(GRAMMAR, "recordAttrs", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractRecordAttrs(input, ruleTree);
}
export function parseRecordCall(input: string): DLRecordCall {
  const traceTree = parserlib.parse(GRAMMAR, "recordCall", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractRecordCall(input, ruleTree);
}
export function parseRecordKeyValue(input: string): DLRecordKeyValue {
  const traceTree = parserlib.parse(GRAMMAR, "recordKeyValue", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractRecordKeyValue(input, ruleTree);
}
export function parseRelationExpr(input: string): DLRelationExpr {
  const traceTree = parserlib.parse(GRAMMAR, "relationExpr", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractRelationExpr(input, ruleTree);
}
export function parseRelationLiteral(input: string): DLRelationLiteral {
  const traceTree = parserlib.parse(GRAMMAR, "relationLiteral", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractRelationLiteral(input, ruleTree);
}
export function parseRule(input: string): DLRule {
  const traceTree = parserlib.parse(GRAMMAR, "rule", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractRule(input, ruleTree);
}
export function parseScalarExpr(input: string): DLScalarExpr {
  const traceTree = parserlib.parse(GRAMMAR, "scalarExpr", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractScalarExpr(input, ruleTree);
}
export function parseStatement(input: string): DLStatement {
  const traceTree = parserlib.parse(GRAMMAR, "statement", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractStatement(input, ruleTree);
}
export function parseString(input: string): DLString {
  const traceTree = parserlib.parse(GRAMMAR, "string", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractString(input, ruleTree);
}
export function parseStringChar(input: string): DLStringChar {
  const traceTree = parserlib.parse(GRAMMAR, "stringChar", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractStringChar(input, ruleTree);
}
export function parseTableDecl(input: string): DLTableDecl {
  const traceTree = parserlib.parse(GRAMMAR, "tableDecl", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractTableDecl(input, ruleTree);
}
export function parseTableKW(input: string): DLTableKW {
  const traceTree = parserlib.parse(GRAMMAR, "tableKW", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractTableKW(input, ruleTree);
}
export function parseVar(input: string): DLVar {
  const traceTree = parserlib.parse(GRAMMAR, "var", input);
  const ruleTree = extractRuleTree(traceTree);
  return extractVar(input, ruleTree);
}
function extractAggregation(input: string, node: RuleTree): DLAggregation {
  return {
    type: "Aggregation",
    text: textForSpan(input, node.span),
    span: node.span,
    aggregation: extractIdent(input, childByName(node, "ident", "aggregation")),
    var: childrenByName(node, "var").map((child) => extractVar(input, child)),
    commaSpace: childrenByName(node, "commaSpace").map((child) =>
      extractCommaSpace(input, child)
    ),
    relationExpr: extractRelationExpr(
      input,
      childByName(node, "relationExpr", null)
    ),
  };
}
function extractAlpha(input: string, node: RuleTree): DLAlpha {
  return {
    type: "Alpha",
    text: textForSpan(input, node.span),
    span: node.span,
  };
}
function extractAlphaNum(input: string, node: RuleTree): DLAlphaNum {
  const child = node.children[0];
  switch (child.name) {
    case "alpha": {
      return extractAlpha(input, child);
    }
    case "num": {
      return extractNum(input, child);
    }
  }
}
function extractAnonymousRelation(
  input: string,
  node: RuleTree
): DLAnonymousRelation {
  return {
    type: "AnonymousRelation",
    text: textForSpan(input, node.span),
    span: node.span,
    record: extractRecord(input, childByName(node, "record", null)),
    relationExpr: extractRelationExpr(
      input,
      childByName(node, "relationExpr", null)
    ),
  };
}
function extractArithmetic(input: string, node: RuleTree): DLArithmetic {
  const child = node.children[0];
  switch (child.name) {
    case "assignmentOnLeft": {
      return extractAssignmentOnLeft(input, child);
    }
    case "assignmentOnRight": {
      return extractAssignmentOnRight(input, child);
    }
  }
}
function extractArithmeticOp(input: string, node: RuleTree): DLArithmeticOp {
  return {
    type: "ArithmeticOp",
    text: textForSpan(input, node.span),
    span: node.span,
  };
}
function extractArray(input: string, node: RuleTree): DLArray {
  return {
    type: "Array",
    text: textForSpan(input, node.span),
    span: node.span,
    scalarExpr: childrenByName(node, "scalarExpr").map((child) =>
      extractScalarExpr(input, child)
    ),
    commaSpace: childrenByName(node, "commaSpace").map((child) =>
      extractCommaSpace(input, child)
    ),
  };
}
function extractAssignmentOnLeft(
  input: string,
  node: RuleTree
): DLAssignmentOnLeft {
  return {
    type: "AssignmentOnLeft",
    text: textForSpan(input, node.span),
    span: node.span,
    result: extractScalarExpr(input, childByName(node, "scalarExpr", "result")),
    left: extractScalarExpr(input, childByName(node, "scalarExpr", "left")),
    arithmeticOp: extractArithmeticOp(
      input,
      childByName(node, "arithmeticOp", null)
    ),
    right: extractScalarExpr(input, childByName(node, "scalarExpr", "right")),
  };
}
function extractAssignmentOnRight(
  input: string,
  node: RuleTree
): DLAssignmentOnRight {
  return {
    type: "AssignmentOnRight",
    text: textForSpan(input, node.span),
    span: node.span,
    left: extractScalarExpr(input, childByName(node, "scalarExpr", "left")),
    arithmeticOp: extractArithmeticOp(
      input,
      childByName(node, "arithmeticOp", null)
    ),
    right: extractScalarExpr(input, childByName(node, "scalarExpr", "right")),
    result: extractScalarExpr(input, childByName(node, "scalarExpr", "result")),
  };
}
function extractBool(input: string, node: RuleTree): DLBool {
  return {
    type: "Bool",
    text: textForSpan(input, node.span),
    span: node.span,
  };
}
function extractCommaSpace(input: string, node: RuleTree): DLCommaSpace {
  return {
    type: "CommaSpace",
    text: textForSpan(input, node.span),
    span: node.span,
  };
}
function extractComment(input: string, node: RuleTree): DLComment {
  return {
    type: "Comment",
    text: textForSpan(input, node.span),
    span: node.span,
    commentChar: childrenByName(node, "commentChar").map((child) =>
      extractCommentChar(input, child)
    ),
  };
}
function extractCommentChar(input: string, node: RuleTree): DLCommentChar {
  return {
    type: "CommentChar",
    text: textForSpan(input, node.span),
    span: node.span,
  };
}
function extractComparison(input: string, node: RuleTree): DLComparison {
  return {
    type: "Comparison",
    text: textForSpan(input, node.span),
    span: node.span,
    left: extractScalarExpr(input, childByName(node, "scalarExpr", "left")),
    comparisonOp: extractComparisonOp(
      input,
      childByName(node, "comparisonOp", null)
    ),
    right: extractScalarExpr(input, childByName(node, "scalarExpr", "right")),
  };
}
function extractComparisonOp(input: string, node: RuleTree): DLComparisonOp {
  return {
    type: "ComparisonOp",
    text: textForSpan(input, node.span),
    span: node.span,
  };
}
function extractConjunct(input: string, node: RuleTree): DLConjunct {
  const child = node.children[0];
  switch (child.name) {
    case "recordCall": {
      return extractRecordCall(input, child);
    }
    case "comparison": {
      return extractComparison(input, child);
    }
    case "arithmetic": {
      return extractArithmetic(input, child);
    }
    case "negation": {
      return extractNegation(input, child);
    }
    case "placeholder": {
      return extractPlaceholder(input, child);
    }
  }
}
function extractDeleteFact(input: string, node: RuleTree): DLDeleteFact {
  return {
    type: "DeleteFact",
    text: textForSpan(input, node.span),
    span: node.span,
    record: extractRecord(input, childByName(node, "record", null)),
  };
}
function extractDict(input: string, node: RuleTree): DLDict {
  return {
    type: "Dict",
    text: textForSpan(input, node.span),
    span: node.span,
    dictKeyValue: childrenByName(node, "dictKeyValue").map((child) =>
      extractDictKeyValue(input, child)
    ),
    commaSpace: childrenByName(node, "commaSpace").map((child) =>
      extractCommaSpace(input, child)
    ),
  };
}
function extractDictKeyValue(input: string, node: RuleTree): DLDictKeyValue {
  return {
    type: "DictKeyValue",
    text: textForSpan(input, node.span),
    span: node.span,
    key: extractString(input, childByName(node, "string", "key")),
    value: extractScalarExpr(input, childByName(node, "scalarExpr", "value")),
  };
}
function extractDisjunct(input: string, node: RuleTree): DLDisjunct {
  return {
    type: "Disjunct",
    text: textForSpan(input, node.span),
    span: node.span,
    conjunct: childrenByName(node, "conjunct").map((child) =>
      extractConjunct(input, child)
    ),
  };
}
function extractDisjuncts(input: string, node: RuleTree): DLDisjuncts {
  return {
    type: "Disjuncts",
    text: textForSpan(input, node.span),
    span: node.span,
    disjunct: childrenByName(node, "disjunct").map((child) =>
      extractDisjunct(input, child)
    ),
  };
}
function extractFact(input: string, node: RuleTree): DLFact {
  return {
    type: "Fact",
    text: textForSpan(input, node.span),
    span: node.span,
    record: extractRecord(input, childByName(node, "record", null)),
  };
}
function extractFunctionCall(input: string, node: RuleTree): DLFunctionCall {
  return {
    type: "FunctionCall",
    text: textForSpan(input, node.span),
    span: node.span,
    ident: extractIdent(input, childByName(node, "ident", null)),
    recordAttrs: childrenByName(node, "recordAttrs").map((child) =>
      extractRecordAttrs(input, child)
    ),
    commaSpace: childrenByName(node, "commaSpace").map((child) =>
      extractCommaSpace(input, child)
    ),
  };
}
function extractIdent(input: string, node: RuleTree): DLIdent {
  return {
    type: "Ident",
    text: textForSpan(input, node.span),
    span: node.span,
    alpha: extractAlpha(input, childByName(node, "alpha", null)),
    alphaNum: childrenByName(node, "alphaNum").map((child) =>
      extractAlphaNum(input, child)
    ),
  };
}
function extractInt(input: string, node: RuleTree): DLInt {
  return {
    type: "Int",
    text: textForSpan(input, node.span),
    span: node.span,
    first: extractNum(input, childByName(node, "num", "first")),
    num: childrenByName(node, "num").map((child) => extractNum(input, child)),
  };
}
function extractLoadKW(input: string, node: RuleTree): DLLoadKW {
  return {
    type: "LoadKW",
    text: textForSpan(input, node.span),
    span: node.span,
  };
}
function extractLoadStmt(input: string, node: RuleTree): DLLoadStmt {
  return {
    type: "LoadStmt",
    text: textForSpan(input, node.span),
    span: node.span,
    loadKW: extractLoadKW(input, childByName(node, "loadKW", null)),
    path: extractPath(input, childByName(node, "path", null)),
  };
}
function extractMain(input: string, node: RuleTree): DLMain {
  return {
    type: "Main",
    text: textForSpan(input, node.span),
    span: node.span,
    statement: childrenByName(node, "statement").map((child) =>
      extractStatement(input, child)
    ),
    comment: childrenByName(node, "comment").map((child) =>
      extractComment(input, child)
    ),
  };
}
function extractNegation(input: string, node: RuleTree): DLNegation {
  return {
    type: "Negation",
    text: textForSpan(input, node.span),
    span: node.span,
    record: extractRecord(input, childByName(node, "record", null)),
  };
}
function extractNum(input: string, node: RuleTree): DLNum {
  return {
    type: "Num",
    text: textForSpan(input, node.span),
    span: node.span,
  };
}
function extractPath(input: string, node: RuleTree): DLPath {
  return {
    type: "Path",
    text: textForSpan(input, node.span),
    span: node.span,
    pathSegment: childrenByName(node, "pathSegment").map((child) =>
      extractPathSegment(input, child)
    ),
  };
}
function extractPathSegment(input: string, node: RuleTree): DLPathSegment {
  return {
    type: "PathSegment",
    text: textForSpan(input, node.span),
    span: node.span,
  };
}
function extractPlaceholder(input: string, node: RuleTree): DLPlaceholder {
  return {
    type: "Placeholder",
    text: textForSpan(input, node.span),
    span: node.span,
  };
}
function extractQuery(input: string, node: RuleTree): DLQuery {
  return {
    type: "Query",
    text: textForSpan(input, node.span),
    span: node.span,
    record: extractRecord(input, childByName(node, "record", null)),
  };
}
function extractRecord(input: string, node: RuleTree): DLRecord {
  return {
    type: "Record",
    text: textForSpan(input, node.span),
    span: node.span,
    recordAttrs: extractRecordAttrs(
      input,
      childByName(node, "recordAttrs", null)
    ),
  };
}
function extractRecordAttrs(input: string, node: RuleTree): DLRecordAttrs {
  return {
    type: "RecordAttrs",
    text: textForSpan(input, node.span),
    span: node.span,
    recordKeyValue: childrenByName(node, "recordKeyValue").map((child) =>
      extractRecordKeyValue(input, child)
    ),
    placeholder: childrenByName(node, "placeholder").map((child) =>
      extractPlaceholder(input, child)
    ),
    commaSpace: childrenByName(node, "commaSpace").map((child) =>
      extractCommaSpace(input, child)
    ),
  };
}
function extractRecordCall(input: string, node: RuleTree): DLRecordCall {
  return {
    type: "RecordCall",
    text: textForSpan(input, node.span),
    span: node.span,
    ident: extractIdent(input, childByName(node, "ident", null)),
    record: extractRecord(input, childByName(node, "record", null)),
  };
}
function extractRecordKeyValue(
  input: string,
  node: RuleTree
): DLRecordKeyValue {
  return {
    type: "RecordKeyValue",
    text: textForSpan(input, node.span),
    span: node.span,
    ident: extractIdent(input, childByName(node, "ident", null)),
    scalarExpr: extractScalarExpr(input, childByName(node, "scalarExpr", null)),
  };
}
function extractRelationExpr(input: string, node: RuleTree): DLRelationExpr {
  const child = node.children[0];
  switch (child.name) {
    case "disjuncts": {
      return extractDisjuncts(input, child);
    }
    case "relationLiteral": {
      return extractRelationLiteral(input, child);
    }
    case "anonymousRelation": {
      return extractAnonymousRelation(input, child);
    }
    case "aggregation": {
      return extractAggregation(input, child);
    }
  }
}
function extractRelationLiteral(
  input: string,
  node: RuleTree
): DLRelationLiteral {
  return {
    type: "RelationLiteral",
    text: textForSpan(input, node.span),
    span: node.span,
    record: childrenByName(node, "record").map((child) =>
      extractRecord(input, child)
    ),
    commaSpace: childrenByName(node, "commaSpace").map((child) =>
      extractCommaSpace(input, child)
    ),
  };
}
function extractRule(input: string, node: RuleTree): DLRule {
  return {
    type: "Rule",
    text: textForSpan(input, node.span),
    span: node.span,
    ident: extractIdent(input, childByName(node, "ident", null)),
    relationExpr: extractRelationExpr(
      input,
      childByName(node, "relationExpr", null)
    ),
  };
}
function extractScalarExpr(input: string, node: RuleTree): DLScalarExpr {
  const child = node.children[0];
  switch (child.name) {
    case "record": {
      return extractRecord(input, child);
    }
    case "functionCall": {
      return extractFunctionCall(input, child);
    }
    case "int": {
      return extractInt(input, child);
    }
    case "var": {
      return extractVar(input, child);
    }
    case "string": {
      return extractString(input, child);
    }
    case "bool": {
      return extractBool(input, child);
    }
    case "array": {
      return extractArray(input, child);
    }
    case "dict": {
      return extractDict(input, child);
    }
    case "placeholder": {
      return extractPlaceholder(input, child);
    }
  }
}
function extractStatement(input: string, node: RuleTree): DLStatement {
  const child = node.children[0];
  switch (child.name) {
    case "rule": {
      return extractRule(input, child);
    }
    case "fact": {
      return extractFact(input, child);
    }
    case "query": {
      return extractQuery(input, child);
    }
    case "deleteFact": {
      return extractDeleteFact(input, child);
    }
    case "tableDecl": {
      return extractTableDecl(input, child);
    }
    case "loadStmt": {
      return extractLoadStmt(input, child);
    }
  }
}
function extractString(input: string, node: RuleTree): DLString {
  return {
    type: "String",
    text: textForSpan(input, node.span),
    span: node.span,
    stringChar: childrenByName(node, "stringChar").map((child) =>
      extractStringChar(input, child)
    ),
  };
}
function extractStringChar(input: string, node: RuleTree): DLStringChar {
  return {
    type: "StringChar",
    text: textForSpan(input, node.span),
    span: node.span,
  };
}
function extractTableDecl(input: string, node: RuleTree): DLTableDecl {
  return {
    type: "TableDecl",
    text: textForSpan(input, node.span),
    span: node.span,
    tableKW: extractTableKW(input, childByName(node, "tableKW", null)),
    name: extractIdent(input, childByName(node, "ident", "name")),
  };
}
function extractTableKW(input: string, node: RuleTree): DLTableKW {
  return {
    type: "TableKW",
    text: textForSpan(input, node.span),
    span: node.span,
  };
}
function extractVar(input: string, node: RuleTree): DLVar {
  return {
    type: "Var",
    text: textForSpan(input, node.span),
    span: node.span,
    alphaNum: childrenByName(node, "alphaNum").map((child) =>
      extractAlphaNum(input, child)
    ),
  };
}
const GRAMMAR: Grammar = {
  main: {
    type: "Sequence",
    items: [
      {
        type: "Ref",
        captureName: null,
        rule: "ws",
      },
      {
        type: "RepSep",
        rep: {
          type: "Choice",
          choices: [
            {
              type: "Ref",
              captureName: null,
              rule: "statement",
            },
            {
              type: "Ref",
              captureName: null,
              rule: "comment",
            },
          ],
        },
        sep: {
          type: "Ref",
          captureName: null,
          rule: "ws",
        },
      },
      {
        type: "Ref",
        captureName: null,
        rule: "ws",
      },
    ],
  },
  statement: {
    type: "Choice",
    choices: [
      {
        type: "Ref",
        captureName: null,
        rule: "rule",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "fact",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "query",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "deleteFact",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "tableDecl",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "loadStmt",
      },
    ],
  },
  comment: {
    type: "Sequence",
    items: [
      {
        type: "Text",
        value: "#",
      },
      {
        type: "RepSep",
        rep: {
          type: "Ref",
          captureName: null,
          rule: "commentChar",
        },
        sep: {
          type: "Text",
          value: "",
        },
      },
    ],
  },
  tableDecl: {
    type: "Sequence",
    items: [
      {
        type: "Ref",
        captureName: null,
        rule: "tableKW",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "ws",
      },
      {
        type: "Ref",
        captureName: "name",
        rule: "ident",
      },
    ],
  },
  loadStmt: {
    type: "Sequence",
    items: [
      {
        type: "Ref",
        captureName: null,
        rule: "loadKW",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "ws",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "path",
      },
    ],
  },
  query: {
    type: "Sequence",
    items: [
      {
        type: "Ref",
        captureName: null,
        rule: "record",
      },
      {
        type: "Text",
        value: "?",
      },
    ],
  },
  fact: {
    type: "Sequence",
    items: [
      {
        type: "Ref",
        captureName: null,
        rule: "record",
      },
      {
        type: "Text",
        value: ".",
      },
    ],
  },
  deleteFact: {
    type: "Sequence",
    items: [
      {
        type: "Text",
        value: "-",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "record",
      },
      {
        type: "Text",
        value: ".",
      },
    ],
  },
  rule: {
    type: "Sequence",
    items: [
      {
        type: "Ref",
        captureName: null,
        rule: "ident",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "ws",
      },
      {
        type: "Text",
        value: "=",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "ws",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "relationExpr",
      },
      {
        type: "Text",
        value: ".",
      },
    ],
  },
  relationExpr: {
    type: "Choice",
    choices: [
      {
        type: "Ref",
        captureName: null,
        rule: "disjuncts",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "relationLiteral",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "anonymousRelation",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "aggregation",
      },
    ],
  },
  disjuncts: {
    type: "RepSep",
    rep: {
      type: "Ref",
      captureName: null,
      rule: "disjunct",
    },
    sep: {
      type: "Sequence",
      items: [
        {
          type: "Ref",
          captureName: null,
          rule: "ws",
        },
        {
          type: "Text",
          value: "|",
        },
        {
          type: "Ref",
          captureName: null,
          rule: "ws",
        },
      ],
    },
  },
  disjunct: {
    type: "RepSep",
    rep: {
      type: "Ref",
      captureName: null,
      rule: "conjunct",
    },
    sep: {
      type: "Sequence",
      items: [
        {
          type: "Ref",
          captureName: null,
          rule: "ws",
        },
        {
          type: "Text",
          value: "&",
        },
        {
          type: "Ref",
          captureName: null,
          rule: "ws",
        },
      ],
    },
  },
  conjunct: {
    type: "Choice",
    choices: [
      {
        type: "Ref",
        captureName: null,
        rule: "recordCall",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "comparison",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "arithmetic",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "negation",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "placeholder",
      },
    ],
  },
  negation: {
    type: "Sequence",
    items: [
      {
        type: "Text",
        value: "!",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "record",
      },
    ],
  },
  aggregation: {
    type: "Sequence",
    items: [
      {
        type: "Ref",
        captureName: "aggregation",
        rule: "ident",
      },
      {
        type: "Text",
        value: "[",
      },
      {
        type: "RepSep",
        rep: {
          type: "Ref",
          captureName: null,
          rule: "var",
        },
        sep: {
          type: "Ref",
          captureName: null,
          rule: "commaSpace",
        },
      },
      {
        type: "Text",
        value: ":",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "ws",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "relationExpr",
      },
      {
        type: "Text",
        value: "]",
      },
    ],
  },
  relationLiteral: {
    type: "Sequence",
    items: [
      {
        type: "Text",
        value: "{",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "ws",
      },
      {
        type: "RepSep",
        rep: {
          type: "Ref",
          captureName: null,
          rule: "record",
        },
        sep: {
          type: "Ref",
          captureName: null,
          rule: "commaSpace",
        },
      },
      {
        type: "Ref",
        captureName: null,
        rule: "ws",
      },
      {
        type: "Text",
        value: "}",
      },
    ],
  },
  anonymousRelation: {
    type: "Sequence",
    items: [
      {
        type: "Ref",
        captureName: null,
        rule: "record",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "ws",
      },
      {
        type: "Text",
        value: "->",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "ws",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "relationExpr",
      },
    ],
  },
  recordCall: {
    type: "Sequence",
    items: [
      {
        type: "Ref",
        captureName: null,
        rule: "ident",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "record",
      },
    ],
  },
  functionCall: {
    type: "Sequence",
    items: [
      {
        type: "Ref",
        captureName: null,
        rule: "ident",
      },
      {
        type: "Text",
        value: "[",
      },
      {
        type: "RepSep",
        rep: {
          type: "Ref",
          captureName: null,
          rule: "recordAttrs",
        },
        sep: {
          type: "Ref",
          captureName: null,
          rule: "commaSpace",
        },
      },
      {
        type: "Text",
        value: "]",
      },
    ],
  },
  comparison: {
    type: "Sequence",
    items: [
      {
        type: "Ref",
        captureName: "left",
        rule: "scalarExpr",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "ws",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "comparisonOp",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "ws",
      },
      {
        type: "Ref",
        captureName: "right",
        rule: "scalarExpr",
      },
    ],
  },
  comparisonOp: {
    type: "Choice",
    choices: [
      {
        type: "Text",
        value: "<=",
      },
      {
        type: "Text",
        value: ">=",
      },
      {
        type: "Text",
        value: ">",
      },
      {
        type: "Text",
        value: "<",
      },
      {
        type: "Text",
        value: "=",
      },
      {
        type: "Text",
        value: "!=",
      },
    ],
  },
  arithmetic: {
    type: "Choice",
    choices: [
      {
        type: "Ref",
        captureName: null,
        rule: "assignmentOnLeft",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "assignmentOnRight",
      },
    ],
  },
  assignmentOnRight: {
    type: "Sequence",
    items: [
      {
        type: "Ref",
        captureName: "left",
        rule: "scalarExpr",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "ws",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "arithmeticOp",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "ws",
      },
      {
        type: "Ref",
        captureName: "right",
        rule: "scalarExpr",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "ws",
      },
      {
        type: "Text",
        value: "=",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "ws",
      },
      {
        type: "Ref",
        captureName: "result",
        rule: "scalarExpr",
      },
    ],
  },
  assignmentOnLeft: {
    type: "Sequence",
    items: [
      {
        type: "Ref",
        captureName: "result",
        rule: "scalarExpr",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "ws",
      },
      {
        type: "Text",
        value: "=",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "ws",
      },
      {
        type: "Ref",
        captureName: "left",
        rule: "scalarExpr",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "ws",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "arithmeticOp",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "ws",
      },
      {
        type: "Ref",
        captureName: "right",
        rule: "scalarExpr",
      },
    ],
  },
  arithmeticOp: {
    type: "Choice",
    choices: [
      {
        type: "Text",
        value: "+",
      },
      {
        type: "Text",
        value: "*",
      },
      {
        type: "Text",
        value: "-",
      },
    ],
  },
  scalarExpr: {
    type: "Choice",
    choices: [
      {
        type: "Ref",
        captureName: null,
        rule: "record",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "functionCall",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "int",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "var",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "string",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "bool",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "array",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "dict",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "placeholder",
      },
    ],
  },
  var: {
    type: "Sequence",
    items: [
      {
        type: "Char",
        rule: {
          type: "Range",
          from: "A",
          to: "Z",
        },
      },
      {
        type: "RepSep",
        rep: {
          type: "Choice",
          choices: [
            {
              type: "Char",
              rule: {
                type: "Range",
                from: "A",
                to: "Z",
              },
            },
            {
              type: "Ref",
              captureName: null,
              rule: "alphaNum",
            },
          ],
        },
        sep: {
          type: "Text",
          value: "",
        },
      },
    ],
  },
  record: {
    type: "Sequence",
    items: [
      {
        type: "Text",
        value: "{",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "ws",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "recordAttrs",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "ws",
      },
      {
        type: "Text",
        value: "}",
      },
    ],
  },
  dict: {
    type: "Sequence",
    items: [
      {
        type: "Text",
        value: "{",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "ws",
      },
      {
        type: "RepSep",
        rep: {
          type: "Ref",
          captureName: null,
          rule: "dictKeyValue",
        },
        sep: {
          type: "Ref",
          captureName: null,
          rule: "commaSpace",
        },
      },
      {
        type: "Ref",
        captureName: null,
        rule: "ws",
      },
      {
        type: "Text",
        value: "}",
      },
    ],
  },
  dictKeyValue: {
    type: "Sequence",
    items: [
      {
        type: "Ref",
        captureName: "key",
        rule: "string",
      },
      {
        type: "Text",
        value: ":",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "ws",
      },
      {
        type: "Ref",
        captureName: "value",
        rule: "scalarExpr",
      },
    ],
  },
  recordAttrs: {
    type: "RepSep",
    rep: {
      type: "Choice",
      choices: [
        {
          type: "Ref",
          captureName: null,
          rule: "recordKeyValue",
        },
        {
          type: "Ref",
          captureName: null,
          rule: "placeholder",
        },
      ],
    },
    sep: {
      type: "Ref",
      captureName: null,
      rule: "commaSpace",
    },
  },
  recordKeyValue: {
    type: "Sequence",
    items: [
      {
        type: "Ref",
        captureName: null,
        rule: "ident",
      },
      {
        type: "Text",
        value: ":",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "ws",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "scalarExpr",
      },
    ],
  },
  int: {
    type: "Sequence",
    items: [
      {
        type: "Choice",
        choices: [
          {
            type: "Text",
            value: "-",
          },
          {
            type: "Text",
            value: "",
          },
        ],
      },
      {
        type: "Ref",
        captureName: "first",
        rule: "num",
      },
      {
        type: "RepSep",
        rep: {
          type: "Ref",
          captureName: null,
          rule: "num",
        },
        sep: {
          type: "Text",
          value: "",
        },
      },
    ],
  },
  bool: {
    type: "Choice",
    choices: [
      {
        type: "Text",
        value: "true",
      },
      {
        type: "Text",
        value: "false",
      },
    ],
  },
  array: {
    type: "Sequence",
    items: [
      {
        type: "Text",
        value: "[",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "ws",
      },
      {
        type: "RepSep",
        rep: {
          type: "Ref",
          captureName: null,
          rule: "scalarExpr",
        },
        sep: {
          type: "Ref",
          captureName: null,
          rule: "commaSpace",
        },
      },
      {
        type: "Ref",
        captureName: null,
        rule: "ws",
      },
      {
        type: "Text",
        value: "]",
      },
    ],
  },
  tableKW: {
    type: "Text",
    value: ".table",
  },
  loadKW: {
    type: "Text",
    value: ".load",
  },
  ident: {
    type: "Sequence",
    items: [
      {
        type: "Ref",
        captureName: null,
        rule: "alpha",
      },
      {
        type: "RepSep",
        rep: {
          type: "Choice",
          choices: [
            {
              type: "Ref",
              captureName: null,
              rule: "alphaNum",
            },
            {
              type: "Text",
              value: ".",
            },
          ],
        },
        sep: {
          type: "Text",
          value: "",
        },
      },
    ],
  },
  string: {
    type: "Sequence",
    items: [
      {
        type: "Text",
        value: '"',
      },
      {
        type: "RepSep",
        rep: {
          type: "Ref",
          captureName: null,
          rule: "stringChar",
        },
        sep: {
          type: "Text",
          value: "",
        },
      },
      {
        type: "Text",
        value: '"',
      },
    ],
  },
  stringChar: {
    type: "Choice",
    choices: [
      {
        type: "Char",
        rule: {
          type: "Not",
          rule: {
            type: "Literal",
            value: '"',
          },
        },
      },
      {
        type: "Sequence",
        items: [
          {
            type: "Char",
            rule: {
              type: "Literal",
              value: "\\",
            },
          },
          {
            type: "Char",
            rule: {
              type: "Literal",
              value: '"',
            },
          },
        ],
      },
    ],
  },
  alpha: {
    type: "Choice",
    choices: [
      {
        type: "Char",
        rule: {
          type: "Range",
          from: "a",
          to: "z",
        },
      },
      {
        type: "Char",
        rule: {
          type: "Range",
          from: "A",
          to: "Z",
        },
      },
      {
        type: "Text",
        value: "_",
      },
    ],
  },
  num: {
    type: "Char",
    rule: {
      type: "Range",
      from: "0",
      to: "9",
    },
  },
  alphaNum: {
    type: "Choice",
    choices: [
      {
        type: "Ref",
        captureName: null,
        rule: "alpha",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "num",
      },
    ],
  },
  ws: {
    type: "RepSep",
    rep: {
      type: "Choice",
      choices: [
        {
          type: "Text",
          value: " ",
        },
        {
          type: "Text",
          value: "\n",
        },
      ],
    },
    sep: {
      type: "Text",
      value: "",
    },
  },
  placeholder: {
    type: "Text",
    value: "???",
  },
  commaSpace: {
    type: "Sequence",
    items: [
      {
        type: "Text",
        value: ",",
      },
      {
        type: "Ref",
        captureName: null,
        rule: "ws",
      },
    ],
  },
  path: {
    type: "RepSep",
    rep: {
      type: "Ref",
      captureName: null,
      rule: "pathSegment",
    },
    sep: {
      type: "Text",
      value: "/",
    },
  },
  pathSegment: {
    type: "RepSep",
    rep: {
      type: "Choice",
      choices: [
        {
          type: "Char",
          rule: {
            type: "Range",
            from: "a",
            to: "z",
          },
        },
        {
          type: "Char",
          rule: {
            type: "Range",
            from: "A",
            to: "Z",
          },
        },
        {
          type: "Char",
          rule: {
            type: "Range",
            from: "0",
            to: "9",
          },
        },
        {
          type: "Char",
          rule: {
            type: "Literal",
            value: "_",
          },
        },
        {
          type: "Char",
          rule: {
            type: "Literal",
            value: "-",
          },
        },
        {
          type: "Char",
          rule: {
            type: "Literal",
            value: ".",
          },
        },
      ],
    },
    sep: {
      type: "Text",
      value: "",
    },
  },
  commentChar: {
    type: "Char",
    rule: {
      type: "Not",
      rule: {
        type: "Literal",
        value: "\n",
      },
    },
  },
};
