main :- expr.
expr :- (intLit | funcCall).
intLit :- [0-9].
funcCall :- [ident, "(", expr, ")"].
ident :- "foo".
----
application/graphviz
digraph G {
  "0" [fillcolor="moccasin" label="0: Union []" shape="box" style="filled"];
  "1" [fillcolor="darkseagreen2" label="1: Match(expr_choice_0{span: span{from: P1, to: P2}}; {}) []" shape="box" style="filled"];
  "2" [fillcolor="darkseagreen2" label="2: Match(expr_choice_1{span: span{from: P1, to: P2}}; {}) []" shape="box" style="filled"];
  "3" [fillcolor="darkseagreen2" label="3: Match(intLit{span: span{from: P1, to: P2}}; {}) []" shape="box" style="filled"];
  "4" [fillcolor="darkseagreen2" label="4: Match(funcCall{span: span{from: P1, to: P2}}; {}) []" shape="box" style="filled"];
  "5" [fillcolor="darkseagreen2" label="5: Match(funcCall_seq_0{span: span{from: P0, to: P1}}; {}) [P1]" shape="box" style="filled"];
  "6" [fillcolor="darkseagreen2" label="6: Match(funcCall_seq_1{span: span{from: P1, to: P2}}; {}) [P1]" shape="box" style="filled"];
  "7" [fillcolor="thistle" label="7: Join(P1) [P2]" shape="box" style="filled"];
  "8" [fillcolor="darkseagreen2" label="8: Match(funcCall_seq_2{span: span{from: P2, to: P3}}; {}) [P2]" shape="box" style="filled"];
  "9" [fillcolor="thistle" label="9: Join(P2) [P3]" shape="box" style="filled"];
  "10" [fillcolor="darkseagreen2" label="10: Match(funcCall_seq_3{span: span{from: P3, to: P4}}; {}) [P3]" shape="box" style="filled"];
  "11" [fillcolor="thistle" label="11: Join(P3) []" shape="box" style="filled"];
  "12" [fillcolor="darkseagreen2" label="12: Match(ident{span: span{from: P1, to: P2}}; {}) []" shape="box" style="filled"];
  "13" [fillcolor="darkseagreen2" label="13: Match(source{char: \"(\", id: P1}; {}) [P1]" shape="box" style="filled"];
  "14" [fillcolor="darkseagreen2" label="14: Match(next{left: P1, right: P2}; {}) [P1]" shape="box" style="filled"];
  "15" [fillcolor="thistle" label="15: Join(P1) []" shape="box" style="filled"];
  "16" [fillcolor="darkseagreen2" label="16: Match(expr{span: span{from: P1, to: P2}}; {}) []" shape="box" style="filled"];
  "17" [fillcolor="darkseagreen2" label="17: Match(source{char: \")\", id: P1}; {}) [P1]" shape="box" style="filled"];
  "18" [fillcolor="darkseagreen2" label="18: Match(next{left: P1, right: P2}; {}) [P1]" shape="box" style="filled"];
  "19" [fillcolor="thistle" label="19: Join(P1) []" shape="box" style="filled"];
  "20" [fillcolor="darkseagreen2" label="20: Match(source{char: \"f\", id: P1}; {}) [P1]" shape="box" style="filled"];
  "21" [fillcolor="darkseagreen2" label="21: Match(next{left: P1, right: P2}; {}) [P1]" shape="box" style="filled"];
  "22" [fillcolor="thistle" label="22: Join(P1) [P2]" shape="box" style="filled"];
  "23" [fillcolor="darkseagreen2" label="23: Match(source{char: \"o\", id: P2}; {}) [P2]" shape="box" style="filled"];
  "24" [fillcolor="thistle" label="24: Join(P2) [P2]" shape="box" style="filled"];
  "25" [fillcolor="darkseagreen2" label="25: Match(next{left: P2, right: P3}; {}) [P2]" shape="box" style="filled"];
  "26" [fillcolor="thistle" label="26: Join(P2) [P3]" shape="box" style="filled"];
  "27" [fillcolor="darkseagreen2" label="27: Match(source{char: \"o\", id: P3}; {}) [P3]" shape="box" style="filled"];
  "28" [fillcolor="thistle" label="28: Join(P3) [P3]" shape="box" style="filled"];
  "29" [fillcolor="darkseagreen2" label="29: Match(next{left: P3, right: P4}; {}) [P3]" shape="box" style="filled"];
  "30" [fillcolor="thistle" label="30: Join(P3) []" shape="box" style="filled"];
  "31" [fillcolor="darkseagreen2" label="31: Match(source{char: C, id: P1}; {}) []" shape="box" style="filled"];
  "32" [fillcolor="darkseagreen1" label="32: \"0\" <= C []" shape="box" style="filled"];
  "33" [fillcolor="darkseagreen1" label="33: C <= \"9\" []" shape="box" style="filled"];
  "34" [fillcolor="darkseagreen2" label="34: Match(expr{span: span{from: P1, to: P2}}; {}) []" shape="box" style="filled"];
  "source" [fillcolor="darksalmon" label="source:  []" shape="box" style="filled"];
  "next" [fillcolor="darksalmon" label="next:  []" shape="box" style="filled"];
  "expr" [fillcolor="lightblue" label="expr: Subst({span: span{from: P1, to: P2}}) []" shape="box" style="filled"];
  "expr_choice_0" [fillcolor="lightblue" label="expr_choice_0: Subst({span: span{from: P1, to: P2}}) []" shape="box" style="filled"];
  "expr_choice_1" [fillcolor="lightblue" label="expr_choice_1: Subst({span: span{from: P1, to: P2}}) []" shape="box" style="filled"];
  "funcCall" [fillcolor="lightblue" label="funcCall: Subst({seq_0: span{from: P0, to: P1}, seq_1: span{from: P1, to: P2}, seq_2: span{from: P2, to: P3}, seq_3: span{from: P3, to: P4}, span: span{from: P1, to: P4}}) []" shape="box" style="filled"];
  "funcCall_seq_0" [fillcolor="lightblue" label="funcCall_seq_0: Subst({span: span{from: P1, to: P2}}) []" shape="box" style="filled"];
  "funcCall_seq_1" [fillcolor="lightblue" label="funcCall_seq_1: Subst({span: span{from: P1, to: P2}}) []" shape="box" style="filled"];
  "funcCall_seq_2" [fillcolor="lightblue" label="funcCall_seq_2: Subst({span: span{from: P1, to: P2}}) []" shape="box" style="filled"];
  "funcCall_seq_3" [fillcolor="lightblue" label="funcCall_seq_3: Subst({span: span{from: P1, to: P2}}) []" shape="box" style="filled"];
  "ident" [fillcolor="lightblue" label="ident: Subst({span: span{from: P1, to: P4}}) []" shape="box" style="filled"];
  "intLit" [fillcolor="lightblue" label="intLit: Subst({span: span{from: P1, to: P1}}) []" shape="box" style="filled"];
  "main" [fillcolor="lightblue" label="main: Subst({span: span{from: P1, to: P2}}) []" shape="box" style="filled"];
  "0" -> "expr" [];
  "1" -> "0" [];
  "10" -> "11" [];
  "11" -> "funcCall" [];
  "12" -> "funcCall_seq_0" [];
  "13" -> "15" [];
  "14" -> "15" [];
  "15" -> "funcCall_seq_1" [];
  "16" -> "funcCall_seq_2" [];
  "17" -> "19" [];
  "18" -> "19" [];
  "19" -> "funcCall_seq_3" [];
  "2" -> "0" [];
  "20" -> "22" [];
  "21" -> "22" [];
  "22" -> "24" [];
  "23" -> "24" [];
  "24" -> "26" [];
  "25" -> "26" [];
  "26" -> "28" [];
  "27" -> "28" [];
  "28" -> "30" [];
  "29" -> "30" [];
  "3" -> "expr_choice_0" [];
  "30" -> "ident" [];
  "31" -> "32" [];
  "32" -> "33" [];
  "33" -> "intLit" [];
  "34" -> "main" [];
  "4" -> "expr_choice_1" [];
  "5" -> "7" [];
  "6" -> "7" [];
  "7" -> "9" [];
  "8" -> "9" [];
  "9" -> "11" [];
  "expr" -> "16" [];
  "expr" -> "34" [];
  "expr_choice_0" -> "1" [];
  "expr_choice_1" -> "2" [];
  "funcCall" -> "4" [];
  "funcCall_seq_0" -> "5" [];
  "funcCall_seq_1" -> "6" [];
  "funcCall_seq_2" -> "8" [];
  "funcCall_seq_3" -> "10" [];
  "ident" -> "12" [];
  "intLit" -> "3" [];
  "next" -> "14" [];
  "next" -> "18" [];
  "next" -> "21" [];
  "next" -> "25" [];
  "next" -> "29" [];
  "source" -> "13" [];
  "source" -> "17" [];
  "source" -> "20" [];
  "source" -> "23" [];
  "source" -> "27" [];
  "source" -> "31" [];
}
