.table lang.Builtin

tc.Type{id: I, type: T} :-
  tc.typeI{id: I, type: T} |
  tc.typeFC{id: I, type: T} |
  tc.typeVar{id: I, type: T}.

tc.typeI{id: I, type: "int"} :-
  ast.IntLit{id: I}.
tc.typeVar{id: I, type: T} :-
  ast.Var{id: I, name: N} &
  tc.ScopeItem{id: I, name: N, type: T}.
tc.typeFC{id: I, type: T} :-
  ast.FuncCall{id: I, funcID: FID, argID: AID} &
  tc.Type{id: FID, type: tapp{from: F, to: T}} &
  tc.Type{id: AID, type: F}.

tc.ScopeItem{id: I, name: N, type: T, location: L} :-
  tc.scopeBuiltin{id: I, name: N, type: T, location: L}.

tc.scopeBuiltin{id: I, name: N, type: T, location: "builtin"} :-
  lang.Builtin{name: N, type: T}.

# tc.parentScope{id: I, parentID: P} :-
#   ast.LetExpr{bodyID: I, id: P} |
#   ast.LetExpr{bindingID: I, id: P} |
#   ast.FuncCall{argID: I, id: P} |
#   ast.FuncCall{funcID: I, id: P} |
#   ast.Lambda{body: I, id: P}.
