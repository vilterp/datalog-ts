.table lang.Builtin

tc.Type{id: I, type: T} :-
  tc.typeS{id: I, type: T} |
  tc.typeI{id: I, type: T} |
  tc.typeLambda{id: I, type: T} |
  tc.typeFC{id: I, type: T} |
  tc.typeLet{id: I, type: T} |
  tc.typeVar{id: I, type: T} |
  tc.typePlaceholder{id: I, type: T}.

tc.typeS{id: I, type: "string"} :-
  ast.StringLit{id: I}.
tc.typeI{id: I, type: "int"} :-
  ast.IntLit{id: I}.
tc.typeFC{id: I, type: T} :-
  ast.FuncCall{id: I, funcID: FID, argID: AID} &
  tc.Type{id: FID, type: tapp{from: F, to: T}} &
  tc.Type{id: AID, type: F}.
tc.typeLet{id: I, type: T} :-
  ast.LetExpr{id: I, bodyID: BID} &
  tc.Type{id: BID, type: T}.
tc.typeVar{id: I, type: T} :-
  ast.Var{id: I, name: N} &
  tc.ScopeItem{id: I, name: N, type: T}.
# TODO: get this to work for multiple parameters...
tc.typeLambda{id: I, type: tapp{from: F, to: R}} :-
  ast.Lambda{id: I, retType: R, body: B} &
  ast.LambdaParam{lambdaID: I, ty: F} &
  tc.Type{id: B, type: R}.
tc.typePlaceholder{id: I, type: "unknown"} :-
  ast.Placeholder{id: I}.

tc.ScopeItem{id: I, name: N, type: T, location: L} :-
  tc.scopeBuiltin{id: I, name: N, type: T, location: L} |
  tc.scopeLet{id: I, name: N, type: T, location: L} |
  tc.scopeLambda{id: I, name: N, type: T, location: L} |
  tc.parentScope{id: I, parentID: P} & tc.ScopeItem{id: P, name: N, type: T, location: L}.

tc.scopeBuiltin{id: I, name: N, type: T, location: "builtin"} :-
  ast.RootExpr{id: I} & lang.Builtin{name: N, type: T}.
tc.scopeLet{id: I, name: N, type: T, location: L} :-
  ast.LetExpr{bodyID: I, varName: N, bindingID: B, varLoc: L} &
  tc.Type{id: B, type: T}.
tc.scopeLambda{id: I, name: N, type: T, location: L} :-
  ast.Lambda{body: I, id: LID} &
  ast.LambdaParam{lambdaID: LID, name: N, ty: T, location: L}.

tc.parentScope{id: I, parentID: P} :-
  ast.LetExpr{bodyID: I, id: P} |
  ast.LetExpr{bindingID: I, id: P} |
  ast.FuncCall{argID: I, id: P} |
  ast.FuncCall{funcID: I, id: P} |
  ast.Lambda{body: I, id: P}.
