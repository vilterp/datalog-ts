2
----
type{id: 0, type: T[type[]]@"int"}; {T: T}
  type_i{id: I[type[], type[]]@0, type: T[type[], type[]]@"int"}; {I: I}
    int_lit{id: I[type[], type[], type_i[or(1), and(0)]]@0, location: span{from: pos{idx: I[type[], type[], type_i[or(1), and(0)]]@0}, to: pos{idx: 1}}, val: 2}

let x = 2 in x
----
type{id: 0, type: T[type[]]@"int"}; {T: T}
  type_let{id: I[type[], type[]]@0, type: T[type[], type[]]@"int"}; {I: I, T: T}
    let_expr{bindingID: 1, bodyID: BID[type[], type[], type_let[or(4), and(0)]]@2, id: I[type[], type[], type_let[or(4), and(0)]]@0, location: span{from: pos{idx: I[type[], type[], type_let[or(4), and(0)]]@0}, to: pos{idx: 14}}, varName: "x"}
    type{id: BID[type[], type[], type_let[or(4), and(0)]]@2, type: T[type[], type[], type_let[or(4), and(0)]]@"int"}; {I: BID, T: T}
      type_var{id: I[type[], type[], type_let[or(4), and(0)], type[or(0), and(1), and(0)]]@2, type: T[type[], type[], type_let[or(4), and(0)], type[or(0), and(1), and(0)]]@"int"}; {I: I, T: T}
        var{id: I[type[], type[], type_let[or(4), and(0)], type[or(0), and(1), and(0)], type_var[or(5), and(0)]]@2, location: span{from: pos{idx: 13}, to: pos{idx: 14}}, name: N[type[], type[], type_let[or(4), and(0)], type[or(0), and(1), and(0)], type_var[or(5), and(0)]]@"x"}
        scope_item{id: I[type[], type[], type_let[or(4), and(0)], type[or(0), and(1), and(0)], type_var[or(5), and(0)]]@2, name: N[type[], type[], type_let[or(4), and(0)], type[or(0), and(1), and(0)], type_var[or(5), and(0)]]@"x", type: T[type[], type[], type_let[or(4), and(0)], type[or(0), and(1), and(0)], type_var[or(5), and(0)]]@"int"}; {I: I, N: N, T: T}
          scope_let{id: I[type[], type[], type_let[or(4), and(0)], type[or(0), and(1), and(0)], type_var[or(5), and(0)], scope_item[or(0), and(1), and(0)]]@2, name: N[type[], type[], type_let[or(4), and(0)], type[or(0), and(1), and(0)], type_var[or(5), and(0)], scope_item[or(0), and(1), and(0)]]@"x", type: T[type[], type[], type_let[or(4), and(0)], type[or(0), and(1), and(0)], type_var[or(5), and(0)], scope_item[or(0), and(1), and(0)]]@"int"}; {I: I, N: N, T: T}
            let_expr{bindingID: B[type[], type[], type_let[or(4), and(0)], type[or(0), and(1), and(0)], type_var[or(5), and(0)], scope_item[or(0), and(1), and(0)], scope_let[or(1), and(0)]]@1, bodyID: I[type[], type[], type_let[or(4), and(0)], type[or(0), and(1), and(0)], type_var[or(5), and(0)], scope_item[or(0), and(1), and(0)], scope_let[or(1), and(0)]]@2, id: 0, location: span{from: pos{idx: 0}, to: pos{idx: 14}}, varName: N[type[], type[], type_let[or(4), and(0)], type[or(0), and(1), and(0)], type_var[or(5), and(0)], scope_item[or(0), and(1), and(0)], scope_let[or(1), and(0)]]@"x"}
            type{id: B[type[], type[], type_let[or(4), and(0)], type[or(0), and(1), and(0)], type_var[or(5), and(0)], scope_item[or(0), and(1), and(0)], scope_let[or(1), and(0)]]@1, type: T[type[], type[], type_let[or(4), and(0)], type[or(0), and(1), and(0)], type_var[or(5), and(0)], scope_item[or(0), and(1), and(0)], scope_let[or(1), and(0)]]@"int"}; {I: B, T: T}
              type_i{id: I[type[], type[], type_let[or(4), and(0)], type[or(0), and(1), and(0)], type_var[or(5), and(0)], scope_item[or(0), and(1), and(0)], scope_let[or(1), and(0)], type[or(0), and(1), and(0)]]@1, type: T[type[], type[], type_let[or(4), and(0)], type[or(0), and(1), and(0)], type_var[or(5), and(0)], scope_item[or(0), and(1), and(0)], scope_let[or(1), and(0)], type[or(0), and(1), and(0)]]@"int"}; {I: I}
                int_lit{id: I[type[], type[], type_let[or(4), and(0)], type[or(0), and(1), and(0)], type_var[or(5), and(0)], scope_item[or(0), and(1), and(0)], scope_let[or(1), and(0)], type[or(0), and(1), and(0)], type_i[or(1), and(0)]]@1, location: span{from: pos{idx: 8}, to: pos{idx: 9}}, val: 2}
