map((x: int): int => plus(x, 2), ???)
----
ast.RootExpr{id: 0}.
ast.FuncCall{argID: 10, funcID: 1, id: 0, location: span{from: 0, to: 37}}.
ast.FuncCall{argID: 3, funcID: 2, id: 1, location: span{from: 0, to: 3}}.
ast.Var{id: 2, location: span{from: 0, to: 3}, name: "map"}.
ast.Lambda{body: 4, id: 3, location: span{from: 4, to: 31}, numParams: 1, retType: "int", retTypeLoc: span{from: 14, to: 17}}.
ast.FuncCall{argID: 8, funcID: 5, id: 4, location: span{from: 21, to: 31}}.
ast.FuncCall{argID: 7, funcID: 6, id: 5, location: span{from: 21, to: 25}}.
ast.Var{id: 6, location: span{from: 21, to: 25}, name: "plus"}.
ast.Var{id: 7, location: span{from: 26, to: 27}, name: "x"}.
ast.IntLit{id: 8, location: span{from: 29, to: 30}, val: 2}.
ast.LambdaParam{idx: 0, lambdaID: 3, location: span{from: 5, to: 6}, name: "x", ty: "int", typeLoc: span{from: 8, to: 11}}.
ast.Placeholder{id: 10, location: span{from: 33, to: 36}}.

let x = map((x: int): int => plus(x, 2), ???) in filter(isEven, x)
----
ast.RootExpr{id: 0}.
ast.LetExpr{bindingID: 1, bodyID: 12, id: 0, inLoc: span{from: 46, to: 49}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 66}, varLoc: span{from: 4, to: 5}, varName: "x"}.
ast.FuncCall{argID: 11, funcID: 2, id: 1, location: span{from: 8, to: 46}}.
ast.FuncCall{argID: 4, funcID: 3, id: 2, location: span{from: 8, to: 11}}.
ast.Var{id: 3, location: span{from: 8, to: 11}, name: "map"}.
ast.Lambda{body: 5, id: 4, location: span{from: 12, to: 39}, numParams: 1, retType: "int", retTypeLoc: span{from: 22, to: 25}}.
ast.FuncCall{argID: 9, funcID: 6, id: 5, location: span{from: 29, to: 39}}.
ast.FuncCall{argID: 8, funcID: 7, id: 6, location: span{from: 29, to: 33}}.
ast.Var{id: 7, location: span{from: 29, to: 33}, name: "plus"}.
ast.Var{id: 8, location: span{from: 34, to: 35}, name: "x"}.
ast.IntLit{id: 9, location: span{from: 37, to: 38}, val: 2}.
ast.LambdaParam{idx: 0, lambdaID: 4, location: span{from: 13, to: 14}, name: "x", ty: "int", typeLoc: span{from: 16, to: 19}}.
ast.Placeholder{id: 11, location: span{from: 41, to: 44}}.
ast.FuncCall{argID: 16, funcID: 13, id: 12, location: span{from: 49, to: 66}}.
ast.FuncCall{argID: 15, funcID: 14, id: 13, location: span{from: 49, to: 55}}.
ast.Var{id: 14, location: span{from: 49, to: 55}, name: "filter"}.
ast.Var{id: 15, location: span{from: 56, to: 62}, name: "isEven"}.
ast.Var{id: 16, location: span{from: 64, to: 65}, name: "x"}.

"foo"
----
ast.RootExpr{id: 0}.
ast.StringLit{id: 0, location: span{from: 0, to: 5}, val: "foo"}.

2
----
ast.RootExpr{id: 0}.
ast.IntLit{id: 0, location: span{from: 0, to: 1}, val: 2}.

let x = 2 in ???
----
ast.RootExpr{id: 0}.
ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 16}, varLoc: span{from: 4, to: 5}, varName: "x"}.
ast.IntLit{id: 1, location: span{from: 8, to: 9}, val: 2}.
ast.Placeholder{id: 2, location: span{from: 13, to: 16}}.

int2string(2)
----
ast.RootExpr{id: 0}.
ast.FuncCall{argID: 2, funcID: 1, id: 0, location: span{from: 0, to: 13}}.
ast.Var{id: 1, location: span{from: 0, to: 10}, name: "int2string"}.
ast.IntLit{id: 2, location: span{from: 11, to: 12}, val: 2}.

let x = 2 in
int2string(x)
----
ast.RootExpr{id: 0}.
ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 26}, varLoc: span{from: 4, to: 5}, varName: "x"}.
ast.IntLit{id: 1, location: span{from: 8, to: 9}, val: 2}.
ast.FuncCall{argID: 4, funcID: 3, id: 2, location: span{from: 13, to: 26}}.
ast.Var{id: 3, location: span{from: 13, to: 23}, name: "int2string"}.
ast.Var{id: 4, location: span{from: 24, to: 25}, name: "x"}.

let x = 2 in x
----
ast.RootExpr{id: 0}.
ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 14}, varLoc: span{from: 4, to: 5}, varName: "x"}.
ast.IntLit{id: 1, location: span{from: 8, to: 9}, val: 2}.
ast.Var{id: 2, location: span{from: 13, to: 14}, name: "x"}.
