# === scenario ===

.table source
.table sink
.table battery
.table connection
.table internal.visualization

source{id: 1}.
source{id: 4}.
battery{id: 2, capacity: 100, initialLevel: 50, pos: pos{x: 170, y: 250}}.
sink{id: 3, demand: 15, pos: pos{x: 170, y: 450}}.
connection{from: 1, to: 2}.
connection{from: 2, to: 3}.
connection{from: 4, to: 2}.

# === rules ===

current{id: I, time: T, level: L} :-
  currentAtSource{id: I, time: T, level: L} |
  currentAtSink{id: I, time: T, level: L}.

currentAtSource{id: I, time: T, level: Clamped} :-
  time{time: T} &
  source{id: I} &
  Clamped = T * 10.
currentAtSink{id: I, time: T, level: ShiftedL} :-
  time{time: T} &
  sink{id: I} &
  ShiftedL = T * 10.

batteryLevel{id: I, time: T, level: L} :-
  batteryLevelInitial{id: I, time: T, level: L} |
  batteryLevelStep{id: I, time: T, level: L}.
batteryLevelInitial{id: I, time: 1, level: L} :-
  battery{id: I, initialLevel: L}.
# # TODO: flexible discharge rate
# # TODO: look at demand
batteryLevelStep{id: I, time: T, level: NextLevel} :-
  battery{id: I, capacity: Capacity} &
  time{time: PrevT} &
  PrevT + 1 = T &
  batteryLevel{id: I, time: PrevT, level: PrevLevel} &
  batteryLevelDelta{id: I, time: T, delta: InputCurrent} &
  PrevLevel + InputCurrent = NotClamped &
  clamp{min: 0, max: Capacity, val: NotClamped, res: NextLevel}.

batteryLevelDelta{id: B, time: T, delta: Delta} :-
  batteryInputCurrent{id: B, time: T, current: Input} &
  batteryOutputCurrent{id: B, time: T, current: PosOutput} &
  invert{a: PosOutput, res: Output} &
  Input + Output = Delta.
batteryInputCurrentFrom{id: B, time: T, current: L, from: S} :-
  time{time: T} &
  battery{id: B} &
  source{id: S} &
  connection{from: S, to: B} &
  currentAtSource{id: S, time: T, level: L}.
batteryInputCurrent{id: B, time: T, current: C} :-
  sum[B, T, C: batteryInputCurrentFrom{id: B, time: T, current: C}].
batteryOutputCurrent{id: B, time: T, current: L} :-
  time{time: T} &
  battery{id: B} &
  sink{id: S} &
  connection{from: B, to: S} &
  currentAtSink{id: S, time: T, level: L}.

time{time: T} :-
  range{from: 1, to: 5, val: T}.
