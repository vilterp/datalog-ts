.table ide.Cursor

# type-directed autocomplete suggestions
ide.Suggestion{id: I, name: N, type: T, typeMatch: M} :-
  ide.suggestionVar{id: I, name: N, type: T, typeMatch: M} |
  ide.suggestionFunc{id: I, name: N, type: T, typeMatch: M} |
  ide.suggestionScope{id: I, name: N, type: T, typeMatch: M}.

ide.suggestionVar{id: I, name: N, type: T, typeMatch: true} :-
  ast.Placeholder{id: I} &
  ide.expectedType{id: I, type: T} &
  tc.ScopeItem{id: I, type: T, name: N}.
ide.suggestionFunc{id: I, name: N, type: tapp{from: TF, to: TT}, typeMatch: true} :-
  ast.Placeholder{id: I} &
  ide.expectedType{id: I, type: TT} &
  tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}.
ide.suggestionScope{id: I, name: N, type: T, typeMatch: false} :-
  ast.Placeholder{id: I} &
  tc.ScopeItem{id: I, name: N, type: T}.

ide.expectedType{id: I, type: T} :-
  ast.Lambda{retType: T, body: I} |
  ast.LetExpr{id: L, bodyID: I} & ide.expectedType{id: L, type: T} |
  ast.FuncCall{argID: I, funcID: F} & tc.Type{id: F, type: tapp{from: T}} |
  ide.expectedTypeBinding{id: I, type: T}.
ide.expectedTypeBinding{id: I, type: T} :-
  ast.LetExpr{varLoc: VL, bindingID: I} &
  ide.Usage{definitionLoc: VL, usageLoc: UL} &
  ast.Expr{id: UI, location: UL} &
  ide.expectedType{id: UI, type: T}.

ide.Usage{definitionLoc: DL, usageLoc: UL, name: N} :-
  ast.Var{id: I, name: N, location: UL} &
  tc.ScopeItem{id: I, name: N, location: DL}.

# cursor-dependent rules
ide.CurrentPlaceholder{id: I, span: span{from: FIdx, to: TIdx}} :-
  ast.Placeholder{id: I, location: span{from: FIdx, to: TIdx}} &
  ide.Cursor{idx: CIdx} &
  FIdx <= CIdx & CIdx <= TIdx.

ide.CurrentSuggestion{id: I, name: N, type: T, typeMatch: M} :-
  ide.CurrentPlaceholder{id: I} &
  ide.Suggestion{id: I, name: N, type: T, typeMatch: M}.

ide.CurrentScope{id: I, name: N, type: T} :-
  ide.Cursor{idx: Idx} &
  ast.Expr{id: I, location: span{from: Idx}} &
  tc.ScopeItem{id: I, name: N, type: T}.

ide.CurrentType{id: I, type: T, span: span{from: FIdx, to: TIdx}} :-
  ide.Cursor{idx: CIdx} &
  ast.Expr{id: I, location: span{from: FIdx, to: TIdx}} &
  FIdx <= CIdx & CIdx <= TIdx &
  tc.Type{id: I, type: T}.

ide.DefnForCursor{defnLoc: DL} :-
  ide.Cursor{idx: CIdx} &
  ide.Usage{definitionLoc: DL, usageLoc: span{from: FIdx, to: TIdx}} &
  FIdx <= CIdx & CIdx <= TIdx.

ide.UsageForCursor{usageLoc: UL} :-
  ide.Cursor{idx: CIdx} &
  ide.Usage{definitionLoc: span{from: FIdx, to: TIdx}, usageLoc: UL} &
  FIdx <= CIdx & CIdx <= TIdx.

# all usages of the var the cursor is currently on,
# with definition location.
ide.CurrentUsage{defnLoc: DL, usageLoc: UL} :-
  ide.CurrentUsageDefn{defnLoc: DL, usageLoc: UL} |
  ide.CurrentUsageUsage{defnLoc: DL, usageLoc: UL} |
  ide.CurrentUsageUsageIndirect{defnLoc: DL, usageLoc: UL} & DL != "builtin".
ide.CurrentUsageDefn{defnLoc: span{from: FIdx, to: TIdx}, usageLoc: UL} :-
  ide.Usage{definitionLoc: span{from: FIdx, to: TIdx}, usageLoc: UL} &
  ide.Cursor{idx: CIdx} &
  FIdx <= CIdx & CIdx <= TIdx.
ide.CurrentUsageUsage{defnLoc: DL, usageLoc: span{from: FIdx, to: TIdx}} :-
  ide.Usage{definitionLoc: DL, usageLoc: span{from: FIdx, to: TIdx}} &
  ide.Cursor{idx: CIdx} &
  FIdx <= CIdx & CIdx <= TIdx.
ide.CurrentUsageUsageIndirect{defnLoc: DL, usageLoc: UL} :-
  ide.CurrentUsageUsage{defnLoc: DL} &
  ide.Usage{definitionLoc: DL, usageLoc: UL}.

ide.RenameCandidate{defnLoc: DL, usageLoc: UL} :-
  ide.CurrentUsage{defnLoc: DL, usageLoc: UL} &
  DL != "builtin".
