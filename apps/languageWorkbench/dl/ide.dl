# depends on: module refGraph

# all usages of the var the cursor is currently on,
# with definition location.
ide.CurrentUsage{defnLoc: DL, usageLoc: UL} :-
  ide.currentUsageDefn{defnLoc: DL, usageLoc: UL} |
  ide.currentUsageUsage{defnLoc: DL, usageLoc: UL} |
  ide.currentUsageUsageIndirect{defnLoc: DL, usageLoc: UL} & DL != "builtin".

# when the cursor is over a definition
ide.currentUsageDefn{defnLoc: span{from: FIdx, to: TIdx}, usageLoc: UL} :-
  refGraph.Usage{definitionLoc: span{from: FIdx, to: TIdx}, usageLoc: UL} &
  ide.Cursor{idx: CIdx} &
  FIdx <= CIdx & CIdx <= TIdx.

# when the cursor is over a usage
ide.currentUsageUsage{defnLoc: DL, usageLoc: span{from: FIdx, to: TIdx}} :-
  refGraph.Usage{definitionLoc: DL, usageLoc: span{from: FIdx, to: TIdx}} &
  ide.Cursor{idx: CIdx} &
  FIdx <= CIdx & CIdx <= TIdx.

# ???
ide.currentUsageUsageIndirect{defnLoc: DL, usageLoc: UL} :-
  ide.currentUsageUsage{defnLoc: DL} &
  refGraph.Usage{definitionLoc: DL, usageLoc: UL}.

# used by Jump To Definition
ide.DefnForCursor{defnLoc: DL} :-
  ide.Cursor{idx: CIdx} &
  refGraph.Usage{definitionLoc: DL, usageLoc: span{from: FIdx, to: TIdx}} &
  FIdx <= CIdx & CIdx <= TIdx.

ide.UsageForCursor{usageLoc: UL} :-
  ide.Cursor{idx: CIdx} &
  refGraph.Usage{definitionLoc: span{from: FIdx, to: TIdx}, usageLoc: UL} &
  FIdx <= CIdx & CIdx <= TIdx.

ide.RenameCandidate{defnLoc: DL, usageLoc: UL} :-
  ide.CurrentUsage{defnLoc: DL, usageLoc: UL} &
  DL != "builtin".

# === suggestions ===

# ide.CurrentPlaceholder{id: I, span: span{from: FIdx, to: TIdx}} :-
#   ast.Placeholder{id: I, span: span{from: FIdx, to: TIdx}} &
#   ide.Cursor{idx: CIdx} &
#   FIdx <= CIdx & CIdx <= TIdx.
# 
# ide.CurrentSuggestion{id: I, name: N, type: T, typeMatch: M} :-
#   ide.CurrentPlaceholder{id: I} &
#   ide.Suggestion{id: I, name: N, type: T, typeMatch: M}.
# 
# ide.Suggestion{id: I, name: N, type: T, typeMatch: M} :-
#   ide.suggestionVar{id: I, name: N, type: T, typeMatch: M} |
#   ide.suggestionFunc{id: I, name: N, type: T, typeMatch: M} |
#   ide.suggestionScope{id: I, name: N, type: T, typeMatch: M}.
# 
