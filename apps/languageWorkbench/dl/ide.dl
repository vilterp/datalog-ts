# === scope / reference graph ===

# TODO: decide on defnSpan vs definitionLoc

scope.Item{scopeID: I, defnScopeID: DS, name: N, defnSpan: S, kind: K} :-
  scope.defnHere{scopeID: I, defnScopeID: DS, name: N, defnSpan: S, kind: K} |
  scope.defnParent{scopeID: I, defnScopeID: DS, name: N, defnSpan: S, kind: K}.
scope.defnHere{scopeID: I, defnScopeID: I, name: N, defnSpan: S, kind: K} :-
  scope.Defn{scopeID: I, name: N, span: S, kind: K}.
scope.defnParent{scopeID: I, defnScopeID: DS, name: N, defnSpan: S, kind: K} :-
  scope.Parent{childID: I, parentID: P} &
  scope.Item{scopeID: P, defnScopeID: DS, name: N, defnSpan: S, kind: K}.

scope.Usage{
  name: N,
  definitionLoc: DL,
  usageLoc: UL,
  definitionScopeID: DS,
  usageScopeID: US,
  kind: K
} :-
  scope.Item{scopeID: US, defnSpan: DL, name: N, defnScopeID: DS, kind: K} &
  scope.Var{scopeID: US, span: UL, name: N, kind: K}.

# === interaction with cursor ===

# all usages of the var the cursor is currently on,
# with definition location.
ide.CurrentUsage{defnLoc: DL, usageLoc: UL} :-
  ide.currentUsageDefn{defnLoc: DL, usageLoc: UL} |
  ide.currentUsageUsage{defnLoc: DL, usageLoc: UL}.

# when the cursor is over a definition
ide.currentUsageDefn{defnLoc: span{from: FIdx, to: TIdx}, usageLoc: UL} :-
  scope.Usage{definitionLoc: span{from: FIdx, to: TIdx}, usageLoc: UL} &
  ide.Cursor{idx: CIdx} &
  FIdx <= CIdx & CIdx <= TIdx.

# when the cursor is over a usage
ide.currentUsageUsage{defnLoc: DL, usageLoc: span{from: FIdx, to: TIdx}} :-
  scope.Usage{definitionLoc: DL, usageLoc: span{from: FIdx, to: TIdx}} &
  ide.Cursor{idx: CIdx} &
  FIdx <= CIdx & CIdx <= TIdx.

# used by Jump To Definition
ide.DefnForCursor{defnLoc: DL} :-
  ide.Cursor{idx: CIdx} &
  scope.Usage{definitionLoc: DL, usageLoc: span{from: FIdx, to: TIdx}} &
  FIdx <= CIdx & CIdx <= TIdx.

ide.UsageForCursor{usageLoc: UL} :-
  ide.Cursor{idx: CIdx} &
  scope.Usage{definitionLoc: span{from: FIdx, to: TIdx}, usageLoc: UL} &
  FIdx <= CIdx & CIdx <= TIdx.

ide.RenameCandidate{defnLoc: DL, usageLoc: UL} :-
  ide.CurrentUsage{defnLoc: DL, usageLoc: UL} &
  DL != "builtin".

# === suggestions ===

ide.Suggestion{id: I, name: N, span: S} :-
  scope.Placeholder{scopeID: I, span: S, kind: K} &
  scope.Item{scopeID: I, name: N, kind: K}.

ide.CurrentPlaceholder{id: I, span: span{from: FIdx, to: TIdx}} :-
  scope.Placeholder{scopeID: I, span: span{from: FIdx, to: TIdx}} &
  ide.Cursor{idx: CIdx} &
  FIdx <= CIdx & CIdx <= TIdx.

ide.CurrentSuggestion{id: I, name: N, span: S} :-
  ide.CurrentPlaceholder{id: I} &
  ide.Suggestion{id: I, name: N, span: S}.
