# === Viz ===

.table internal.visualization

# internal.visualization{
#   name: "Time Ticker",
#   spec: ticker{},
# }.

# Slider for params

# internal.visualization{
#   name: "Params",
#   spec: multiSlider{
#     vars: input.param{instrIdx: ID, value: Val}
#   }
# }.

# sequence diagram

internal.visualization{
  name: "Spawning Sequence",
  spec: sequence{
    actors: state.ProgramCounter{thread: ID},
    hops: viz.hop{fromTick: FromTick, toTick: ToTick},
    tickColor: viz.tickColor{tick: Tick, color: Color},
    hopColor: viz.hopColor{fromTick: FromTick, toTick: ToTick, color: Color},
  },
}.

viz.hop{fromTick: FromTick, toTick: ToTick, kind: K} :-
  viz.spawnMessage{fromTick: FromTick, toTick: ToTick, kind: K} |
  viz.continueMessage{fromTick: FromTick, toTick: ToTick, kind: K} |
  viz.lockTransferMessage{fromTick: FromTick, toTick: ToTick, kind: K}.
# messages
viz.spawnMessage{
  fromTick: tick{time: FromT, place: FromTH},
  toTick: tick{time: ToT, place: ToTH},
  kind: spawn{},
} :-
  # TODO: constrain time as well?
  state.ProgramCounter{time: FromT, thread: FromTH, counter: ForkC} &
  state.ProgramCounter{time: ToT, thread: ToTH, counter: ForkToC} &
  instr{idx: ForkC, op: forkTo{dest: ForkToC}} &
  FromT + 1 = ToT.
viz.continueMessage{
  fromTick: tick{time: PrevT, place: TH},
  toTick: tick{time: T, place: TH},
  kind: continue{},
} :-
  state.ProgramCounter{thread: TH, time: PrevT} &
  state.ProgramCounter{thread: TH, time: T} &
  PrevT = T + 1.
viz.lockTransferMessage{
  fromTick: tick{time: PrevT, place: ReleaseTH},
  toTick: tick{time: T, place: AcquireTH},
  kind: lockTransfer{},
} :-
  state.Lock{id: Lock, time: PrevT, state: heldBy{thread: ReleaseTH}} &
  state.Lock{id: Lock, time: T, state: heldBy{thread: AcquireTH}} &
  AcquireTH != ReleaseTH &
  T = PrevT + 1.
# hop color
.table viz.hopColorCode
viz.hopColorCode{kind: continue{}, color: "grey"}.
viz.hopColorCode{kind: spawn{}, color: "blue"}.
viz.hopColorCode{kind: lockTransfer{}, color: "green"}.

viz.hopColor{fromTick: From, toTick: To, color: C} :-
  viz.hop{fromTick: From, toTick: To, kind: K} &
  viz.hopColorCode{kind: K, color: C}.
# tick color
# can't make the color code a table because `blocked{}` is matching
# over different values of its attribute `reason`
viz.tickColor{tick: T, color: C} :-
  viz.runningColor{tick: T, color: C} |
  viz.blockedColor{tick: T, color: C} |
  viz.finishedColor{tick: T, color: C}.
viz.runningColor{tick: tick{time: T, place: TH}, color: "lightgreen"} :-
  state.ProgramCounter{thread: TH, time: T, state: running{}}.
viz.blockedColor{tick: tick{time: T, place: TH}, color: "lightpink"} :-
  state.ProgramCounter{thread: TH, time: T, state: blocked{}}.
viz.finishedColor{tick: tick{time: T, place: TH}, color: "grey"} :-
  state.ProgramCounter{thread: TH, time: T, state: finished{}}.


internal.visualization{
  name: "Wait-For Graph",
  spec: paramSlider{
    var: T,
    inner: graphviz{
      edges: state.waitingFor{time: T, waiting: From, waitingOn: To},
    }
  },
}.

internal.visualization{
  name: "Program Counter over Time",
  spec: vegalite{
    mark: "line",
    encoding: encoding{
      x: mapping{field: "time", type: "quantitative"},
      y: mapping{field: "counter", type: "quantitative"},
      color: mapping{field: "thread"}
    },
    query: state.ProgramCounter{}
  }
}.

# TODO: another encoding channel for thread
internal.visualization{
  name: "Variables Over Time",
  spec: vegalite{
    mark: "line",
    encoding: encoding{
      x: mapping{field: "time", type: "quantitative"},
      y: mapping{field: "value", type: "quantitative"},
      color: mapping{field: "tv"}
    },
    query: viz.threadVar{}
  }
}.

viz.threadVar{time: T, tv: [TH, V], value: Val} :-
  state.Var{thread: TH, time: T, var: V, value: Val}.
