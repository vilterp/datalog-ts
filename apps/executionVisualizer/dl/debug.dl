debug.instrAtTime{time: T, thread: TH, counter: C, instr: I} :-
  state.ProgramCounter{time: T, thread: TH, counter: C} &
  instr{idx: C, op: I}.

# TODO: these should be ICs

# program counter should be unique for each (thread, time)
debug.doubleProgramCounter{time: T, thread: TH, counter1: C1, counter2: C2} :-
  state.ProgramCounter{time: T, thread: TH, counter: C1} &
  state.ProgramCounter{time: T, thread: TH, counter: C2} &
  C1 < C2.

# var value should be unique for each (var, thread, time)
debug.doubleVar{var: Var, time: T, thread: TH, val1: Val1, val2: Val2} :-
  state.Var{var: Var, value: Val1, time: T, thread: TH} &
  state.Var{var: Var, value: Val2, time: T, thread: TH} &
  Val1 != Val2.
debug.doubleVar.forkNew{var: Var, time: T, thread: TH, val1: Val1, val2: Val2} :-
  state.var.stay.fork.new{var: Var, value: Val1, time: T, thread: TH} &
  state.var.stay.fork.new{var: Var, value: Val2, time: T, thread: TH} &
  Val1 != Val2.
debug.doubleVar.forkOrig{var: Var, time: T, thread: TH, val1: Val1, val2: Val2} :-
  state.var.stay.fork.orig{var: Var, value: Val1, time: T, thread: TH} &
  state.var.stay.fork.orig{var: Var, value: Val2, time: T, thread: TH} &
  Val1 != Val2.
debug.doubleVar.store.call{var: Var, time: T, thread: TH, val1: Val1, val2: Val2, fun: F} :-
  state.var.store.call{var: Var, value: Val1, time: T, thread: TH, fun: F} &
  state.var.store.call{var: Var, value: Val2, time: T, thread: TH, fun: F} &
  Val1 != Val2.

# lock holder should be unique for each (lock, time)
debug.doubleLockHolder{id: I, time: T, thread1: TH1, thread2: TH2} :-
  state.Lock{id: I, state: heldBy{thread: TH2}, time: T} &
  state.Lock{id: I, state: heldBy{thread: TH1}, time: T} &
  TH1 < TH2.
