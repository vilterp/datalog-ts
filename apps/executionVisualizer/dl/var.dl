state.Var{thread: TH, time: T, var: Var, value: Val} :-
  state.var.storeInt{thread: TH, time: T, var: Var, value: Val} |
  # TODO: storeString
  state.var.store.call{thread: TH, time: T, var: Var, value: Val} |
  state.var.stay{thread: TH, time: T, var: Var, value: Val}.

state.var.storeInt{thread: TH, time: T, var: Var, value: Val} :-
  state.ProgramCounter{thread: TH, time: PrevT, counter: C} &
  instr{idx: C, op: store{var: Var, val: Val}} &
  base.int{a: Val} &
  T = PrevT + 1.
  
state.var.store.call{thread: TH, time: T, var: Var, value: Val, fun: F} :-
  state.var.store.call.incr{thread: TH, time: T, var: Var, value: Val, fun: F} |
  state.var.store.call.LT{thread: TH, time: T, var: Var, value: Val, fun: F} |
  state.var.store.call.newLock{thread: TH, time: T, var: Var, value: Val, fun: F}.
# incr
state.var.store.call.incr{thread: TH, time: T, var: Var, value: Val, fun: "prim.incr"} :-
  state.ProgramCounter{thread: TH, time: PrevT, counter: C} &
  instr{idx: C, op: store{var: Var, val: primitive{fun: "prim.incr", args: [ArgVar]}}} &
  state.Var{thread: TH, time: PrevT, var: ArgVar, value: ArgVal} &
  Val = ArgVal + 1 &
  T = PrevT + 1.
# less than
state.var.store.call.LT{thread: TH, time: T, var: Var, value: Val, fun: "prim.lt"} :-
  state.var.store.call.LT.yes{thread: TH, time: T, var: Var, value: Val} |
  state.var.store.call.LT.no{thread: TH, time: T, var: Var, value: Val}.
state.var.store.call.LT.yes{thread: TH, time: T, var: Var, value: Val} :-
  state.ProgramCounter{thread: TH, time: PrevT, counter: C} &
  instr{idx: C, op: store{var: Var, val: primitive{fun: "prim.lt", args: [Arg1Var, Arg2Var]}}} &
  state.Var{thread: TH, time: PrevT, var: Arg1Var, value: Arg1Val} &
  state.Var{thread: TH, time: PrevT, var: Arg2Var, value: Arg2Val} &
  Arg1Val < Arg2Val &
  Val = true &
  T = PrevT + 1.
state.var.store.call.LT.no{thread: TH, time: T, var: Var, value: Val} :-
  state.ProgramCounter{thread: TH, time: PrevT, counter: C} &
  instr{idx: C, op: store{var: Var, val: primitive{fun: "prim.lt", args: [Arg1Var, Arg2Var]}}} &
  state.Var{thread: TH, time: PrevT, var: Arg1Var, value: Arg1Val} &
  state.Var{thread: TH, time: PrevT, var: Arg2Var, value: Arg2Val} &
  Arg1Val >= Arg2Val &
  Val = false &
  T = PrevT + 1.
state.var.store.call.fork.orig{thread: TH, time: T, var: Var, value: Val} :-
  state.ProgramCounter{thread: TH, time: PrevT, counter: C} &
  instr{idx: C, op: store{var: Var, val: call{fun: "fork"}}} &
  Val = false &
  T = PrevT + 1.
# newLock
state.var.store.call.newLock{thread: TH, time: T, var: Var, value: Val, fun: "prim.newLock"} :-
  state.ProgramCounter{thread: TH, time: PrevT, counter: C} &
  instr{idx: C, op: store{var: Var, val: primitive{fun: "prim.newLock"}}} &
  T = PrevT + 1 &
  Val = created{thread: TH, time: T}.

# == stay ==
# propagate forward in time the values of variables that
# aren't being changed at this timestep
state.var.stay{thread: TH, time: T, var: Var, value: PrevVal} :-
  state.var.stay.store{thread: TH, time: T, var: Var, value: PrevVal} |
  state.var.stay.fork{thread: TH, time: T, var: Var, value: PrevVal} |
  state.var.stay.goto{thread: TH, time: T, var: Var, value: PrevVal} |
  state.var.stay.gotoIf{thread: TH, time: T, var: Var, value: PrevVal}.
# store & increment
state.var.stay.store{thread: TH, time: T, var: Var, value: PrevVal} :-
  state.ProgramCounter{thread: TH, time: PrevT, counter: C} &
  T = PrevT + 1 &
  instr{idx: C, op: store{var: OtherVar}} &
  state.Var{thread: TH, time: PrevT, var: Var, value: PrevVal} &
  OtherVar != Var.
# fork
state.var.stay.fork{thread: TH, time: T, var: Var, value: PrevVal} :-
  state.var.stay.fork.orig{thread: TH, time: T, var: Var, value: PrevVal} |
  state.var.stay.fork.new{thread: TH, time: T, var: Var, value: PrevVal}.
state.var.stay.fork.orig{thread: OrigTH, time: T, var: Var, value: PrevVal} :-
  state.programCounter.fork.new{origThread: OrigTH, time: T} &
  T = PrevT + 1 &
  state.Var{thread: OrigTH, time: PrevT, var: Var, value: PrevVal}.
state.var.stay.fork.new{thread: NewTH, time: T, var: Var, value: Val} :-
  state.programCounter.fork.new{origThread: OrigTH, thread: NewTH, time: T} &
  T = PrevT + 1 &
  state.Var{thread: OrigTH, time: PrevT, var: Var, value: Val}.
# goto
state.var.stay.goto{thread: TH, time: T, var: Var, value: PrevVal} :-
  state.ProgramCounter{thread: TH, time: PrevT, counter: C} &
  T = PrevT + 1 &
  instr{idx: C, op: goto{}} &
  state.Var{thread: TH, time: PrevT, var: Var, value: PrevVal}.
# gotoIf
state.var.stay.gotoIf{thread: TH, time: T, var: Var, value: PrevVal} :-
  state.ProgramCounter{thread: TH, time: PrevT, counter: C} &
  T = PrevT + 1 &
  instr{idx: C, op: gotoIf{}} &
  state.Var{thread: TH, time: PrevT, var: Var, value: PrevVal}.
