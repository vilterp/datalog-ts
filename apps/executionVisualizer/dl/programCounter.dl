state.ProgramCounter{thread: TH, time: T, counter: C, state: St} :-
  state.programCounter.init{thread: TH, time: T, counter: C, state: St} |
  state.programCounter.storeBasic{thread: TH, time: T, counter: C, state: St} |
  state.programCounter.goto{thread: TH, time: T, counter: C, state: St} |
  state.programCounter.gotoIf{thread: TH, time: T, counter: C, state: St} |
  state.programCounter.call{thread: TH, time: T, counter: C, state: St}.

state.programCounter.storeBasic{thread: TH, time: T, counter: C, state: running{}} :-
  state.programCounter.storeBasic.literal{thread: TH, time: T, counter: C, state: running{}} |
  state.programCounter.storeBasic.primitive{thread: TH, time: T, counter: C, state: running{}}.
state.programCounter.storeBasic.literal{thread: TH, time: T, counter: C, state: running{}} :-
  time{time: T} &
  instr{idx: PrevC, op: store{val: Lit}} &
  base.int{a: Lit} &
  T = PrevT + 1 &
  C = PrevC + 1 &
  state.ProgramCounter{thread: TH, time: PrevT, counter: PrevC, state: running{}}.
state.programCounter.storeBasic.primitive{thread: TH, time: T, counter: C, state: running{}} :-
  time{time: T} &
  instr{idx: PrevC, op: store{val: primitive{}}} &
  T = PrevT + 1 &
  C = PrevC + 1 &
  state.ProgramCounter{thread: TH, time: PrevT, counter: PrevC, state: running{}}.
# condGoto
state.programCounter.gotoIf{thread: TH, time: T, counter: C, state: St} :-
  state.programCounter.gotoIf.yes{thread: TH, time: T, counter: C, state: St} |
  state.programCounter.gotoIf.no{thread: TH, time: T, counter: C, state: St}.
state.programCounter.gotoIf.yes{thread: TH, time: T, counter: C, state: running{}} :-
  time{time: T} &
  instr{idx: PrevC, op: gotoIf{dest: C, cond: Var}} &
  T = PrevT + 1 &
  state.Var{thread: TH, time: PrevT, var: Var, value: true} &
  state.ProgramCounter{thread: TH, time: PrevT, counter: PrevC, state: running{}}.
state.programCounter.gotoIf.no{thread: TH, time: T, counter: C, state: running{}} :-
  time{time: T} &
  instr{idx: PrevC, op: gotoIf{cond: Var}} &
  T = PrevT + 1 &
  state.Var{thread: TH, time: PrevT, var: Var, value: false} &
  C = PrevC + 1 &
  state.ProgramCounter{thread: TH, time: PrevT, counter: PrevC, state: running{}}.
# goto
state.programCounter.goto{thread: TH, time: T, counter: C, state: running{}} :-
  state.ProgramCounter{thread: TH, time: PrevT, counter: PrevC, state: running{}} &
  T = PrevT + 1 &
  instr{idx: PrevC, op: goto{dest: C}}.

# call
state.programCounter.call{thread: TH, time: T, counter: C, state: St} :-
  state.programCounter.fork{thread: TH, time: T, counter: C, state: St} |
  state.programCounter.call.sleep{thread: TH, time: T, counter: C, state: St} |
  state.programCounter.call.acquireLock{thread: TH, time: T, counter: C, state: St} |
  state.programCounter.call.releaseLock{thread: TH, time: T, counter: C, state: St}.

# fork
state.programCounter.fork{thread: TH, time: T, counter: C, state: St} :-
  state.programCounter.fork.orig{thread: TH, time: T, counter: C, state: St} |
  state.programCounter.fork.new{thread: TH, time: T, counter: C, state: St}.
state.programCounter.fork.orig{thread: TH, time: T, counter: C, state: running{}} :-
  time{time: T} &
  instr{idx: PrevC, op: forkTo{}} &
  state.ProgramCounter{thread: TH, time: PrevT, counter: PrevC, state: running{}} &
  T = PrevT + 1 &
  C = PrevC + 1.
state.programCounter.fork.new{
  thread: TH,
  origThread: PrevTH,
  time: T,
  counter: C,
  state: running{},
} :-
  time{time: T} &
  instr{idx: PrevC, op: forkTo{dest: C}} &
  state.ProgramCounter{thread: PrevTH, time: PrevT, counter: PrevC, state: running{}} &
  T = PrevT + 1 &
  ShiftedT = T + 100 &
  TH = PrevTH + ShiftedT.
# sleep
state.programCounter.call.sleep{thread: TH, time: T, counter: C, state: St} :-
  state.programCounter.timer.init{thread: TH, time: T, counter: C, state: St} |
  state.programCounter.timer.block{thread: TH, time: T, counter: C, state: St} |
  state.programCounter.timer.unblock{thread: TH, time: T, counter: C, state: St}.
state.programCounter.timer.init{
  thread: TH,
  time: T,
  counter: C,
  state: blocked{reason: timer{
    thread: TH,
    start: T,
  }},
  dur: Dur,
} :-
  time{time: T} &
  instr{idx: PrevC, op: store{val: blockingCall{fun: "block.sleep", args: [DurVar]}}} &
  T = PrevT + 1 &
  C = PrevC + 1 &
  state.ProgramCounter{thread: TH, time: PrevT, counter: PrevC, state: running{}} &
  state.Var{thread: TH, time: T, var: DurVar, value: Dur}.
# step thread forward in time while blocked
state.programCounter.timer.block{
  thread: TH,
  time: T,
  counter: C,
  state: blocked{reason: timer{
    start: StartT,
    thread: TH,
  }},
  wakeupTime: WT,
} :-
  state.ProgramCounter{thread: TH, time: PrevT, counter: C, state: blocked{reason: timer{
    start: StartT,
    thread: TH,
  }}} &
  time{time: T} &
  T = PrevT + 1 &
  state.Timer{thread: TH, startTime: StartT, wakeupTime: WT} &
  T < WT.
# wake up thread when it's time to unblock
state.programCounter.timer.unblock{thread: TH, time: T, counter: C, state: running{}} :-
  state.ProgramCounter{thread: TH, time: PrevT, counter: C, state: blocked{reason: timer{
    start: StartT,
    thread: TH,
  }}} &
  time{time: T} &
  T = PrevT + 1 &
  state.Timer{thread: TH, startTime: StartT, wakeupTime: WT} &
  WT = T.
# acquire lock
state.programCounter.call.acquireLock{thread: TH, time: T, counter: C, state: St, lock: L} :-
  state.programCounter.lock.init{thread: TH, time: T, counter: C, state: St, lock: L} |
  state.programCounter.lock.acquire.block{thread: TH, time: T, counter: C, state: St, lock: L} |
  state.programCounter.lock.acquire.unblock{thread: TH, time: T, counter: C, state: St, lock: L}.
state.programCounter.lock.init{thread: TH, time: T, counter: C, state: St, lock: L} :-
  state.programCounter.lock.acquire.init.held{thread: TH, time: T, counter: C, state: St, lock: L} |
  state.programCounter.lock.acquire.init.open{thread: TH, time: T, counter: C, state: St, lock: L}.
state.programCounter.lock.acquire.init.held{
  thread: TH,
  time: T,
  counter: C,
  state: blocked{reason: lock{id: LockVal}},
  lock: LockVal,
} :-
  time{time: T} &
  state.ProgramCounter{thread: TH, time: PrevT, counter: C, state: running{}} &
  instr{idx: C, op: store{val: blockingCall{fun: "block.acquireLock", args: [LockVar]}}} &
  state.Var{thread: TH, time: PrevT, var: LockVar, value: LockVal} &
  state.Lock{id: LockVal, state: heldBy{}, time: PrevT} &
  T = PrevT + 1.
state.programCounter.lock.acquire.init.open{
  thread: TH,
  time: T,
  counter: C,
  state: running{},
  lock: LockVal,
} :-
  time{time: T} &
  T = PrevT + 1 &
  state.ProgramCounter{thread: TH, time: PrevT, counter: PrevC, state: running{}} &
  instr{idx: PrevC, op: store{val: blockingCall{fun: "block.acquireLock", args: [LockVar]}}} &
  state.Var{thread: TH, time: PrevT, var: LockVar, value: LockVal} &
  state.Lock{id: LockVal, state: open{}, time: PrevT} &
  C = PrevC + 1.
# step forward in time while still blocked on the lock
state.programCounter.lock.acquire.block{
  thread: TH,
  time: T,
  counter: C,
  state: blocked{reason: lock{id: LockID}},
  lock: LockID
} :-
  time{time: T} &
  state.ProgramCounter{thread: TH, time: PrevT, counter: C, state: blocked{reason: lock{id: LockID}}} &
  T = PrevT + 1 &
  state.Lock{time: PrevT, id: LockID, state: heldBy{}}.
# one thread releases a lock, unblocking the thread waiting on it
# TODO: what if multiple threads are waiting on it
state.programCounter.lock.acquire.unblock{
  thread: AcquiringTH,
  time: T,
  counter: C,
  state: running{},
  lock: LockVal,
  releasingThread: ReleasingTH,
} :-
  time{time: T} &
  state.ProgramCounter{time: PrevT, counter: PrevC, thread: AcquiringTH, state: blocked{reason: lock{id: LockVal}}} &
  instr{idx: PrevC, op: store{fun: "block.acquireLock", args: [LockVar]}} &
  state.Var{thread: AcquiringTH, var: LockVar, value: LockVal, time: PrevT} &
  state.Lock{id: LockVal, time: PrevT, state: heldBy{thread: ReleasingTH}} &
  state.programCounter.call.releaseLock{time: T, thread: ReleasingTH, lock: LockVal} &
  T = PrevT + 1 &
  C = PrevC + 1.
# release lock
state.programCounter.call.releaseLock{
  thread: TH,
  time: T,
  counter: C,
  state: running{},
  lock: LockVal,
} :-
  time{time: T} &
  state.ProgramCounter{thread: TH, time: PrevT, counter: PrevC, state: running{}} &
  instr{idx: PrevC, op: store{val: call{fun: "releaseLock", args: [LockVar]}}} &
  state.Var{thread: TH, time: PrevT, var: LockVar, value: LockVal} &
  state.Lock{id: LockVal, state: heldBy{thread: TH}, time: PrevT} &
  T = PrevT + 1 &
  C = PrevC + 1.

state.programCounter.init{thread: 1, time: 1, counter: 0, state: running{}}.
