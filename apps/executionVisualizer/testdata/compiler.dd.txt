countUp {
  x = 0;
  goto loop;
}
loop {
  threshold = 5;
  x = prim.incr(x);
  going = prim.lt(x, threshold);
  goto loop if going;
}
----
application/datalog
input.instr{idx: 0, op: store{val: 0, var: "x"}}.
input.instr{idx: 1, op: goto{dest: 2}}.
input.instr{idx: 2, op: store{val: 5, var: "threshold"}}.
input.instr{idx: 3, op: store{val: primitive{args: ["x"], fun: "prim.incr"}, var: "x"}}.
input.instr{idx: 4, op: store{val: primitive{args: ["x","threshold"], fun: "prim.lt"}, var: "going"}}.
input.instr{idx: 5, op: gotoIf{cond: "going", dest: 2}}.

countUp {
  x = 0;
  goto loop;
}
loop {
  forkTo afterFork;
  x = prim.incr(x);
  threshold = 5;
  going = prim.lt(x, threshold);
  goto loop if going;
}
afterFork {
  done = 42;
}
----
application/datalog
input.instr{idx: 0, op: store{val: 0, var: "x"}}.
input.instr{idx: 1, op: goto{dest: 2}}.
input.instr{idx: 2, op: forkTo{dest: 7}}.
input.instr{idx: 3, op: store{val: primitive{args: ["x"], fun: "prim.incr"}, var: "x"}}.
input.instr{idx: 4, op: store{val: 5, var: "threshold"}}.
input.instr{idx: 5, op: store{val: primitive{args: ["x","threshold"], fun: "prim.lt"}, var: "going"}}.
input.instr{idx: 6, op: gotoIf{cond: "going", dest: 2}}.
input.instr{idx: 7, op: store{val: 42, var: "done"}}.

main {
  x = 5;
  block.sleep(x); // sleep the thread
  z = 10;
}
----
application/datalog
input.instr{idx: 0, op: store{val: 5, var: "x"}}.
input.instr{idx: 1, op: store{val: blockingCall{args: ["x"], fun: "block.sleep"}, var: "_"}}.
input.instr{idx: 2, op: store{val: 10, var: "z"}}.

main {
  lock1 = prim.newLock(); // TODO: generic "new" instr?
  lock2 = prim.newLock();
  forkTo afterFork;
  block.acquireLock(lock1);
  block.acquireLock(lock2);
  releaseLock(lock1);
  releaseLock(lock2);
}
afterFork {
  block.acquireLock(lock2);
  block.acquireLock(lock1);
  releaseLock(lock2);
  releaseLock(lock1);
}
----
application/datalog
input.instr{idx: 0, op: store{val: primitive{args: [], fun: "prim.newLock"}, var: "lock1"}}.
input.instr{idx: 1, op: store{val: primitive{args: [], fun: "prim.newLock"}, var: "lock2"}}.
input.instr{idx: 10, op: store{val: call{args: ["lock1"], fun: "releaseLock"}, var: "_"}}.
input.instr{idx: 2, op: forkTo{dest: 7}}.
input.instr{idx: 3, op: store{val: blockingCall{args: ["lock1"], fun: "block.acquireLock"}, var: "_"}}.
input.instr{idx: 4, op: store{val: blockingCall{args: ["lock2"], fun: "block.acquireLock"}, var: "_"}}.
input.instr{idx: 5, op: store{val: call{args: ["lock1"], fun: "releaseLock"}, var: "_"}}.
input.instr{idx: 6, op: store{val: call{args: ["lock2"], fun: "releaseLock"}, var: "_"}}.
input.instr{idx: 7, op: store{val: blockingCall{args: ["lock2"], fun: "block.acquireLock"}, var: "_"}}.
input.instr{idx: 8, op: store{val: blockingCall{args: ["lock1"], fun: "block.acquireLock"}, var: "_"}}.
input.instr{idx: 9, op: store{val: call{args: ["lock2"], fun: "releaseLock"}, var: "_"}}.

main {
  lock1 = prim.newLock();
  lock2 = prim.newLock();
  block.acquireLock(lock1);
  forkTo afterFork;
  t = <<5>>;
  block.sleep(t);
  block.acquireLock(lock2);
}
afterFork {
  block.acquireLock(lock2);
  block.acquireLock(lock1);
}
end {}
----
application/datalog
input.instr{idx: 0, op: store{val: primitive{args: [], fun: "prim.newLock"}, var: "lock1"}}.
input.instr{idx: 1, op: store{val: primitive{args: [], fun: "prim.newLock"}, var: "lock2"}}.
input.instr{idx: 2, op: store{val: blockingCall{args: ["lock1"], fun: "block.acquireLock"}, var: "_"}}.
input.instr{idx: 3, op: forkTo{dest: 7}}.
input.instr{idx: 4, op: store{val: param{}, var: "t"}}.
input.instr{idx: 5, op: store{val: blockingCall{args: ["t"], fun: "block.sleep"}, var: "_"}}.
input.instr{idx: 6, op: store{val: blockingCall{args: ["lock2"], fun: "block.acquireLock"}, var: "_"}}.
input.instr{idx: 7, op: store{val: blockingCall{args: ["lock2"], fun: "block.acquireLock"}, var: "_"}}.
input.instr{idx: 8, op: store{val: blockingCall{args: ["lock1"], fun: "block.acquireLock"}, var: "_"}}.
input.param{instrIdx: 4, value: 5}.
