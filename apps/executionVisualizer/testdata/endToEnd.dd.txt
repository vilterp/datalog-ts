countUp {
  x = 0;
  goto loop;
}
loop {
  threshold = 5;
  x = prim.incr(x);
  going = prim.lt(x, threshold);
  goto loop if going;
}
state.Var{var: "x"}?
----
application/datalog
state.Var{thread: 1, time: 10, value: 2, var: "x"}.
state.Var{thread: 1, time: 11, value: 2, var: "x"}.
state.Var{thread: 1, time: 12, value: 2, var: "x"}.
state.Var{thread: 1, time: 13, value: 3, var: "x"}.
state.Var{thread: 1, time: 14, value: 3, var: "x"}.
state.Var{thread: 1, time: 15, value: 3, var: "x"}.
state.Var{thread: 1, time: 16, value: 3, var: "x"}.
state.Var{thread: 1, time: 17, value: 4, var: "x"}.
state.Var{thread: 1, time: 18, value: 4, var: "x"}.
state.Var{thread: 1, time: 19, value: 4, var: "x"}.
state.Var{thread: 1, time: 2, value: 0, var: "x"}.
state.Var{thread: 1, time: 20, value: 4, var: "x"}.
state.Var{thread: 1, time: 21, value: 5, var: "x"}.
state.Var{thread: 1, time: 22, value: 5, var: "x"}.
state.Var{thread: 1, time: 23, value: 5, var: "x"}.
state.Var{thread: 1, time: 3, value: 0, var: "x"}.
state.Var{thread: 1, time: 4, value: 0, var: "x"}.
state.Var{thread: 1, time: 5, value: 1, var: "x"}.
state.Var{thread: 1, time: 6, value: 1, var: "x"}.
state.Var{thread: 1, time: 7, value: 1, var: "x"}.
state.Var{thread: 1, time: 8, value: 1, var: "x"}.
state.Var{thread: 1, time: 9, value: 2, var: "x"}.

countUp {
  x = 0;
  goto loop;
}
loop {
  forkTo afterFork;
  x = prim.incr(x);
  threshold = 5;
  going = prim.lt(x, threshold);
  goto loop if going;
}
afterFork {
  done = 42;
}
state.ProgramCounter{}?
----
application/datalog
state.ProgramCounter{counter: 0, state: running{}, thread: 1, time: 1}.
state.ProgramCounter{counter: 1, state: running{}, thread: 1, time: 2}.
state.ProgramCounter{counter: 2, state: running{}, thread: 1, time: 13}.
state.ProgramCounter{counter: 2, state: running{}, thread: 1, time: 18}.
state.ProgramCounter{counter: 2, state: running{}, thread: 1, time: 23}.
state.ProgramCounter{counter: 2, state: running{}, thread: 1, time: 3}.
state.ProgramCounter{counter: 2, state: running{}, thread: 1, time: 8}.
state.ProgramCounter{counter: 3, state: running{}, thread: 1, time: 14}.
state.ProgramCounter{counter: 3, state: running{}, thread: 1, time: 19}.
state.ProgramCounter{counter: 3, state: running{}, thread: 1, time: 24}.
state.ProgramCounter{counter: 3, state: running{}, thread: 1, time: 4}.
state.ProgramCounter{counter: 3, state: running{}, thread: 1, time: 9}.
state.ProgramCounter{counter: 4, state: running{}, thread: 1, time: 10}.
state.ProgramCounter{counter: 4, state: running{}, thread: 1, time: 15}.
state.ProgramCounter{counter: 4, state: running{}, thread: 1, time: 20}.
state.ProgramCounter{counter: 4, state: running{}, thread: 1, time: 25}.
state.ProgramCounter{counter: 4, state: running{}, thread: 1, time: 5}.
state.ProgramCounter{counter: 5, state: running{}, thread: 1, time: 11}.
state.ProgramCounter{counter: 5, state: running{}, thread: 1, time: 16}.
state.ProgramCounter{counter: 5, state: running{}, thread: 1, time: 21}.
state.ProgramCounter{counter: 5, state: running{}, thread: 1, time: 26}.
state.ProgramCounter{counter: 5, state: running{}, thread: 1, time: 6}.
state.ProgramCounter{counter: 6, state: running{}, thread: 1, time: 12}.
state.ProgramCounter{counter: 6, state: running{}, thread: 1, time: 17}.
state.ProgramCounter{counter: 6, state: running{}, thread: 1, time: 22}.
state.ProgramCounter{counter: 6, state: running{}, thread: 1, time: 27}.
state.ProgramCounter{counter: 6, state: running{}, thread: 1, time: 7}.
state.ProgramCounter{counter: 7, state: running{}, thread: 1, time: 28}.
state.ProgramCounter{counter: 7, state: running{}, thread: 105, time: 4}.
state.ProgramCounter{counter: 7, state: running{}, thread: 110, time: 9}.
state.ProgramCounter{counter: 7, state: running{}, thread: 115, time: 14}.
state.ProgramCounter{counter: 7, state: running{}, thread: 120, time: 19}.
state.ProgramCounter{counter: 7, state: running{}, thread: 125, time: 24}.
state.ProgramCounter{counter: 8, state: running{}, thread: 1, time: 29}.
state.ProgramCounter{counter: 8, state: running{}, thread: 105, time: 5}.
state.ProgramCounter{counter: 8, state: running{}, thread: 110, time: 10}.
state.ProgramCounter{counter: 8, state: running{}, thread: 115, time: 15}.
state.ProgramCounter{counter: 8, state: running{}, thread: 120, time: 20}.
state.ProgramCounter{counter: 8, state: running{}, thread: 125, time: 25}.

main {
  x = 5;
  block.sleep(x);
  z = 10;
}
state.ProgramCounter{}?
----
application/datalog
state.ProgramCounter{counter: 0, state: running{}, thread: 1, time: 1}.
state.ProgramCounter{counter: 1, state: running{}, thread: 1, time: 2}.
state.ProgramCounter{counter: 2, state: blocked{reason: timer{start: 3, thread: 1}}, thread: 1, time: 3}.
state.ProgramCounter{counter: 2, state: blocked{reason: timer{start: 3, thread: 1}}, thread: 1, time: 4}.
state.ProgramCounter{counter: 2, state: blocked{reason: timer{start: 3, thread: 1}}, thread: 1, time: 5}.
state.ProgramCounter{counter: 2, state: blocked{reason: timer{start: 3, thread: 1}}, thread: 1, time: 6}.
state.ProgramCounter{counter: 2, state: blocked{reason: timer{start: 3, thread: 1}}, thread: 1, time: 7}.
state.ProgramCounter{counter: 2, state: running{}, thread: 1, time: 8}.
state.ProgramCounter{counter: 3, state: running{}, thread: 1, time: 9}.

main {
  x = 5;
  block.sleep(x);
  z = 10;
}
state.Timer{}?
----
application/datalog
state.Timer{startTime: 3, thread: 1, wakeupTime: 8}.

countUp {
  x = 0;
  goto loop;
}
loop {
  forkTo afterFork;
  x = prim.incr(x);
  threshold = 5;
  going = prim.lt(x, threshold);
  goto loop if going;
  goto end;
}
afterFork {
  x = 5;
  block.sleep(x);
  z = 10;
}
end {}
state.Timer{}?
----
application/datalog
state.Timer{startTime: 11, thread: 110, wakeupTime: 16}.
state.Timer{startTime: 16, thread: 115, wakeupTime: 21}.
state.Timer{startTime: 21, thread: 120, wakeupTime: 26}.
state.Timer{startTime: 26, thread: 125, wakeupTime: 31}.
state.Timer{startTime: 6, thread: 105, wakeupTime: 11}.

main {
  lock = prim.newLock();
  block.acquireLock(lock);
  z = 5;
  releaseLock(lock);
}
state.Lock{}?
----
application/datalog
state.Lock{id: created{thread: 1, time: 2}, state: heldBy{thread: 1}, time: 3}.
state.Lock{id: created{thread: 1, time: 2}, state: heldBy{thread: 1}, time: 4}.
state.Lock{id: created{thread: 1, time: 2}, state: heldBy{thread: 1}, time: 5}.
state.Lock{id: created{thread: 1, time: 2}, state: open{}, time: 2}.
state.Lock{id: created{thread: 1, time: 2}, state: open{}, time: 3}.
state.Lock{id: created{thread: 1, time: 2}, state: open{}, time: 5}.

main {
  lock = prim.newLock();
  block.acquireLock(lock);
  forkTo afterFork;
  t = 5;
  block.sleep(t);
  releaseLock(lock);
  goto end;
}
afterFork {
  block.acquireLock(lock);
  x5 = 10;
}
end {}
state.Lock{}?
----
application/datalog
state.Lock{id: created{thread: 1, time: 2}, state: heldBy{thread: 1}, time: 10}.
state.Lock{id: created{thread: 1, time: 2}, state: heldBy{thread: 1}, time: 11}.
state.Lock{id: created{thread: 1, time: 2}, state: heldBy{thread: 1}, time: 12}.
state.Lock{id: created{thread: 1, time: 2}, state: heldBy{thread: 1}, time: 3}.
state.Lock{id: created{thread: 1, time: 2}, state: heldBy{thread: 1}, time: 4}.
state.Lock{id: created{thread: 1, time: 2}, state: heldBy{thread: 1}, time: 5}.
state.Lock{id: created{thread: 1, time: 2}, state: heldBy{thread: 1}, time: 6}.
state.Lock{id: created{thread: 1, time: 2}, state: heldBy{thread: 1}, time: 7}.
state.Lock{id: created{thread: 1, time: 2}, state: heldBy{thread: 1}, time: 8}.
state.Lock{id: created{thread: 1, time: 2}, state: heldBy{thread: 1}, time: 9}.
state.Lock{id: created{thread: 1, time: 2}, state: open{}, time: 12}.
state.Lock{id: created{thread: 1, time: 2}, state: open{}, time: 2}.
state.Lock{id: created{thread: 1, time: 2}, state: open{}, time: 3}.
state.Lock{id: created{thread: 1, time: 2}, state: running{}, time: 12}.

main {
  lock = prim.newLock();
  block.acquireLock(lock);
  forkTo afterFork;
  t = 5;
  block.sleep(t);
  releaseLock(lock);
  goto end;
}
afterFork {
  block.acquireLock(lock);
  x5 = 10;
}
end {}
debug.doubleLockHolder{}?
----
application/datalog

main {
  lock1 = prim.newLock();
  lock2 = prim.newLock();
  block.acquireLock(lock1);
  forkTo afterFork;
  t = 5;
  block.sleep(t);
  block.acquireLock(lock2);
}
afterFork {
  block.acquireLock(lock2);
  block.acquireLock(lock1);
}
end {}
issue.Deadlock{}?
----
application/datalog
issue.Deadlock{thread1: 1, thread2: 106, time: 13}.
issue.Deadlock{thread1: 1, thread2: 106, time: 14}.
issue.Deadlock{thread1: 1, thread2: 106, time: 15}.
issue.Deadlock{thread1: 1, thread2: 106, time: 16}.
issue.Deadlock{thread1: 1, thread2: 106, time: 17}.
issue.Deadlock{thread1: 1, thread2: 106, time: 18}.
issue.Deadlock{thread1: 1, thread2: 106, time: 19}.
issue.Deadlock{thread1: 1, thread2: 106, time: 20}.
issue.Deadlock{thread1: 1, thread2: 106, time: 21}.
issue.Deadlock{thread1: 1, thread2: 106, time: 22}.
issue.Deadlock{thread1: 1, thread2: 106, time: 23}.
issue.Deadlock{thread1: 1, thread2: 106, time: 24}.
issue.Deadlock{thread1: 1, thread2: 106, time: 25}.
issue.Deadlock{thread1: 1, thread2: 106, time: 26}.
issue.Deadlock{thread1: 1, thread2: 106, time: 27}.
issue.Deadlock{thread1: 1, thread2: 106, time: 28}.
issue.Deadlock{thread1: 1, thread2: 106, time: 29}.
issue.Deadlock{thread1: 1, thread2: 106, time: 30}.
issue.Deadlock{thread1: 1, thread2: 106, time: 31}.
issue.Deadlock{thread1: 1, thread2: 106, time: 32}.
issue.Deadlock{thread1: 1, thread2: 106, time: 33}.
issue.Deadlock{thread1: 1, thread2: 106, time: 34}.
issue.Deadlock{thread1: 1, thread2: 106, time: 35}.
issue.Deadlock{thread1: 1, thread2: 106, time: 36}.
issue.Deadlock{thread1: 1, thread2: 106, time: 37}.
issue.Deadlock{thread1: 1, thread2: 106, time: 38}.
issue.Deadlock{thread1: 1, thread2: 106, time: 39}.
issue.Deadlock{thread1: 1, thread2: 106, time: 40}.
issue.Deadlock{thread1: 1, thread2: 106, time: 41}.
issue.Deadlock{thread1: 1, thread2: 106, time: 42}.
issue.Deadlock{thread1: 1, thread2: 106, time: 43}.
issue.Deadlock{thread1: 1, thread2: 106, time: 44}.
issue.Deadlock{thread1: 1, thread2: 106, time: 45}.
issue.Deadlock{thread1: 1, thread2: 106, time: 46}.
issue.Deadlock{thread1: 1, thread2: 106, time: 47}.
issue.Deadlock{thread1: 1, thread2: 106, time: 48}.
issue.Deadlock{thread1: 1, thread2: 106, time: 49}.
issue.Deadlock{thread1: 1, thread2: 106, time: 50}.
