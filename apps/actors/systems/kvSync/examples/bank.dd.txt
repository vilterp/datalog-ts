addClient{id: "0"}.
runMutation{from: "0", name: "deposit", args: ["foo", 10]}.
runMutation{from: "0", name: "deposit", args: ["bar", 10]}.
runMutation{from: "0", name: "move", args: ["foo", "bar", 5]}.
runMutation{from: "0", name: "move", args: ["foo", "bar", 5]}.
hop{}?
----
application/datalog
hop{from: tick{place: "client0", time: 12}, message: MutationRequest{interpState: InterpreterState{randSeed: 5046918}, invocation: Invocation{args: ["bar",10], name: "deposit"}, trace: [Read{key: "bar", transactionID: "-1"},Write{key: "bar", value: 10}], txnID: "4540893"}, to: tick{place: "server", time: 14}}.
hop{from: tick{place: "client0", time: 19}, message: MutationRequest{interpState: InterpreterState{randSeed: 746088}, invocation: Invocation{args: ["foo","bar",5], name: "move"}, trace: [Read{key: "foo", transactionID: "10698"},Read{key: "bar", transactionID: "4540893"},Write{key: "foo", value: 5},Write{key: "bar", value: 15}], txnID: "3045903"}, to: tick{place: "server", time: 21}}.
hop{from: tick{place: "client0", time: 26}, message: MutationRequest{interpState: InterpreterState{randSeed: 1974273}, invocation: Invocation{args: ["foo","bar",5], name: "move"}, trace: [Read{key: "foo", transactionID: "3045903"},Read{key: "bar", transactionID: "3045903"},Write{key: "foo", value: 0},Write{key: "bar", value: 20}], txnID: "1820643"}, to: tick{place: "server", time: 28}}.
hop{from: tick{place: "client0", time: 5}, message: MutationRequest{interpState: InterpreterState{randSeed: 2502798}, invocation: Invocation{args: ["foo",10], name: "deposit"}, trace: [Read{key: "foo", transactionID: "-1"},Write{key: "foo", value: 10}], txnID: "10698"}, to: tick{place: "server", time: 7}}.
hop{from: tick{place: "server", time: 14}, message: MutationResponse{payload: Accept{timestamp: 1}, txnID: "4540893"}, to: tick{place: "client0", time: 16}}.
hop{from: tick{place: "server", time: 21}, message: MutationResponse{payload: Accept{timestamp: 2}, txnID: "3045903"}, to: tick{place: "client0", time: 23}}.
hop{from: tick{place: "server", time: 28}, message: MutationResponse{payload: Accept{timestamp: 3}, txnID: "1820643"}, to: tick{place: "client0", time: 30}}.
hop{from: tick{place: "server", time: 7}, message: MutationResponse{payload: Accept{timestamp: 0}, txnID: "10698"}, to: tick{place: "client0", time: 9}}.
hop{from: tick{place: "user0", time: 10}, message: RunMutation{invocation: Invocation{args: ["bar",10], name: "deposit"}}, to: tick{place: "client0", time: 12}}.
hop{from: tick{place: "user0", time: 17}, message: RunMutation{invocation: Invocation{args: ["foo","bar",5], name: "move"}}, to: tick{place: "client0", time: 19}}.
hop{from: tick{place: "user0", time: 24}, message: RunMutation{invocation: Invocation{args: ["foo","bar",5], name: "move"}}, to: tick{place: "client0", time: 26}}.
hop{from: tick{place: "user0", time: 3}, message: RunMutation{invocation: Invocation{args: ["foo",10], name: "deposit"}}, to: tick{place: "client0", time: 5}}.

addClient{id: "0"}.
runMutation{from: "0", name: "deposit", args: ["foo", 10]}.
runMutation{from: "0", name: "deposit", args: ["bar", 10]}.
runMutation{from: "0", name: "move", args: ["foo", "bar", 5]}.
runMutation{from: "0", name: "move", args: ["foo", "bar", 5]}.
actor{}?
----
application/datalog
actor{id: "client0", initialState: ClientState{data: {}, id: "0", liveQueries: {}, mutationDefns: {"deposit": Lambda{args: ["toAccount","amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "toAccount"}}, "varName": "balanceBefore"}], body: Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, "move": Lambda{args: ["fromAccount","toAccount","amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "fromAccount"}}, "varName": "fromBalance"},{"val": Read{default: 0, key: Var{name: "toAccount"}}, "varName": "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, "withdraw": Lambda{args: ["fromAccount","amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "fromAccount"}}, "varName": "balanceBefore"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "balanceBefore"}], name: ">"}, ifFalse: Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}}, randSeed: 48, transactions: {}}, spawningTickID: 0}.
actor{id: "server", initialState: ServerState{data: {}, liveQueries: [], mutationDefns: {"deposit": Lambda{args: ["toAccount","amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "toAccount"}}, "varName": "balanceBefore"}], body: Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, "move": Lambda{args: ["fromAccount","toAccount","amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "fromAccount"}}, "varName": "fromBalance"},{"val": Read{default: 0, key: Var{name: "toAccount"}}, "varName": "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, "withdraw": Lambda{args: ["fromAccount","amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "fromAccount"}}, "varName": "balanceBefore"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "balanceBefore"}], name: ">"}, ifFalse: Write{key: Var{name: "fromAccount"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}}, time: 0, transactionMetadata: {}}, spawningTickID: 0}.
actor{id: "user0", initialState: UserState{}, spawningTickID: 0}.
