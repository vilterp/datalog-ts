addClient{id: "0"}.
runMutation{from: "0", name: "Deposit", args: ["foo", 10]}.
runMutation{from: "0", name: "Deposit", args: ["bar", 10]}.
runMutation{from: "0", name: "Transfer", args: ["foo", "bar", 5]}.
runMutation{from: "0", name: "Transfer", args: ["foo", "bar", 5]}.
hop{}?
----
application/datalog
hop{from: tick{place: "user0", time: 12}, message: RunMutation{invocation: Invocation{args: ["foo","bar",5], name: "Transfer"}}, to: tick{place: "client0", time: 14}}.
hop{from: tick{place: "user0", time: 3}, message: RunMutation{invocation: Invocation{args: ["foo",10], name: "Deposit"}}, to: tick{place: "client0", time: 5}}.
hop{from: tick{place: "user0", time: 6}, message: RunMutation{invocation: Invocation{args: ["bar",10], name: "Deposit"}}, to: tick{place: "client0", time: 8}}.
hop{from: tick{place: "user0", time: 9}, message: RunMutation{invocation: Invocation{args: ["foo","bar",5], name: "Transfer"}}, to: tick{place: "client0", time: 11}}.

addClient{id: "0"}.
runMutation{from: "0", name: "Deposit", args: ["foo", 10]}.
runMutation{from: "0", name: "Deposit", args: ["bar", 10]}.
runMutation{from: "0", name: "Transfer", args: ["foo", "bar", 5]}.
runMutation{from: "0", name: "Transfer", args: ["foo", "bar", 5]}.
actor{}?
----
application/datalog
actor{id: "client0", initialState: ClientState{data: {}, id: "0", liveQueries: {}, loginState: LoggedOut{loggingInAs: null{}}, mutationDefns: {"CreateAccount": Lambda{args: ["name"], body: Write{key: Var{name: "name"}, val: IntLit{val: 0}}}, "Deposit": Lambda{args: ["amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "balanceBefore"}], body: Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, "Transfer": Lambda{args: ["toAccount","amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "fromBalance"},{"val": Read{default: 0, key: Var{name: "toAccount"}}, "varName": "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, "Withdraw": Lambda{args: ["amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "balanceBefore"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "balanceBefore"}], name: ">"}, ifFalse: Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}}, randSeed: 48, time: 0, transactions: {}}, spawningTickID: 0}.
actor{id: "server", initialState: ServerState{data: {}, liveQueries: [], mutationDefns: {"CreateAccount": Lambda{args: ["name"], body: Write{key: Var{name: "name"}, val: IntLit{val: 0}}}, "Deposit": Lambda{args: ["amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "balanceBefore"}], body: Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, "Transfer": Lambda{args: ["toAccount","amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "fromBalance"},{"val": Read{default: 0, key: Var{name: "toAccount"}}, "varName": "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, "Withdraw": Lambda{args: ["amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "balanceBefore"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "balanceBefore"}], name: ">"}, ifFalse: Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}}, randSeed: 1234, time: 0, transactionMetadata: {"0": {"invocation": Invocation{args: [], name: "Initial"}, "serverTimestamp": 0}}, userSessions: {}, users: {}}, spawningTickID: 0}.
actor{id: "user0", initialState: UserState{}, spawningTickID: 0}.
