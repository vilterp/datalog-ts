addClient{id: "0"}.
signUp{clientID: "0", username: "bob", password: "foo"}.
runMutation{from: "0", name: "Deposit", args: [10]}.
runMutation{from: "0", name: "Deposit", args: [10]}.
hop{}?
----
application/datalog
hop{from: tick{place: "client0", time: 12}, message: AuthenticatedRequest{request: MutationRequest{interpState: InterpreterState{randSeed: 2502798}, invocation: Invocation{args: [10], name: "Deposit"}, trace: [Read{key: "bob", transactionID: "-1"},Write{desc: Insert{after: {"transactionID": "10698", "value": 10}}, key: "bob"}], txnID: "10698"}, token: "0.009657739204967151"}, to: tick{place: "server", time: 14}}.
hop{from: tick{place: "client0", time: 19}, message: AuthenticatedRequest{request: MutationRequest{interpState: InterpreterState{randSeed: 5046918}, invocation: Invocation{args: [10], name: "Deposit"}, trace: [Read{key: "bob", transactionID: "10698"},Write{desc: Update{after: {"transactionID": "4540893", "value": 20}, before: {"transactionID": "10698", "value": 10}}, key: "bob"}], txnID: "4540893"}, token: "0.009657739204967151"}, to: tick{place: "server", time: 21}}.
hop{from: tick{place: "client0", time: 5}, message: SignupRequest{password: "foo", username: "bob"}, to: tick{place: "server", time: 7}}.
hop{from: tick{place: "server", time: 14}, message: MutationResponse{payload: Accept{timestamp: 0}, txnID: "10698"}, to: tick{place: "client0", time: 16}}.
hop{from: tick{place: "server", time: 21}, message: MutationResponse{payload: Accept{timestamp: 1}, txnID: "4540893"}, to: tick{place: "client0", time: 23}}.
hop{from: tick{place: "server", time: 7}, message: SignupResponse{response: Success{token: "0.009657739204967151"}}, to: tick{place: "client0", time: 9}}.
hop{from: tick{place: "user0", time: 10}, message: RunMutation{invocation: Invocation{args: [10], name: "Deposit"}}, to: tick{place: "client0", time: 12}}.
hop{from: tick{place: "user0", time: 17}, message: RunMutation{invocation: Invocation{args: [10], name: "Deposit"}}, to: tick{place: "client0", time: 19}}.
hop{from: tick{place: "user0", time: 3}, message: Signup{password: "foo", username: "bob"}, to: tick{place: "client0", time: 5}}.

addClient{id: "0"}.
signUp{clientID: "0", username: "bob", password: "foo"}.
runMutation{from: "0", name: "Deposit", args: [10]}.
runMutation{from: "0", name: "Deposit", args: [10]}.
tickState{}?
----
application/datalog
tickState{actorID: "client0", state: ClientState{data: {"bob": [{"transactionID": "10698", "value": 10},{"transactionID": "4540893", "value": 20}]}, id: "0", liveQueries: {}, loginState: LoggedIn{loggingOut: false, token: "0.009657739204967151", username: "bob"}, mutationDefns: {"CreateAccount": Lambda{args: ["name"], body: Write{key: Var{name: "name"}, val: IntLit{val: 0}}}, "Deposit": Lambda{args: ["amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "balanceBefore"}], body: Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, "Transfer": Lambda{args: ["toAccount","amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "fromBalance"},{"val": Read{default: 0, key: Var{name: "toAccount"}}, "varName": "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, "Withdraw": Lambda{args: ["amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "balanceBefore"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "balanceBefore"}], name: ">"}, ifFalse: Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}}, randSeed: 5046918, time: 6, transactions: {"10698": {"clientTrace": [Read{key: "bob", transactionID: "-1"},Write{desc: Insert{after: {"transactionID": "10698", "value": 10}}, key: "bob"}], "fromMe": true, "invocation": Invocation{args: [10], name: "Deposit"}, "state": Committed{serverTimestamp: 0}, "writes": []}, "4540893": {"clientTrace": [Read{key: "bob", transactionID: "10698"},Write{desc: Update{after: {"transactionID": "4540893", "value": 20}, before: {"transactionID": "10698", "value": 10}}, key: "bob"}], "fromMe": true, "invocation": Invocation{args: [10], name: "Deposit"}, "state": Pending{sentTime: 5}, "writes": []}}}, tickID: 19}.
tickState{actorID: "client0", state: ClientState{data: {"bob": [{"transactionID": "10698", "value": 10}]}, id: "0", liveQueries: {}, loginState: LoggedIn{loggingOut: false, token: "0.009657739204967151", username: "bob"}, mutationDefns: {"CreateAccount": Lambda{args: ["name"], body: Write{key: Var{name: "name"}, val: IntLit{val: 0}}}, "Deposit": Lambda{args: ["amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "balanceBefore"}], body: Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, "Transfer": Lambda{args: ["toAccount","amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "fromBalance"},{"val": Read{default: 0, key: Var{name: "toAccount"}}, "varName": "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, "Withdraw": Lambda{args: ["amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "balanceBefore"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "balanceBefore"}], name: ">"}, ifFalse: Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}}, randSeed: 2502798, time: 4, transactions: {"10698": {"clientTrace": [Read{key: "bob", transactionID: "-1"},Write{desc: Insert{after: {"transactionID": "10698", "value": 10}}, key: "bob"}], "fromMe": true, "invocation": Invocation{args: [10], name: "Deposit"}, "state": Pending{sentTime: 3}, "writes": []}}}, tickID: 12}.
tickState{actorID: "client0", state: ClientState{data: {"bob": [{"transactionID": "10698", "value": 10}]}, id: "0", liveQueries: {}, loginState: LoggedIn{loggingOut: false, token: "0.009657739204967151", username: "bob"}, mutationDefns: {"CreateAccount": Lambda{args: ["name"], body: Write{key: Var{name: "name"}, val: IntLit{val: 0}}}, "Deposit": Lambda{args: ["amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "balanceBefore"}], body: Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, "Transfer": Lambda{args: ["toAccount","amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "fromBalance"},{"val": Read{default: 0, key: Var{name: "toAccount"}}, "varName": "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, "Withdraw": Lambda{args: ["amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "balanceBefore"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "balanceBefore"}], name: ">"}, ifFalse: Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}}, randSeed: 2502798, time: 5, transactions: {"10698": {"clientTrace": [Read{key: "bob", transactionID: "-1"},Write{desc: Insert{after: {"transactionID": "10698", "value": 10}}, key: "bob"}], "fromMe": true, "invocation": Invocation{args: [10], name: "Deposit"}, "state": Committed{serverTimestamp: 0}, "writes": []}}}, tickID: 16}.
tickState{actorID: "client0", state: ClientState{data: {"bob": [{"transactionID": "4540893", "value": 20}]}, id: "0", liveQueries: {}, loginState: LoggedIn{loggingOut: false, token: "0.009657739204967151", username: "bob"}, mutationDefns: {"CreateAccount": Lambda{args: ["name"], body: Write{key: Var{name: "name"}, val: IntLit{val: 0}}}, "Deposit": Lambda{args: ["amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "balanceBefore"}], body: Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, "Transfer": Lambda{args: ["toAccount","amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "fromBalance"},{"val": Read{default: 0, key: Var{name: "toAccount"}}, "varName": "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, "Withdraw": Lambda{args: ["amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "balanceBefore"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "balanceBefore"}], name: ">"}, ifFalse: Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}}, randSeed: 5046918, time: 7, transactions: {"4540893": {"clientTrace": [Read{key: "bob", transactionID: "10698"},Write{desc: Update{after: {"transactionID": "4540893", "value": 20}, before: {"transactionID": "10698", "value": 10}}, key: "bob"}], "fromMe": true, "invocation": Invocation{args: [10], name: "Deposit"}, "state": Committed{serverTimestamp: 1}, "writes": []}}}, tickID: 23}.
tickState{actorID: "client0", state: ClientState{data: {}, id: "0", liveQueries: {}, loginState: LoggedIn{loggingOut: false, token: "0.009657739204967151", username: "bob"}, mutationDefns: {"CreateAccount": Lambda{args: ["name"], body: Write{key: Var{name: "name"}, val: IntLit{val: 0}}}, "Deposit": Lambda{args: ["amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "balanceBefore"}], body: Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, "Transfer": Lambda{args: ["toAccount","amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "fromBalance"},{"val": Read{default: 0, key: Var{name: "toAccount"}}, "varName": "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, "Withdraw": Lambda{args: ["amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "balanceBefore"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "balanceBefore"}], name: ">"}, ifFalse: Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}}, randSeed: 48, time: 3, transactions: {}}, tickID: 9}.
tickState{actorID: "client0", state: ClientState{data: {}, id: "0", liveQueries: {}, loginState: LoggedOut{loggingInAs: "bob"}, mutationDefns: {"CreateAccount": Lambda{args: ["name"], body: Write{key: Var{name: "name"}, val: IntLit{val: 0}}}, "Deposit": Lambda{args: ["amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "balanceBefore"}], body: Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, "Transfer": Lambda{args: ["toAccount","amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "fromBalance"},{"val": Read{default: 0, key: Var{name: "toAccount"}}, "varName": "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, "Withdraw": Lambda{args: ["amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "balanceBefore"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "balanceBefore"}], name: ">"}, ifFalse: Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}}, randSeed: 48, time: 2, transactions: {}}, tickID: 5}.
tickState{actorID: "client0", state: ClientState{data: {}, id: "0", liveQueries: {}, loginState: LoggedOut{loggingInAs: null{}}, mutationDefns: {"CreateAccount": Lambda{args: ["name"], body: Write{key: Var{name: "name"}, val: IntLit{val: 0}}}, "Deposit": Lambda{args: ["amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "balanceBefore"}], body: Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, "Transfer": Lambda{args: ["toAccount","amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "fromBalance"},{"val": Read{default: 0, key: Var{name: "toAccount"}}, "varName": "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, "Withdraw": Lambda{args: ["amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "balanceBefore"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "balanceBefore"}], name: ">"}, ifFalse: Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}}, randSeed: 48, time: 1, transactions: {}}, tickID: 2}.
tickState{actorID: "server", state: ServerState{data: {"bob": [{"transactionID": "10698", "value": 10},{"transactionID": "4540893", "value": 20}]}, liveQueries: [], mutationDefns: {"CreateAccount": Lambda{args: ["name"], body: Write{key: Var{name: "name"}, val: IntLit{val: 0}}}, "Deposit": Lambda{args: ["amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "balanceBefore"}], body: Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, "Transfer": Lambda{args: ["toAccount","amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "fromBalance"},{"val": Read{default: 0, key: Var{name: "toAccount"}}, "varName": "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, "Withdraw": Lambda{args: ["amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "balanceBefore"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "balanceBefore"}], name: ">"}, ifFalse: Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}}, randSeed: 20739838, time: 2, transactionMetadata: {"0": {"invocation": Invocation{args: [], name: "Initial"}, "serverTimestamp": 0}, "10698": {"invocation": Invocation{args: [10], name: "Deposit"}, "serverTimestamp": 0}, "4540893": {"invocation": Invocation{args: [10], name: "Deposit"}, "serverTimestamp": 1}}, userSessions: {"0.009657739204967151": "bob"}, users: {"bob": "foo"}}, tickID: 21}.
tickState{actorID: "server", state: ServerState{data: {"bob": [{"transactionID": "10698", "value": 10}]}, liveQueries: [], mutationDefns: {"CreateAccount": Lambda{args: ["name"], body: Write{key: Var{name: "name"}, val: IntLit{val: 0}}}, "Deposit": Lambda{args: ["amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "balanceBefore"}], body: Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, "Transfer": Lambda{args: ["toAccount","amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "fromBalance"},{"val": Read{default: 0, key: Var{name: "toAccount"}}, "varName": "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, "Withdraw": Lambda{args: ["amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "balanceBefore"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "balanceBefore"}], name: ">"}, ifFalse: Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}}, randSeed: 20739838, time: 1, transactionMetadata: {"0": {"invocation": Invocation{args: [], name: "Initial"}, "serverTimestamp": 0}, "10698": {"invocation": Invocation{args: [10], name: "Deposit"}, "serverTimestamp": 0}}, userSessions: {"0.009657739204967151": "bob"}, users: {"bob": "foo"}}, tickID: 14}.
tickState{actorID: "server", state: ServerState{data: {}, liveQueries: [], mutationDefns: {"CreateAccount": Lambda{args: ["name"], body: Write{key: Var{name: "name"}, val: IntLit{val: 0}}}, "Deposit": Lambda{args: ["amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "balanceBefore"}], body: Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, "Transfer": Lambda{args: ["toAccount","amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "fromBalance"},{"val": Read{default: 0, key: Var{name: "toAccount"}}, "varName": "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, "Withdraw": Lambda{args: ["amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "balanceBefore"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "balanceBefore"}], name: ">"}, ifFalse: Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}}, randSeed: 1234, time: 0, transactionMetadata: {"0": {"invocation": Invocation{args: [], name: "Initial"}, "serverTimestamp": 0}}, userSessions: {}, users: {}}, tickID: 0}.
tickState{actorID: "server", state: ServerState{data: {}, liveQueries: [], mutationDefns: {"CreateAccount": Lambda{args: ["name"], body: Write{key: Var{name: "name"}, val: IntLit{val: 0}}}, "Deposit": Lambda{args: ["amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "balanceBefore"}], body: Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "+"}}}}, "Transfer": Lambda{args: ["toAccount","amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "fromBalance"},{"val": Read{default: 0, key: Var{name: "toAccount"}}, "varName": "toBalance"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "fromBalance"}], name: ">"}, ifFalse: Do{ops: [Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "fromBalance"},Var{name: "amount"}], name: "-"}},Write{key: Var{name: "toAccount"}, val: Apply{args: [Var{name: "toBalance"},Var{name: "amount"}], name: "+"}}]}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}, "Withdraw": Lambda{args: ["amount"], body: Let{bindings: [{"val": Read{default: 0, key: Var{name: "curUser"}}, "varName": "balanceBefore"}], body: If{cond: Apply{args: [Var{name: "amount"},Var{name: "balanceBefore"}], name: ">"}, ifFalse: Write{key: Var{name: "curUser"}, val: Apply{args: [Var{name: "balanceBefore"},Var{name: "amount"}], name: "-"}}, ifTrue: Abort{reason: StringLit{val: "balance not high enough"}}}}}}, randSeed: 20739838, time: 0, transactionMetadata: {"0": {"invocation": Invocation{args: [], name: "Initial"}, "serverTimestamp": 0}}, userSessions: {"0.009657739204967151": "bob"}, users: {"bob": "foo"}}, tickID: 7}.
tickState{actorID: "user0", state: UserState{}, tickID: 10}.
tickState{actorID: "user0", state: UserState{}, tickID: 17}.
tickState{actorID: "user0", state: UserState{}, tickID: 1}.
tickState{actorID: "user0", state: UserState{}, tickID: 3}.
