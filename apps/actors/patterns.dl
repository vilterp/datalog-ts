.table actor
.table message
.table tick
.table timeout
# maybe this should be declared internally
.table internal.visualization

# TODO: is this enough, or do messages need to say a specific message id
#   that they're responding to?
requestResponse{
  fromActorID: ClientActor,
  toActorID: ServerActor,
  request: Req,
  response: Resp,
  sendTick: SendTick,
  respondTick: RespondTick,
  handleResponseTick: HandleResponseTick
} :-
  message{id: ReqID, fromTickID: SendTick, payload: Req} &
  tick{id: SendTick, actorID: ClientActor} &
  tick{id: RespondTick, actorID: ServerActor, initiator: messageReceived{messageID: ReqID}} &
  message{id: RespID, fromTickID: RespondTick, toActorID: ClientActor, payload: Resp} &
  tick{id: HandleResponseTick, actorID: ClientActor, initiator: messageReceived{messageID: RespID}}.

internal.visualization{
  name: "Sequence",
  spec: sequence{
    actors: actor{id: ID},
    hops: hop{from: FromTick, to: ToTick},
  }
}.

messageFromActor{id: ID, fromActorID: FromActor, toActorID: ToActor, payload: Payload} :-
  message{id: ID, fromTickID: FromTick, toActorID: ToActor, payload: Payload} &
  tick{id: FromTick, actorID: FromActor}.

hop{
  from: tick{time: FromTickID, place: FromActorID},
  to: tick{time: ToTickID, place: ToActorID},
  message: Payload,
} :-
  message{id: MessageID, fromTickID: FromTickID, toActorID: ToActorID, payload: Payload} &
  tick{id: FromTickID, actorID: FromActorID} &
  tick{id: ToTickID, actorID: ToActorID, initiator: messageReceived{messageID: MessageID}}.

# TODO: this causes an error in the incr interp; not sure what it is
# savePush{saveMessageID: SaveMsgID, todo: T, from: FromID, to: ToID} :-
#   tick{id: FromTick, actorID: FromID} &
#   message{fromTickID: FromTick, id: SaveMsgID, payload: putTodo{todo: T}} &
#   tick{initiator: messageReceived{messageID: SaveMsgID}, id: PersistTick, actorID: "server"} &
#   message{fromTickID: PersistTick, toActorID: ToID, payload: subscriptionUpdate{todo: T}}.

tickState{tickID: TickID, actorID: ActorID, state: State} :-
  tick{id: TickID, actorID: ActorID, resp: continue{state: State}}.

concurrentRequest{
  tick1: tick{place: Client1, time: TC1},
  message1: M1,
  tick2: tick{place: Client2, time: TC2},
  message2: M2,
} :-
  hop{from: tick{place: Client1, time: TC1}, to: tick{time: TS1, place: "server"}, message: M1} &
  hop{from: tick{place: Client2, time: TC2}, to: tick{time: TS2, place: "server"}, message: M2} &
  TC1 < TC2 &
  TC2 < TS1.

kvSync.abort{
  fromActorID: ClientActor,
  toActorID: ServerActor,
  invocation: Invocation,
  abortReason: Reason,
  clientTrace: Trace,
  txnID: TxnID,
  sendTick: SendTick,
} :-
  requestResponse{
    fromActorID: ClientActor,
    toActorID: ServerActor,
    request: MutationRequest{invocation: Invocation, trace: Trace},
    response: MutationResponse{txnID: TxnID, payload: Reject{reason: Reason}},
    sendTick: SendTick,
    respondTick: RespondTick,
    handleResponseTick: HandleResponseTick
  }.
