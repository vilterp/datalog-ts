grandfather{grandchild: A, grandfather: C} :-
  parent{child: A, parent: B} &
  father{child: B, father: C}.
----
text/plain
function grandfather(db) {
  const out = [];
  for (const parent_item_0 of db.tables.parent) {
    const match0 = ctx.unify({}, parent_item_0, ctx.rec("parent", {
      child: ctx.varr("A"),
      parent: ctx.varr("B")
    }));
    console.log({
      match0: match0
    });
    if (match0 !== null) {
      const bindings0 = ctx.unifyVars(match0, {});
      console.log({
        bindings0: bindings0
      });
      for (const father_item_1 of db.tables.father) {
        const match1 = ctx.unify(bindings0, father_item_1, ctx.rec("father", {
          child: ctx.varr("B"),
          father: ctx.varr("C")
        }));
        console.log({
          match1: match1
        });
        if (match1 !== null) {
          const bindings1 = ctx.unifyVars(match1, bindings0);
          console.log({
            bindings1: bindings1
          });
          out.push(ctx.substitute(ctx.rec("grandfather", {
            grandchild: ctx.varr("A"),
            grandfather: ctx.varr("C")
          }), bindings1));
        }
      }
    }
  }
  return out;
}

greatGrandfather{grandchild: A, grandfather: D} :-
  parent{child: A, parent: B} &
  parent{child: B, parent: C} &
  father{child: C, father: D}.
----
text/plain
function greatGrandfather(db) {
  const out = [];
  for (const parent_item_0 of db.tables.parent) {
    const match0 = ctx.unify({}, parent_item_0, ctx.rec("parent", {
      child: ctx.varr("A"),
      parent: ctx.varr("B")
    }));
    console.log({
      match0: match0
    });
    if (match0 !== null) {
      const bindings0 = ctx.unifyVars(match0, {});
      console.log({
        bindings0: bindings0
      });
      for (const parent_item_1 of db.tables.parent) {
        const match1 = ctx.unify(bindings0, parent_item_1, ctx.rec("parent", {
          child: ctx.varr("B"),
          parent: ctx.varr("C")
        }));
        console.log({
          match1: match1
        });
        if (match1 !== null) {
          const bindings1 = ctx.unifyVars(match1, bindings0);
          console.log({
            bindings1: bindings1
          });
          for (const father_item_2 of db.tables.father) {
            const match2 = ctx.unify(bindings1, father_item_2, ctx.rec("father", {
              child: ctx.varr("C"),
              father: ctx.varr("D")
            }));
            console.log({
              match2: match2
            });
            if (match2 !== null) {
              const bindings2 = ctx.unifyVars(match2, bindings1);
              console.log({
                bindings2: bindings2
              });
              out.push(ctx.substitute(ctx.rec("greatGrandfather", {
                grandchild: ctx.varr("A"),
                grandfather: ctx.varr("D")
              }), bindings2));
            }
          }
        }
      }
    }
  }
  return out;
}
