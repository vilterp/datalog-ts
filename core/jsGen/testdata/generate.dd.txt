grandfather{grandchild: A, grandfather: C} :-
  parent{child: A, parent: B} &
  father{child: B, father: C}.
----
text/plain
function grandfather(db) {
  const out = [];
  for (const parent_item_0 of db.tables.parent) {
    const bindings0 = context.unify({}, parent_item_0, {
      type: "Record",
      relation: "parent",
      attrs: {
        child: {
          type: "Var",
          name: "A"
        },
        parent: {
          type: "Var",
          name: "B"
        }
      }
    });
    if (bindings0 !== null) {
      for (const father_item_1 of db.tables.father) {
        const bindings1 = context.unify(bindings0, father_item_1, {
          type: "Record",
          relation: "father",
          attrs: {
            child: {
              type: "Var",
              name: "B"
            },
            father: {
              type: "Var",
              name: "C"
            }
          }
        });
        if (bindings1 !== null) {
          out.push(context.substitute({
            type: "Record",
            relation: "grandfather",
            attrs: {
              grandchild: {
                type: "Var",
                name: "A"
              },
              grandfather: {
                type: "Var",
                name: "C"
              }
            }
          }, bindings1));
        }
      }
    }
  }
  return out;
}

greatGrandfather{grandchild: A, grandfather: D} :-
  parent{child: A, parent: B} &
  parent{child: B, parent: C} &
  father{child: C, father: D}.
----
text/plain
function greatGrandfather(db) {
  const out = [];
  for (const parent_item_0 of db.tables.parent) {
    const bindings0 = context.unify({}, parent_item_0, {
      type: "Record",
      relation: "parent",
      attrs: {
        child: {
          type: "Var",
          name: "A"
        },
        parent: {
          type: "Var",
          name: "B"
        }
      }
    });
    if (bindings0 !== null) {
      for (const parent_item_1 of db.tables.parent) {
        const bindings1 = context.unify(bindings0, parent_item_1, {
          type: "Record",
          relation: "parent",
          attrs: {
            child: {
              type: "Var",
              name: "B"
            },
            parent: {
              type: "Var",
              name: "C"
            }
          }
        });
        if (bindings1 !== null) {
          for (const father_item_2 of db.tables.father) {
            const bindings2 = context.unify(bindings1, father_item_2, {
              type: "Record",
              relation: "father",
              attrs: {
                child: {
                  type: "Var",
                  name: "C"
                },
                father: {
                  type: "Var",
                  name: "D"
                }
              }
            });
            if (bindings2 !== null) {
              out.push(context.substitute({
                type: "Record",
                relation: "greatGrandfather",
                attrs: {
                  grandchild: {
                    type: "Var",
                    name: "A"
                  },
                  grandfather: {
                    type: "Var",
                    name: "D"
                  }
                }
              }, bindings2));
            }
          }
        }
      }
    }
  }
  return out;
}
