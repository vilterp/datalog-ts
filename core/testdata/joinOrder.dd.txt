graph
ide.DefnForCursor{defnSpan: DS} :-
  ide.Cursor{idx: CIdx} &
  scope.Var{span: span{from: FIdx, to: TIdx}, name: N, scopeID: Scope} &
  FIdx <= CIdx & CIdx <= TIdx &
  scope.Usage{name: N, usageScopeID: Scope, defnSpan: DS}.
----
application/graphviz
digraph G {
  "0" [label="ide.Cursor" shape="box"];
  "1" [label="scope.Var" shape="box"];
  "2" [label="base.lte" shape="box"];
  "3" [label="base.lte" shape="box"];
  "4" [label="scope.Usage" shape="box"];
  "5" [label="CIdx"];
  "6" [label="FIdx"];
  "7" [label="TIdx"];
  "8" [label="N"];
  "9" [label="Scope"];
  "10" [label="DS"];
  "0" -> "5" [label="idx"];
  "1" -> "6" [label="span.from"];
  "1" -> "7" [label="span.from"];
  "1" -> "8" [label="span.from"];
  "1" -> "9" [label="span.from"];
  "2" -> "6" [label="span.to"];
  "2" -> "5" [label="span.to"];
  "3" -> "5" [label="name"];
  "3" -> "7" [label="name"];
  "4" -> "8" [label="scopeID"];
  "4" -> "9" [label="scopeID"];
  "4" -> "10" [label="scopeID"];
}

order
ide.DefnForCursor{defnSpan: DS} :-
  ide.Cursor{idx: CIdx} &
  scope.Var{span: span{from: FIdx, to: TIdx}, name: N, scopeID: Scope} &
  FIdx <= CIdx & CIdx <= TIdx &
  scope.Usage{name: N, usageScopeID: Scope, defnSpan: DS}.
----
application/json
[
  "scope.Usage",
  "base.lte",
  "base.lte",
  "scope.Var",
  "ide.Cursor"
]

graph
parse.ruleMatchParent{
  child: match{rule: ChildRule, span: span{from: ChildStartCh, to: ChildEndCh}},
  parent: match{rule: ParentRule, span: span{from: ParentStartCh, to: ParentEndCh}},
} :-
  parse.ruleMatch{rule: ParentRule, span: span{from: ParentStartCh, to: ParentEndCh}} &
  parse.ruleMatch{rule: ChildRule, span: span{from: ChildStartCh, to: ChildEndCh}} &
  grammar.rule{name: ParentRule, from: ParentStartSt} &
  grammar.rule{name: ChildRule, from: ChildStartSt} &
  grammar.refEdge{from: RefSt, ref: ChildRule} &
  grammar.stateReachable{from: ParentStartSt, to: RefSt} &
  parse.State{state: RefSt, char: ChildStartCh} &
  parse.callRule{
    from: st{state: RefSt, char: ChildStartCh},
    to: st{state: ChildStartSt, char: ChildStartCh}
  }.
----
application/graphviz
digraph G {
  "0" [label="parse.ruleMatch" shape="box"];
  "1" [label="parse.ruleMatch" shape="box"];
  "2" [label="grammar.rule" shape="box"];
  "3" [label="grammar.rule" shape="box"];
  "4" [label="grammar.refEdge" shape="box"];
  "5" [label="grammar.stateReachable" shape="box"];
  "6" [label="parse.State" shape="box"];
  "7" [label="parse.callRule" shape="box"];
  "8" [label="ParentRule"];
  "9" [label="ParentStartCh"];
  "10" [label="ParentEndCh"];
  "11" [label="ChildRule"];
  "12" [label="ChildStartCh"];
  "13" [label="ChildEndCh"];
  "14" [label="ParentStartSt"];
  "15" [label="ChildStartSt"];
  "16" [label="RefSt"];
  "0" -> "8" [label="rule"];
  "0" -> "9" [label="rule"];
  "0" -> "10" [label="rule"];
  "1" -> "11" [label="span.from"];
  "1" -> "12" [label="span.from"];
  "1" -> "13" [label="span.from"];
  "2" -> "8" [label="span.to"];
  "2" -> "14" [label="span.to"];
  "3" -> "11" [label="rule"];
  "3" -> "15" [label="rule"];
  "4" -> "16" [label="span.from"];
  "4" -> "11" [label="span.from"];
  "5" -> "14" [label="span.to"];
  "5" -> "16" [label="span.to"];
  "6" -> "16" [label="name"];
  "6" -> "12" [label="name"];
  "7" -> "16" [label="from"];
  "7" -> "12" [label="from"];
  "7" -> "15" [label="from"];
}

order
parse.ruleMatchParent{
  child: match{rule: ChildRule, span: span{from: ChildStartCh, to: ChildEndCh}},
  parent: match{rule: ParentRule, span: span{from: ParentStartCh, to: ParentEndCh}},
} :-
  parse.ruleMatch{rule: ParentRule, span: span{from: ParentStartCh, to: ParentEndCh}} &
  parse.ruleMatch{rule: ChildRule, span: span{from: ChildStartCh, to: ChildEndCh}} &
  grammar.rule{name: ParentRule, from: ParentStartSt} &
  grammar.rule{name: ChildRule, from: ChildStartSt} &
  grammar.refEdge{from: RefSt, ref: ChildRule} &
  grammar.stateReachable{from: ParentStartSt, to: RefSt} &
  parse.State{state: RefSt, char: ChildStartCh} &
  parse.callRule{
    from: st{state: RefSt, char: ChildStartCh},
    to: st{state: ChildStartSt, char: ChildStartCh}
  }.
----
application/json
[
  "parse.callRule",
  "parse.State",
  "grammar.stateReachable",
  "grammar.refEdge",
  "grammar.rule",
  "grammar.rule",
  "parse.ruleMatch",
  "parse.ruleMatch"
]
