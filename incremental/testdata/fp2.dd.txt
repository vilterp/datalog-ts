.load fp/dl/ast.dl
----
text/plain

.load fp/dl/typecheck.dl
----
text/plain

.rulegraph
----
application/graphviz
digraph G {
  "0" [color="black" label="0: Union []" shape="box"];
  "1" [color="black" label="1: Union []" shape="box"];
  "2" [color="black" label="2: Join(ast.LetExpr & ast.Expr): ast.ParentExpr []" shape="box"];
  "3" [color="black" label="3: Join(ast.LetExpr & ast.Expr): ast.ParentExpr []" shape="box"];
  "4" [color="black" label="4: Join(ast.FuncCall & ast.Expr): ast.ParentExpr []" shape="box"];
  "5" [color="black" label="5: Join(ast.FuncCall & ast.Expr): ast.ParentExpr []" shape="box"];
  "6" [color="black" label="6: Join(ast.Lambda & ast.Expr): ast.ParentExpr []" shape="box"];
  "7" [color="black" label="7: Union []" shape="box"];
  "8" [color="black" label="8: Join(tc.Type & ast.FuncCall): tc.typeFC []" shape="box"];
  "9" [color="black" label="9: Join(tc.Type & 8): tc.typeFC []" shape="box"];
  "10" [color="black" label="10: Join(tc.Type & ast.LetExpr): tc.typeLet []" shape="box"];
  "11" [color="black" label="11: Join(tc.ScopeItem & ast.Var): tc.typeVar []" shape="box"];
  "12" [color="black" label="12: Join(ast.Lambda & ast.LambdaParam): tc.typeLambda []" shape="box"];
  "13" [color="black" label="13: Join(tc.Type & 12): tc.typeLambda []" shape="box"];
  "14" [color="black" label="14: Union []" shape="box"];
  "15" [color="black" label="15: Join(tc.ScopeItem & tc.parentScope): tc.ScopeItem []" shape="box"];
  "16" [color="black" label="16: Join(lang.Builtin & ast.RootExpr): tc.scopeBuiltin []" shape="box"];
  "17" [color="black" label="17: Join(tc.Type & ast.LetExpr): tc.scopeLet []" shape="box"];
  "18" [color="black" label="18: Join(ast.LambdaParam & ast.Lambda): tc.scopeLambda []" shape="box"];
  "19" [color="black" label="19: Union []" shape="box"];
  "ast.RootExpr" [color="black" label="ast.RootExpr: Base []" shape="box"];
  "ast.StringLit" [color="black" label="ast.StringLit: Base []" shape="box"];
  "ast.IntLit" [color="black" label="ast.IntLit: Base []" shape="box"];
  "ast.LetExpr" [color="black" label="ast.LetExpr: Base []" shape="box"];
  "ast.Lambda" [color="black" label="ast.Lambda: Base []" shape="box"];
  "ast.LambdaParam" [color="black" label="ast.LambdaParam: Base []" shape="box"];
  "ast.FuncCall" [color="black" label="ast.FuncCall: Base []" shape="box"];
  "ast.Var" [color="black" label="ast.Var: Base []" shape="box"];
  "ast.Placeholder" [color="black" label="ast.Placeholder: Base []" shape="box"];
  "ast.Expr" [color="black" label="ast.Expr: Subst(ast.Expr{id: I, location: S}) []" shape="box"];
  "ast.ParentExpr" [color="black" label="ast.ParentExpr: Subst(ast.ParentExpr{id: I, parent: P, span: S}) []" shape="box"];
  "lang.Builtin" [color="black" label="lang.Builtin: Base []" shape="box"];
  "tc.Type" [color="black" label="tc.Type: Subst(tc.Type{id: I, type: T}) []" shape="box"];
  "tc.typeS" [color="black" label="tc.typeS: Subst(tc.typeS{id: I, type: \"string\"}) []" shape="box"];
  "tc.typeI" [color="black" label="tc.typeI: Subst(tc.typeI{id: I, type: \"int\"}) []" shape="box"];
  "tc.typeFC" [color="black" label="tc.typeFC: Subst(tc.typeFC{id: I, type: T}) []" shape="box"];
  "tc.typeLet" [color="black" label="tc.typeLet: Subst(tc.typeLet{id: I, type: T}) []" shape="box"];
  "tc.typeVar" [color="black" label="tc.typeVar: Subst(tc.typeVar{id: I, type: T}) []" shape="box"];
  "tc.typeLambda" [color="black" label="tc.typeLambda: Subst(tc.typeLambda{id: I, type: tapp{from: F, to: R}}) []" shape="box"];
  "tc.typePlaceholder" [color="black" label="tc.typePlaceholder: Subst(tc.typePlaceholder{id: I, type: \"unknown\"}) []" shape="box"];
  "tc.ScopeItem" [color="black" label="tc.ScopeItem: Subst(tc.ScopeItem{id: I, location: L, name: N, type: T}) []" shape="box"];
  "tc.scopeBuiltin" [color="black" label="tc.scopeBuiltin: Subst(tc.scopeBuiltin{id: I, location: \"builtin\", name: N, type: T}) []" shape="box"];
  "tc.scopeLet" [color="black" label="tc.scopeLet: Subst(tc.scopeLet{id: I, location: L, name: N, type: T}) []" shape="box"];
  "tc.scopeLambda" [color="black" label="tc.scopeLambda: Subst(tc.scopeLambda{id: I, location: L, name: N, type: T}) []" shape="box"];
  "tc.parentScope" [color="black" label="tc.parentScope: Subst(tc.parentScope{id: I, parentID: P}) []" shape="box"];
  "0" -> "ast.Expr" [];
  "1" -> "ast.ParentExpr" [];
  "10" -> "tc.typeLet" [];
  "11" -> "tc.typeVar" [];
  "12" -> "13" [];
  "13" -> "tc.typeLambda" [];
  "14" -> "tc.ScopeItem" [];
  "15" -> "14" [];
  "16" -> "tc.scopeBuiltin" [];
  "17" -> "tc.scopeLet" [];
  "18" -> "tc.scopeLambda" [];
  "19" -> "tc.parentScope" [];
  "2" -> "1" [];
  "3" -> "1" [];
  "4" -> "1" [];
  "5" -> "1" [];
  "6" -> "1" [];
  "7" -> "tc.Type" [];
  "8" -> "9" [];
  "9" -> "tc.typeFC" [];
  "ast.Expr" -> "2" [];
  "ast.Expr" -> "3" [];
  "ast.Expr" -> "4" [];
  "ast.Expr" -> "5" [];
  "ast.Expr" -> "6" [];
  "ast.FuncCall" -> "0" [];
  "ast.FuncCall" -> "4" [];
  "ast.FuncCall" -> "5" [];
  "ast.FuncCall" -> "8" [];
  "ast.FuncCall" -> "19" [];
  "ast.FuncCall" -> "19" [];
  "ast.IntLit" -> "0" [];
  "ast.IntLit" -> "tc.typeI" [];
  "ast.Lambda" -> "0" [];
  "ast.Lambda" -> "6" [];
  "ast.Lambda" -> "12" [];
  "ast.Lambda" -> "18" [];
  "ast.Lambda" -> "19" [];
  "ast.LambdaParam" -> "12" [];
  "ast.LambdaParam" -> "18" [];
  "ast.LetExpr" -> "0" [];
  "ast.LetExpr" -> "2" [];
  "ast.LetExpr" -> "3" [];
  "ast.LetExpr" -> "10" [];
  "ast.LetExpr" -> "17" [];
  "ast.LetExpr" -> "19" [];
  "ast.LetExpr" -> "19" [];
  "ast.Placeholder" -> "0" [];
  "ast.Placeholder" -> "tc.typePlaceholder" [];
  "ast.RootExpr" -> "16" [];
  "ast.StringLit" -> "0" [];
  "ast.StringLit" -> "tc.typeS" [];
  "ast.Var" -> "0" [];
  "ast.Var" -> "11" [];
  "lang.Builtin" -> "16" [];
  "tc.ScopeItem" -> "11" [];
  "tc.ScopeItem" -> "15" [];
  "tc.Type" -> "8" [];
  "tc.Type" -> "9" [];
  "tc.Type" -> "10" [];
  "tc.Type" -> "13" [];
  "tc.Type" -> "17" [];
  "tc.parentScope" -> "15" [];
  "tc.scopeBuiltin" -> "14" [];
  "tc.scopeLambda" -> "14" [];
  "tc.scopeLet" -> "14" [];
  "tc.typeFC" -> "7" [];
  "tc.typeI" -> "7" [];
  "tc.typeLambda" -> "7" [];
  "tc.typeLet" -> "7" [];
  "tc.typePlaceholder" -> "7" [];
  "tc.typeS" -> "7" [];
  "tc.typeVar" -> "7" [];
}
