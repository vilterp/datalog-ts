.table mother;
.table father;
matGramp{child: A, grandfather: C} :-
  mother{child: A, mother: B} & father{child: B, father: C}.
----
application/graphviz
digraph G {
  "0" [color="black" label="0: Join(matGramp{child: A, grandfather: C} :- mother{child: A, mother: B} & father{child: B, father: C}) []" shape="box"];
  "mother" [color="black" label="mother: Base []" shape="box"];
  "father" [color="black" label="father: Base []" shape="box"];
  "matGramp" [color="black" label="matGramp: Subst(matGramp{child: A, grandfather: C}) []" shape="box"];
  "0" -> "matGramp" [];
  "father" -> "0" [];
  "mother" -> "0" [];
}

.table a;
.table b;
.table c;
d{} :- a{} & b{} & c{}.
----
application/graphviz
digraph G {
  "0" [color="black" label="0: Join(d{} :- a{} & b{} & c{}) []" shape="box"];
  "a" [color="black" label="a: Base []" shape="box"];
  "b" [color="black" label="b: Base []" shape="box"];
  "c" [color="black" label="c: Base []" shape="box"];
  "d" [color="black" label="d: Subst(d{}) []" shape="box"];
  "0" -> "d" [];
  "a" -> "0" [];
  "b" -> "0" [];
  "c" -> "0" [];
}

.table mother;
.table father;
parent{child: C, parent: P} :-
  mother{child: C, mother: P} | father{child: C, father: P}.
----
application/graphviz
digraph G {
  "0" [color="black" label="0: Union []" shape="box"];
  "1" [color="black" label="1: Join(parent{child: C, parent: P} :- mother{child: C, mother: P}) []" shape="box"];
  "2" [color="black" label="2: Join(parent{child: C, parent: P} :- father{child: C, father: P}) []" shape="box"];
  "mother" [color="black" label="mother: Base []" shape="box"];
  "father" [color="black" label="father: Base []" shape="box"];
  "parent" [color="black" label="parent: Subst(parent{child: C, parent: P}) []" shape="box"];
  "0" -> "parent" [];
  "1" -> "0" [];
  "2" -> "0" [];
  "father" -> "2" [];
  "mother" -> "1" [];
}

.table mother;
.table father;
parent{child: C, parent: P} :-
  mother{child: C, mother: P} | father{child: C, father: P}.;
grandparent{grandchild: A, grandparent: C} :-
  parent{child: A, parent: B} &
  parent{child: B, parent: C}.
----
application/graphviz
digraph G {
  "0" [color="black" label="0: Union []" shape="box"];
  "1" [color="black" label="1: Join(parent{child: C, parent: P} :- mother{child: C, mother: P}) []" shape="box"];
  "2" [color="black" label="2: Join(parent{child: C, parent: P} :- father{child: C, father: P}) []" shape="box"];
  "3" [color="black" label="3: Join(grandparent{grandchild: A, grandparent: C} :- parent{child: A, parent: B} & parent{child: B, parent: C}) []" shape="box"];
  "mother" [color="black" label="mother: Base []" shape="box"];
  "father" [color="black" label="father: Base []" shape="box"];
  "parent" [color="black" label="parent: Subst(parent{child: C, parent: P}) []" shape="box"];
  "grandparent" [color="black" label="grandparent: Subst(grandparent{grandchild: A, grandparent: C}) []" shape="box"];
  "0" -> "parent" [];
  "1" -> "0" [];
  "2" -> "0" [];
  "3" -> "grandparent" [];
  "father" -> "2" [];
  "mother" -> "1" [];
  "parent" -> "3" [];
  "parent" -> "3" [];
}
