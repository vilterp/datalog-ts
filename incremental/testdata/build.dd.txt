.table mother;
.table father;
matGramp{child: A, grandfather: C} :-
  mother{child: A, mother: B} & father{child: B, father: C}.
----
application/graphviz
digraph G {
  "mother" [color="black" label="mother: Base []" shape="box"];
  "father" [color="black" label="father: Base []" shape="box"];
  "0" [color="black" label="0: Match(father{child: B, father: C}; {}) [child]" shape="box"];
  "1" [color="black" label="1: Match(mother{child: A, mother: B}; {}) [mother]" shape="box"];
  "2" [color="black" label="2: Join(1 & 0): matGramp []" shape="box"];
  "matGramp" [color="black" label="matGramp: Subst(matGramp{child: A, grandfather: C}) []" shape="box"];
  "father" -> "0" [];
  "mother" -> "1" [];
  "1" -> "2" [];
  "0" -> "2" [];
  "2" -> "matGramp" [];
}

.table a;
.table b;
.table c;
d{} :- a{} & b{} & c{}.
----
application/graphviz
digraph G {
  "a" [color="black" label="a: Base []" shape="box"];
  "b" [color="black" label="b: Base []" shape="box"];
  "c" [color="black" label="c: Base []" shape="box"];
  "d" [color="black" label="d: Subst(d{}) []" shape="box"];
  "0" [color="black" label="0: Match(c{}; {}) []" shape="box"];
  "1" [color="black" label="1: Match(b{}; {}) []" shape="box"];
  "2" [color="black" label="2: Join(1 & 0): d []" shape="box"];
  "3" [color="black" label="3: Match(a{}; {}) []" shape="box"];
  "4" [color="black" label="4: Join(3 & 2): d []" shape="box"];
  "c" -> "0" [];
  "b" -> "1" [];
  "1" -> "2" [];
  "0" -> "2" [];
  "a" -> "3" [];
  "3" -> "4" [];
  "2" -> "4" [];
  "4" -> "d" [];
}

.table mother;
.table father;
parent{child: C, parent: P} :-
  mother{child: C, mother: P} | father{child: C, father: P}.
----
application/graphviz
digraph G {
  "mother" [color="black" label="mother: Base []" shape="box"];
  "father" [color="black" label="father: Base []" shape="box"];
  "0" [color="black" label="0: Union []" shape="box"];
  "1" [color="black" label="1: Match(mother{child: C, mother: P}; {}) []" shape="box"];
  "2" [color="black" label="2: Match(father{child: C, father: P}; {}) []" shape="box"];
  "parent" [color="black" label="parent: Subst(parent{child: C, parent: P}) []" shape="box"];
  "mother" -> "1" [];
  "1" -> "0" [];
  "father" -> "2" [];
  "2" -> "0" [];
  "0" -> "parent" [];
}

.table mother;
.table father;
parent{child: C, parent: P} :-
  mother{child: C, mother: P} | father{child: C, father: P}.;
grandparent{grandchild: A, grandparent: C} :-
  parent{child: A, parent: B} &
  parent{child: B, parent: C}.
----
application/graphviz
digraph G {
  "mother" [color="black" label="mother: Base []" shape="box"];
  "parent" [color="black" label="parent: Subst(parent{child: C, parent: P}) []" shape="box"];
  "0" [color="black" label="0: Union []" shape="box"];
  "1" [color="black" label="1: Match(mother{child: C, mother: P}; {}) []" shape="box"];
  "2" [color="black" label="2: Match(father{child: C, father: P}; {}) []" shape="box"];
  "3" [color="black" label="3: Match(parent{child: B, parent: C}; {C: B, P: C}) [child]" shape="box"];
  "4" [color="black" label="4: Match(parent{child: A, parent: B}; {C: A, P: B}) [parent]" shape="box"];
  "5" [color="black" label="5: Join(4 & 3): grandparent []" shape="box"];
  "grandparent" [color="black" label="grandparent: Subst(grandparent{grandchild: A, grandparent: C}) []" shape="box"];
  "father" [color="black" label="father: Base []" shape="box"];
  "mother" -> "1" [];
  "parent" -> "3" [];
  "parent" -> "4" [];
  "0" -> "parent" [];
  "1" -> "0" [];
  "2" -> "0" [];
  "3" -> "5" [];
  "4" -> "5" [];
  "5" -> "grandparent" [];
  "father" -> "2" [];
}
