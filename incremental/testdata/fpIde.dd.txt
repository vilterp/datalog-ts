.load fp/dl/main.dl
----
text/plain

.rulegraph
----
application/graphviz
digraph G {
  "0" [fillcolor="moccasin" label="0: Union []" shape="box" style="filled"];
  "1" [fillcolor="darkseagreen2" label="1: Match(ast.StringLit{id: I, location: S}; {}) []" shape="box" style="filled"];
  "2" [fillcolor="darkseagreen2" label="2: Match(ast.IntLit{id: I, location: S}; {}) []" shape="box" style="filled"];
  "3" [fillcolor="darkseagreen2" label="3: Match(ast.Var{id: I, location: S}; {}) []" shape="box" style="filled"];
  "4" [fillcolor="darkseagreen2" label="4: Match(ast.LetExpr{id: I, location: S}; {}) []" shape="box" style="filled"];
  "5" [fillcolor="darkseagreen2" label="5: Match(ast.FuncCall{id: I, location: S}; {}) []" shape="box" style="filled"];
  "6" [fillcolor="darkseagreen2" label="6: Match(ast.Lambda{id: I, location: S}; {}) []" shape="box" style="filled"];
  "7" [fillcolor="darkseagreen2" label="7: Match(ast.Placeholder{id: I, location: S}; {}) []" shape="box" style="filled"];
  "8" [fillcolor="moccasin" label="8: Union []" shape="box" style="filled"];
  "9" [fillcolor="darkseagreen2" label="9: Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]" shape="box" style="filled"];
  "10" [fillcolor="darkseagreen2" label="10: Match(ast.LetExpr{bodyID: I, id: P}; {}) [I]" shape="box" style="filled"];
  "11" [fillcolor="thistle" label="11: Join(ast.ParentExpr, I: 10.bodyID = 9.id) []" shape="box" style="filled"];
  "12" [fillcolor="darkseagreen2" label="12: Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]" shape="box" style="filled"];
  "13" [fillcolor="darkseagreen2" label="13: Match(ast.LetExpr{bindingID: I, id: P}; {}) [I]" shape="box" style="filled"];
  "14" [fillcolor="thistle" label="14: Join(ast.ParentExpr, I: 13.bindingID = 12.id) []" shape="box" style="filled"];
  "15" [fillcolor="darkseagreen2" label="15: Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]" shape="box" style="filled"];
  "16" [fillcolor="darkseagreen2" label="16: Match(ast.FuncCall{funcID: I, id: P}; {}) [I]" shape="box" style="filled"];
  "17" [fillcolor="thistle" label="17: Join(ast.ParentExpr, I: 16.funcID = 15.id) []" shape="box" style="filled"];
  "18" [fillcolor="darkseagreen2" label="18: Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]" shape="box" style="filled"];
  "19" [fillcolor="darkseagreen2" label="19: Match(ast.FuncCall{argID: I, id: P}; {}) [I]" shape="box" style="filled"];
  "20" [fillcolor="thistle" label="20: Join(ast.ParentExpr, I: 19.argID = 18.id) []" shape="box" style="filled"];
  "21" [fillcolor="darkseagreen2" label="21: Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]" shape="box" style="filled"];
  "22" [fillcolor="darkseagreen2" label="22: Match(ast.Lambda{body: I, id: P}; {}) [I]" shape="box" style="filled"];
  "23" [fillcolor="thistle" label="23: Join(ast.ParentExpr, I: 22.body = 21.id) []" shape="box" style="filled"];
  "24" [fillcolor="moccasin" label="24: Union []" shape="box" style="filled"];
  "25" [fillcolor="darkseagreen2" label="25: Match(tc.typeS{id: I, type: T}; {I: I}) []" shape="box" style="filled"];
  "26" [fillcolor="darkseagreen2" label="26: Match(tc.typeI{id: I, type: T}; {I: I}) []" shape="box" style="filled"];
  "27" [fillcolor="darkseagreen2" label="27: Match(tc.typeLambda{id: I, type: T}; {I: I}) []" shape="box" style="filled"];
  "28" [fillcolor="darkseagreen2" label="28: Match(tc.typeFC{id: I, type: T}; {I: I, T: T}) []" shape="box" style="filled"];
  "29" [fillcolor="darkseagreen2" label="29: Match(tc.typeLet{id: I, type: T}; {I: I, T: T}) []" shape="box" style="filled"];
  "30" [fillcolor="darkseagreen2" label="30: Match(tc.typeVar{id: I, type: T}; {I: I, T: T}) []" shape="box" style="filled"];
  "31" [fillcolor="darkseagreen2" label="31: Match(tc.typePlaceholder{id: I, type: T}; {I: I}) []" shape="box" style="filled"];
  "32" [fillcolor="darkseagreen2" label="32: Match(ast.StringLit{id: I}; {}) []" shape="box" style="filled"];
  "33" [fillcolor="darkseagreen2" label="33: Match(ast.IntLit{id: I}; {}) []" shape="box" style="filled"];
  "34" [fillcolor="darkseagreen2" label="34: Match(ast.FuncCall{argID: AID, funcID: FID, id: I}; {}) [FID]" shape="box" style="filled"];
  "35" [fillcolor="darkseagreen2" label="35: Match(tc.Type{id: FID, type: tapp{from: F, to: T}}; {I: FID}) [FID]" shape="box" style="filled"];
  "36" [fillcolor="thistle" label="36: Join(tc.typeFC, FID: 35.id = 34.funcID) [F]" shape="box" style="filled"];
  "37" [fillcolor="darkseagreen2" label="37: Match(tc.Type{id: AID, type: F}; {I: AID, T: F}) [F]" shape="box" style="filled"];
  "38" [fillcolor="thistle" label="38: Join(tc.typeFC, F: 37.type = 36.type.from) []" shape="box" style="filled"];
  "39" [fillcolor="darkseagreen2" label="39: Match(ast.LetExpr{bodyID: BID, id: I}; {}) [BID]" shape="box" style="filled"];
  "40" [fillcolor="darkseagreen2" label="40: Match(tc.Type{id: BID, type: T}; {I: BID, T: T}) [BID]" shape="box" style="filled"];
  "41" [fillcolor="thistle" label="41: Join(tc.typeLet, BID: 40.id = 39.bodyID) []" shape="box" style="filled"];
  "42" [fillcolor="darkseagreen2" label="42: Match(ast.Var{id: I, name: N}; {}) [I-N]" shape="box" style="filled"];
  "43" [fillcolor="darkseagreen2" label="43: Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]" shape="box" style="filled"];
  "44" [fillcolor="thistle" label="44: Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []" shape="box" style="filled"];
  "45" [fillcolor="darkseagreen2" label="45: Match(ast.Lambda{body: B, id: I, retType: R}; {}) [I]" shape="box" style="filled"];
  "46" [fillcolor="darkseagreen2" label="46: Match(ast.LambdaParam{lambdaID: I, ty: F}; {}) [I]" shape="box" style="filled"];
  "47" [fillcolor="thistle" label="47: Join(tc.typeLambda, I: 46.lambdaID = 45.id) []" shape="box" style="filled"];
  "48" [fillcolor="darkseagreen2" label="48: Match(tc.Type{id: B, type: R}; {I: B, T: R}) []" shape="box" style="filled"];
  "49" [fillcolor="thistle" label="49: Join(tc.typeLambda, ) []" shape="box" style="filled"];
  "50" [fillcolor="darkseagreen2" label="50: Match(ast.Placeholder{id: I}; {}) []" shape="box" style="filled"];
  "51" [fillcolor="moccasin" label="51: Union []" shape="box" style="filled"];
  "52" [fillcolor="darkseagreen2" label="52: Match(tc.scopeBuiltin{id: I, location: L, name: N, type: T}; {I: I, N: N, T: T}) []" shape="box" style="filled"];
  "53" [fillcolor="darkseagreen2" label="53: Match(tc.scopeLet{id: I, location: L, name: N, type: T}; {I: I, L: L, N: N, T: T}) []" shape="box" style="filled"];
  "54" [fillcolor="darkseagreen2" label="54: Match(tc.scopeLambda{id: I, location: L, name: N, type: T}; {I: I, L: L, N: N, T: T}) []" shape="box" style="filled"];
  "55" [fillcolor="darkseagreen2" label="55: Match(tc.parentScope{id: I, parentID: P}; {I: I, P: P}) [P]" shape="box" style="filled"];
  "56" [fillcolor="darkseagreen2" label="56: Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]" shape="box" style="filled"];
  "57" [fillcolor="thistle" label="57: Join(tc.ScopeItem, P: 56.id = 55.parentID) []" shape="box" style="filled"];
  "58" [fillcolor="darkseagreen2" label="58: Match(ast.RootExpr{id: I}; {}) []" shape="box" style="filled"];
  "59" [fillcolor="darkseagreen2" label="59: Match(lang.Builtin{name: N, type: T}; {}) []" shape="box" style="filled"]; // cache: [lang.Builtin{name: "intToString", type: tapp{from: "int", to: "string"}}; {N: "intToString", T: tapp{from: "int", to: "string"}}, lang.Builtin{name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}, lang.Builtin{name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}]
  "60" [fillcolor="thistle" label="60: Join(tc.scopeBuiltin, ) []" shape="box" style="filled"];
  "61" [fillcolor="darkseagreen2" label="61: Match(ast.LetExpr{bindingID: B, bodyID: I, varLoc: L, varName: N}; {}) [B]" shape="box" style="filled"];
  "62" [fillcolor="darkseagreen2" label="62: Match(tc.Type{id: B, type: T}; {I: B, T: T}) [B]" shape="box" style="filled"];
  "63" [fillcolor="thistle" label="63: Join(tc.scopeLet, B: 62.id = 61.bindingID) []" shape="box" style="filled"];
  "64" [fillcolor="darkseagreen2" label="64: Match(ast.Lambda{body: I, id: LID}; {}) [LID]" shape="box" style="filled"];
  "65" [fillcolor="darkseagreen2" label="65: Match(ast.LambdaParam{lambdaID: LID, location: L, name: N, ty: T}; {}) [LID]" shape="box" style="filled"];
  "66" [fillcolor="thistle" label="66: Join(tc.scopeLambda, LID: 65.lambdaID = 64.id) []" shape="box" style="filled"];
  "67" [fillcolor="moccasin" label="67: Union []" shape="box" style="filled"];
  "68" [fillcolor="darkseagreen2" label="68: Match(ast.LetExpr{bodyID: I, id: P}; {}) []" shape="box" style="filled"];
  "69" [fillcolor="darkseagreen2" label="69: Match(ast.LetExpr{bindingID: I, id: P}; {}) []" shape="box" style="filled"];
  "70" [fillcolor="darkseagreen2" label="70: Match(ast.FuncCall{argID: I, id: P}; {}) []" shape="box" style="filled"];
  "71" [fillcolor="darkseagreen2" label="71: Match(ast.FuncCall{funcID: I, id: P}; {}) []" shape="box" style="filled"];
  "72" [fillcolor="darkseagreen2" label="72: Match(ast.Lambda{body: I, id: P}; {}) []" shape="box" style="filled"];
  "73" [fillcolor="moccasin" label="73: Union []" shape="box" style="filled"];
  "74" [fillcolor="darkseagreen2" label="74: Match(ide.suggestionVar{id: I, name: N, type: T, typeMatch: M}; {I: I, N: N, T: T}) []" shape="box" style="filled"];
  "75" [fillcolor="darkseagreen2" label="75: Match(ide.suggestionFunc{id: I, name: N, type: T, typeMatch: M}; {I: I, N: N}) []" shape="box" style="filled"];
  "76" [fillcolor="darkseagreen2" label="76: Match(ide.suggestionScope{id: I, name: N, type: T, typeMatch: M}; {I: I, N: N, T: T}) []" shape="box" style="filled"];
  "77" [fillcolor="darkseagreen2" label="77: Match(ast.Placeholder{id: I}; {}) [I]" shape="box" style="filled"];
  "78" [fillcolor="darkseagreen2" label="78: Match(ide.expectedType{id: I, type: T}; {I: I, T: T}) [I]" shape="box" style="filled"];
  "79" [fillcolor="thistle" label="79: Join(ide.suggestionVar, I: 78.id = 77.id) [I-T]" shape="box" style="filled"];
  "80" [fillcolor="darkseagreen2" label="80: Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]" shape="box" style="filled"];
  "81" [fillcolor="thistle" label="81: Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []" shape="box" style="filled"];
  "82" [fillcolor="darkseagreen2" label="82: Match(ast.Placeholder{id: I}; {}) [I]" shape="box" style="filled"];
  "83" [fillcolor="darkseagreen2" label="83: Match(ide.expectedType{id: I, type: TT}; {I: I, T: TT}) [I]" shape="box" style="filled"];
  "84" [fillcolor="thistle" label="84: Join(ide.suggestionFunc, I: 83.id = 82.id) [I-TT]" shape="box" style="filled"];
  "85" [fillcolor="darkseagreen2" label="85: Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]" shape="box" style="filled"];
  "86" [fillcolor="thistle" label="86: Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []" shape="box" style="filled"];
  "87" [fillcolor="darkseagreen2" label="87: Match(ast.Placeholder{id: I}; {}) [I]" shape="box" style="filled"];
  "88" [fillcolor="darkseagreen2" label="88: Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]" shape="box" style="filled"];
  "89" [fillcolor="thistle" label="89: Join(ide.suggestionScope, I: 88.id = 87.id) []" shape="box" style="filled"];
  "90" [fillcolor="moccasin" label="90: Union []" shape="box" style="filled"];
  "91" [fillcolor="darkseagreen2" label="91: Match(ast.Lambda{body: I, retType: T}; {}) []" shape="box" style="filled"];
  "92" [fillcolor="darkseagreen2" label="92: Match(ast.LetExpr{bodyID: I, id: L}; {}) [L]" shape="box" style="filled"];
  "93" [fillcolor="darkseagreen2" label="93: Match(ide.expectedType{id: L, type: T}; {I: L, T: T}) [L]" shape="box" style="filled"];
  "94" [fillcolor="thistle" label="94: Join(ide.expectedType, L: 93.id = 92.id) []" shape="box" style="filled"];
  "95" [fillcolor="darkseagreen2" label="95: Match(ast.FuncCall{argID: I, funcID: F}; {}) [F]" shape="box" style="filled"];
  "96" [fillcolor="darkseagreen2" label="96: Match(tc.Type{id: F, type: tapp{from: T}}; {I: F}) [F]" shape="box" style="filled"];
  "97" [fillcolor="thistle" label="97: Join(ide.expectedType, F: 96.id = 95.funcID) []" shape="box" style="filled"];
  "98" [fillcolor="darkseagreen2" label="98: Match(ide.expectedTypeBinding{id: I, type: T}; {I: I, T: T}) []" shape="box" style="filled"];
  "99" [fillcolor="darkseagreen2" label="99: Match(ast.LetExpr{bindingID: I, varLoc: VL}; {}) [VL]" shape="box" style="filled"];
  "100" [fillcolor="darkseagreen2" label="100: Match(ide.Usage{definitionLoc: VL, usageLoc: UL}; {DL: VL, UL: UL}) [VL]" shape="box" style="filled"];
  "101" [fillcolor="thistle" label="101: Join(ide.expectedTypeBinding, VL: 100.definitionLoc = 99.varLoc) [UL]" shape="box" style="filled"];
  "102" [fillcolor="darkseagreen2" label="102: Match(ast.Expr{id: UI, location: UL}; {I: UI, S: UL}) [UL]" shape="box" style="filled"];
  "103" [fillcolor="thistle" label="103: Join(ide.expectedTypeBinding, UL: 102.location = 101.usageLoc) [UI]" shape="box" style="filled"];
  "104" [fillcolor="darkseagreen2" label="104: Match(ide.expectedType{id: UI, type: T}; {I: UI, T: T}) [UI]" shape="box" style="filled"];
  "105" [fillcolor="thistle" label="105: Join(ide.expectedTypeBinding, UI: 104.id = 103.id) []" shape="box" style="filled"];
  "106" [fillcolor="darkseagreen2" label="106: Match(ast.Var{id: I, location: UL, name: N}; {}) [I-N]" shape="box" style="filled"];
  "107" [fillcolor="darkseagreen2" label="107: Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]" shape="box" style="filled"];
  "108" [fillcolor="thistle" label="108: Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []" shape="box" style="filled"];
  "109" [fillcolor="darkseagreen2" label="109: Match(ast.Placeholder{id: I, location: span{from: FIdx, to: TIdx}}; {}) []" shape="box" style="filled"];
  "110" [fillcolor="darkseagreen2" label="110: Match(ide.Cursor{idx: CIdx}; {}) []" shape="box" style="filled"];
  "111" [fillcolor="thistle" label="111: Join(ide.CurrentPlaceholder, ) []" shape="box" style="filled"];
  "112" [fillcolor="darkseagreen1" label="112: FIdx <= CIdx []" shape="box" style="filled"];
  "113" [fillcolor="darkseagreen1" label="113: CIdx <= TIdx []" shape="box" style="filled"];
  "114" [fillcolor="darkseagreen2" label="114: Match(ide.CurrentPlaceholder{id: I}; {I: I}) [I]" shape="box" style="filled"];
  "115" [fillcolor="darkseagreen2" label="115: Match(ide.Suggestion{id: I, name: N, type: T, typeMatch: M}; {I: I, M: M, N: N, T: T}) [I]" shape="box" style="filled"];
  "116" [fillcolor="thistle" label="116: Join(ide.CurrentSuggestion, I: 115.id = 114.id) []" shape="box" style="filled"];
  "117" [fillcolor="darkseagreen2" label="117: Match(ide.Cursor{idx: Idx}; {}) [Idx]" shape="box" style="filled"];
  "118" [fillcolor="darkseagreen2" label="118: Match(ast.Expr{id: I, location: span{from: Idx}}; {I: I}) [Idx]" shape="box" style="filled"];
  "119" [fillcolor="thistle" label="119: Join(ide.CurrentScope, Idx: 118.location.from = 117.idx) [I]" shape="box" style="filled"];
  "120" [fillcolor="darkseagreen2" label="120: Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]" shape="box" style="filled"];
  "121" [fillcolor="thistle" label="121: Join(ide.CurrentScope, I: 120.id = 119.id) []" shape="box" style="filled"];
  "122" [fillcolor="darkseagreen2" label="122: Match(ide.Cursor{idx: CIdx}; {}) []" shape="box" style="filled"];
  "123" [fillcolor="darkseagreen2" label="123: Match(ast.Expr{id: I, location: span{from: FIdx, to: TIdx}}; {I: I}) []" shape="box" style="filled"];
  "124" [fillcolor="thistle" label="124: Join(ide.CurrentType, ) [I]" shape="box" style="filled"];
  "125" [fillcolor="darkseagreen2" label="125: Match(tc.Type{id: I, type: T}; {I: I, T: T}) [I]" shape="box" style="filled"];
  "126" [fillcolor="thistle" label="126: Join(ide.CurrentType, I: 125.id = 124.id) []" shape="box" style="filled"];
  "127" [fillcolor="darkseagreen1" label="127: FIdx <= CIdx []" shape="box" style="filled"];
  "128" [fillcolor="darkseagreen1" label="128: CIdx <= TIdx []" shape="box" style="filled"];
  "129" [fillcolor="darkseagreen2" label="129: Match(ide.Cursor{idx: CIdx}; {}) []" shape="box" style="filled"];
  "130" [fillcolor="darkseagreen2" label="130: Match(ide.Usage{definitionLoc: DL, usageLoc: span{from: FIdx, to: TIdx}}; {DL: DL}) []" shape="box" style="filled"];
  "131" [fillcolor="thistle" label="131: Join(ide.DefnForCursor, ) []" shape="box" style="filled"];
  "132" [fillcolor="darkseagreen1" label="132: FIdx <= CIdx []" shape="box" style="filled"];
  "133" [fillcolor="darkseagreen1" label="133: CIdx <= TIdx []" shape="box" style="filled"];
  "134" [fillcolor="darkseagreen2" label="134: Match(ide.Cursor{idx: CIdx}; {}) []" shape="box" style="filled"];
  "135" [fillcolor="darkseagreen2" label="135: Match(ide.Usage{definitionLoc: span{from: FIdx, to: TIdx}, usageLoc: UL}; {UL: UL}) []" shape="box" style="filled"];
  "136" [fillcolor="thistle" label="136: Join(ide.UsageForCursor, ) []" shape="box" style="filled"];
  "137" [fillcolor="darkseagreen1" label="137: FIdx <= CIdx []" shape="box" style="filled"];
  "138" [fillcolor="darkseagreen1" label="138: CIdx <= TIdx []" shape="box" style="filled"];
  "139" [fillcolor="moccasin" label="139: Union []" shape="box" style="filled"];
  "140" [fillcolor="darkseagreen2" label="140: Match(ide.CurrentUsageDefn{defnLoc: DL, usageLoc: UL}; {UL: UL}) []" shape="box" style="filled"];
  "141" [fillcolor="darkseagreen2" label="141: Match(ide.CurrentUsageUsage{defnLoc: DL, usageLoc: UL}; {DL: DL}) []" shape="box" style="filled"];
  "142" [fillcolor="darkseagreen2" label="142: Match(ide.CurrentUsageUsageIndirect{defnLoc: DL, usageLoc: UL}; {DL: DL, UL: UL}) []" shape="box" style="filled"];
  "143" [fillcolor="darkseagreen1" label="143: DL != \"builtin\" []" shape="box" style="filled"];
  "144" [fillcolor="darkseagreen2" label="144: Match(ide.Usage{definitionLoc: span{from: FIdx, to: TIdx}, usageLoc: UL}; {UL: UL}) []" shape="box" style="filled"];
  "145" [fillcolor="darkseagreen2" label="145: Match(ide.Cursor{idx: CIdx}; {}) []" shape="box" style="filled"];
  "146" [fillcolor="thistle" label="146: Join(ide.CurrentUsageDefn, ) []" shape="box" style="filled"];
  "147" [fillcolor="darkseagreen1" label="147: FIdx <= CIdx []" shape="box" style="filled"];
  "148" [fillcolor="darkseagreen1" label="148: CIdx <= TIdx []" shape="box" style="filled"];
  "149" [fillcolor="darkseagreen2" label="149: Match(ide.Usage{definitionLoc: DL, usageLoc: span{from: FIdx, to: TIdx}}; {DL: DL}) []" shape="box" style="filled"];
  "150" [fillcolor="darkseagreen2" label="150: Match(ide.Cursor{idx: CIdx}; {}) []" shape="box" style="filled"];
  "151" [fillcolor="thistle" label="151: Join(ide.CurrentUsageUsage, ) []" shape="box" style="filled"];
  "152" [fillcolor="darkseagreen1" label="152: FIdx <= CIdx []" shape="box" style="filled"];
  "153" [fillcolor="darkseagreen1" label="153: CIdx <= TIdx []" shape="box" style="filled"];
  "154" [fillcolor="darkseagreen2" label="154: Match(ide.CurrentUsageUsage{defnLoc: DL}; {DL: DL}) [DL]" shape="box" style="filled"];
  "155" [fillcolor="darkseagreen2" label="155: Match(ide.Usage{definitionLoc: DL, usageLoc: UL}; {DL: DL, UL: UL}) [DL]" shape="box" style="filled"];
  "156" [fillcolor="thistle" label="156: Join(ide.CurrentUsageUsageIndirect, DL: 155.definitionLoc = 154.defnLoc) []" shape="box" style="filled"];
  "157" [fillcolor="darkseagreen2" label="157: Match(ide.CurrentUsage{defnLoc: DL, usageLoc: UL}; {DL: DL, UL: UL}) []" shape="box" style="filled"];
  "158" [fillcolor="darkseagreen1" label="158: DL != \"builtin\" []" shape="box" style="filled"];
  "159" [fillcolor="moccasin" label="159: Union []" shape="box" style="filled"];
  "160" [fillcolor="darkseagreen2" label="160: Match(hl.segmentDefn{highlight: H, span: S, type: T}; {S: S}) []" shape="box" style="filled"];
  "161" [fillcolor="darkseagreen2" label="161: Match(hl.segmentDefnHL{highlight: H, span: S, type: T}; {S: S}) []" shape="box" style="filled"];
  "162" [fillcolor="darkseagreen2" label="162: Match(hl.segmentUsage{highlight: H, span: S, type: T}; {S: S}) []" shape="box" style="filled"];
  "163" [fillcolor="darkseagreen2" label="163: Match(hl.segmentUndefinedVar{highlight: H, span: S, type: T}; {S: S}) []" shape="box" style="filled"];
  "164" [fillcolor="darkseagreen2" label="164: Match(hl.segmentUsageHL{highlight: H, span: S, type: T}; {S: S}) []" shape="box" style="filled"];
  "165" [fillcolor="darkseagreen2" label="165: Match(hl.segmentStr{highlight: H, span: S, type: T}; {S: S}) []" shape="box" style="filled"];
  "166" [fillcolor="darkseagreen2" label="166: Match(hl.segmentInt{highlight: H, span: S, type: T}; {S: S}) []" shape="box" style="filled"];
  "167" [fillcolor="darkseagreen2" label="167: Match(hl.segmentKeyword{highlight: H, span: S, type: T}; {S: S}) []" shape="box" style="filled"];
  "168" [fillcolor="darkseagreen2" label="168: Match(hl.segmentType{highlight: H, span: S, type: T}; {S: S}) []" shape="box" style="filled"];
  "169" [fillcolor="darkseagreen2" label="169: Match(hl.segmentTypeHL{highlight: H, span: S, type: T}; {S: S}) []" shape="box" style="filled"];
  "170" [fillcolor="darkseagreen2" label="170: Match(hl.varDefn{span: S}; {S: S}) [S]" shape="box" style="filled"];
  "171" [fillcolor="darkseagreen2" label="171: Match(ide.Usage{definitionLoc: S}; {DL: S}) [S]" shape="box" style="filled"];
  "172" [fillcolor="thistle" label="172: Join(hl.segmentDefn, S: 171.definitionLoc = 170.span) []" shape="box" style="filled"];
  "173" [fillcolor="darkseagreen2" label="173: Match(ide.CurrentUsage{defnLoc: S}; {DL: S}) [S]" shape="box" style="filled"];
  "174" [fillcolor="darkseagreen2" label="174: Match(hl.varDefn{span: S}; {S: S}) [S]" shape="box" style="filled"];
  "175" [fillcolor="thistle" label="175: Join(hl.segmentDefnHL, S: 174.span = 173.defnLoc) []" shape="box" style="filled"];
  "176" [fillcolor="moccasin" label="176: Union []" shape="box" style="filled"];
  "177" [fillcolor="darkseagreen2" label="177: Match(ast.LetExpr{varLoc: S}; {}) []" shape="box" style="filled"];
  "178" [fillcolor="darkseagreen2" label="178: Match(ast.LambdaParam{location: S}; {}) []" shape="box" style="filled"];
  "179" [fillcolor="darkseagreen2" label="179: Match(ast.Var{location: S}; {}) [S]" shape="box" style="filled"];
  "180" [fillcolor="darkseagreen2" label="180: Match(ide.Usage{usageLoc: S}; {UL: S}) [S]" shape="box" style="filled"];
  "181" [fillcolor="thistle" label="181: Join(hl.segmentUsage, S: 180.usageLoc = 179.location) []" shape="box" style="filled"];
  "182" [fillcolor="darkseagreen2" label="182: Match(ast.Var{location: S}; {}) []" shape="box" style="filled"];
  "183" [fillcolor="darkseagreen2" label="183: Match(ide.CurrentUsage{usageLoc: S}; {UL: S}) [S]" shape="box" style="filled"];
  "184" [fillcolor="darkseagreen2" label="184: Match(ast.Var{location: S}; {}) [S]" shape="box" style="filled"];
  "185" [fillcolor="thistle" label="185: Join(hl.segmentUsageHL, S: 184.location = 183.usageLoc) []" shape="box" style="filled"];
  "186" [fillcolor="darkseagreen2" label="186: Match(ast.StringLit{location: S}; {}) []" shape="box" style="filled"];
  "187" [fillcolor="darkseagreen2" label="187: Match(ast.IntLit{location: S}; {}) []" shape="box" style="filled"];
  "188" [fillcolor="moccasin" label="188: Union []" shape="box" style="filled"];
  "189" [fillcolor="darkseagreen2" label="189: Match(ast.LetExpr{inLoc: S}; {}) []" shape="box" style="filled"];
  "190" [fillcolor="darkseagreen2" label="190: Match(ast.LetExpr{letLoc: S}; {}) []" shape="box" style="filled"];
  "191" [fillcolor="moccasin" label="191: Union []" shape="box" style="filled"];
  "192" [fillcolor="darkseagreen2" label="192: Match(ast.LambdaParam{ty: N, typeLoc: S}; {}) []" shape="box" style="filled"];
  "193" [fillcolor="darkseagreen2" label="193: Match(ast.Lambda{retType: N, retTypeLoc: S}; {}) []" shape="box" style="filled"];
  "194" [fillcolor="darkseagreen2" label="194: Match(hl.segmentType{name: N, span: S}; {N: N, S: S}) [N]" shape="box" style="filled"];
  "195" [fillcolor="darkseagreen2" label="195: Match(hl.typeHighlighted{name: N}; {T: N}) [N]" shape="box" style="filled"];
  "196" [fillcolor="thistle" label="196: Join(hl.segmentTypeHL, N: 195.name = 194.name) []" shape="box" style="filled"];
  "197" [fillcolor="moccasin" label="197: Union []" shape="box" style="filled"];
  "198" [fillcolor="darkseagreen2" label="198: Match(hl.typeHighlightedParam{name: T}; {T: T}) []" shape="box" style="filled"];
  "199" [fillcolor="darkseagreen2" label="199: Match(hl.typeHighlightedRet{name: T}; {T: T}) []" shape="box" style="filled"];
  "200" [fillcolor="darkseagreen2" label="200: Match(ast.LambdaParam{ty: T, typeLoc: span{from: FIdx, to: TIdx}}; {}) []" shape="box" style="filled"];
  "201" [fillcolor="darkseagreen2" label="201: Match(ide.Cursor{idx: CIdx}; {}) []" shape="box" style="filled"];
  "202" [fillcolor="thistle" label="202: Join(hl.typeHighlightedParam, ) []" shape="box" style="filled"];
  "203" [fillcolor="darkseagreen1" label="203: FIdx <= CIdx []" shape="box" style="filled"];
  "204" [fillcolor="darkseagreen1" label="204: CIdx <= TIdx []" shape="box" style="filled"];
  "205" [fillcolor="darkseagreen2" label="205: Match(ast.Lambda{retType: T, retTypeLoc: span{from: FIdx, to: TIdx}}; {}) []" shape="box" style="filled"];
  "206" [fillcolor="darkseagreen2" label="206: Match(ide.Cursor{idx: CIdx}; {}) []" shape="box" style="filled"];
  "207" [fillcolor="thistle" label="207: Join(hl.typeHighlightedRet, ) []" shape="box" style="filled"];
  "208" [fillcolor="darkseagreen1" label="208: FIdx <= CIdx []" shape="box" style="filled"];
  "209" [fillcolor="darkseagreen1" label="209: CIdx <= TIdx []" shape="box" style="filled"];
  "ast.RootExpr" [fillcolor="darksalmon" label="ast.RootExpr:  []" shape="box" style="filled"];
  "ast.StringLit" [fillcolor="darksalmon" label="ast.StringLit:  []" shape="box" style="filled"];
  "ast.IntLit" [fillcolor="darksalmon" label="ast.IntLit:  []" shape="box" style="filled"];
  "ast.LetExpr" [fillcolor="darksalmon" label="ast.LetExpr:  []" shape="box" style="filled"];
  "ast.Lambda" [fillcolor="darksalmon" label="ast.Lambda:  []" shape="box" style="filled"];
  "ast.LambdaParam" [fillcolor="darksalmon" label="ast.LambdaParam:  []" shape="box" style="filled"];
  "ast.FuncCall" [fillcolor="darksalmon" label="ast.FuncCall:  []" shape="box" style="filled"];
  "ast.Var" [fillcolor="darksalmon" label="ast.Var:  []" shape="box" style="filled"];
  "ast.Placeholder" [fillcolor="darksalmon" label="ast.Placeholder:  []" shape="box" style="filled"];
  "ast.Expr" [fillcolor="lightblue" label="ast.Expr: Subst({id: I, location: S}) []" shape="box" style="filled"];
  "ast.ParentExpr" [fillcolor="lightblue" label="ast.ParentExpr: Subst({id: I, parent: P, span: S}) []" shape="box" style="filled"];
  "lang.Builtin" [fillcolor="darksalmon" label="lang.Builtin:  []" shape="box" style="filled"]; // cache: [lang.Builtin{name: "intToString", type: tapp{from: "int", to: "string"}}; {}, lang.Builtin{name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {}, lang.Builtin{name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {}]
  "tc.Type" [fillcolor="lightblue" label="tc.Type: Subst({id: I, type: T}) []" shape="box" style="filled"];
  "tc.typeS" [fillcolor="lightblue" label="tc.typeS: Subst({id: I, type: \"string\"}) []" shape="box" style="filled"];
  "tc.typeI" [fillcolor="lightblue" label="tc.typeI: Subst({id: I, type: \"int\"}) []" shape="box" style="filled"];
  "tc.typeFC" [fillcolor="lightblue" label="tc.typeFC: Subst({id: I, type: T}) []" shape="box" style="filled"];
  "tc.typeLet" [fillcolor="lightblue" label="tc.typeLet: Subst({id: I, type: T}) []" shape="box" style="filled"];
  "tc.typeVar" [fillcolor="lightblue" label="tc.typeVar: Subst({id: I, type: T}) []" shape="box" style="filled"];
  "tc.typeLambda" [fillcolor="lightblue" label="tc.typeLambda: Subst({id: I, type: tapp{from: F, to: R}}) []" shape="box" style="filled"];
  "tc.typePlaceholder" [fillcolor="lightblue" label="tc.typePlaceholder: Subst({id: I, type: \"unknown\"}) []" shape="box" style="filled"];
  "tc.ScopeItem" [fillcolor="lightblue" label="tc.ScopeItem: Subst({id: I, location: L, name: N, type: T}) []" shape="box" style="filled"];
  "tc.scopeBuiltin" [fillcolor="lightblue" label="tc.scopeBuiltin: Subst({id: I, location: \"builtin\", name: N, type: T}) []" shape="box" style="filled"];
  "tc.scopeLet" [fillcolor="lightblue" label="tc.scopeLet: Subst({id: I, location: L, name: N, type: T}) []" shape="box" style="filled"];
  "tc.scopeLambda" [fillcolor="lightblue" label="tc.scopeLambda: Subst({id: I, location: L, name: N, type: T}) []" shape="box" style="filled"];
  "tc.parentScope" [fillcolor="lightblue" label="tc.parentScope: Subst({id: I, parentID: P}) []" shape="box" style="filled"];
  "ide.Cursor" [fillcolor="darksalmon" label="ide.Cursor:  []" shape="box" style="filled"];
  "ide.Suggestion" [fillcolor="lightblue" label="ide.Suggestion: Subst({id: I, name: N, type: T, typeMatch: M}) []" shape="box" style="filled"];
  "ide.suggestionVar" [fillcolor="lightblue" label="ide.suggestionVar: Subst({id: I, name: N, type: T, typeMatch: true}) []" shape="box" style="filled"];
  "ide.suggestionFunc" [fillcolor="lightblue" label="ide.suggestionFunc: Subst({id: I, name: N, type: tapp{from: TF, to: TT}, typeMatch: true}) []" shape="box" style="filled"];
  "ide.suggestionScope" [fillcolor="lightblue" label="ide.suggestionScope: Subst({id: I, name: N, type: T, typeMatch: false}) []" shape="box" style="filled"];
  "ide.expectedType" [fillcolor="lightblue" label="ide.expectedType: Subst({id: I, type: T}) []" shape="box" style="filled"];
  "ide.expectedTypeBinding" [fillcolor="lightblue" label="ide.expectedTypeBinding: Subst({id: I, type: T}) []" shape="box" style="filled"];
  "ide.Usage" [fillcolor="lightblue" label="ide.Usage: Subst({definitionLoc: DL, name: N, usageLoc: UL}) []" shape="box" style="filled"];
  "ide.CurrentPlaceholder" [fillcolor="lightblue" label="ide.CurrentPlaceholder: Subst({id: I, span: span{from: FIdx, to: TIdx}}) []" shape="box" style="filled"];
  "ide.CurrentSuggestion" [fillcolor="lightblue" label="ide.CurrentSuggestion: Subst({id: I, name: N, type: T, typeMatch: M}) []" shape="box" style="filled"];
  "ide.CurrentScope" [fillcolor="lightblue" label="ide.CurrentScope: Subst({id: I, name: N, type: T}) []" shape="box" style="filled"];
  "ide.CurrentType" [fillcolor="lightblue" label="ide.CurrentType: Subst({id: I, span: span{from: FIdx, to: TIdx}, type: T}) []" shape="box" style="filled"];
  "ide.DefnForCursor" [fillcolor="lightblue" label="ide.DefnForCursor: Subst({defnLoc: DL}) []" shape="box" style="filled"];
  "ide.UsageForCursor" [fillcolor="lightblue" label="ide.UsageForCursor: Subst({usageLoc: UL}) []" shape="box" style="filled"];
  "ide.CurrentUsage" [fillcolor="lightblue" label="ide.CurrentUsage: Subst({defnLoc: DL, usageLoc: UL}) []" shape="box" style="filled"];
  "ide.CurrentUsageDefn" [fillcolor="lightblue" label="ide.CurrentUsageDefn: Subst({defnLoc: span{from: FIdx, to: TIdx}, usageLoc: UL}) []" shape="box" style="filled"];
  "ide.CurrentUsageUsage" [fillcolor="lightblue" label="ide.CurrentUsageUsage: Subst({defnLoc: DL, usageLoc: span{from: FIdx, to: TIdx}}) []" shape="box" style="filled"];
  "ide.CurrentUsageUsageIndirect" [fillcolor="lightblue" label="ide.CurrentUsageUsageIndirect: Subst({defnLoc: DL, usageLoc: UL}) []" shape="box" style="filled"];
  "ide.RenameCandidate" [fillcolor="lightblue" label="ide.RenameCandidate: Subst({defnLoc: DL, usageLoc: UL}) []" shape="box" style="filled"];
  "hl.Segment" [fillcolor="lightblue" label="hl.Segment: Subst({highlight: H, span: S, type: T}) []" shape="box" style="filled"];
  "hl.segmentDefn" [fillcolor="lightblue" label="hl.segmentDefn: Subst({highlight: false, span: S, type: \"defn\"}) []" shape="box" style="filled"];
  "hl.segmentDefnHL" [fillcolor="lightblue" label="hl.segmentDefnHL: Subst({highlight: true, span: S, type: \"defn\"}) []" shape="box" style="filled"];
  "hl.varDefn" [fillcolor="lightblue" label="hl.varDefn: Subst({span: S}) []" shape="box" style="filled"];
  "hl.segmentUsage" [fillcolor="lightblue" label="hl.segmentUsage: Subst({highlight: false, span: S, type: \"usage\"}) []" shape="box" style="filled"];
  "hl.segmentUndefinedVar" [fillcolor="lightblue" label="hl.segmentUndefinedVar: Subst({highlight: false, span: S, type: \"undefined-var\"}) []" shape="box" style="filled"];
  "hl.segmentUsageHL" [fillcolor="lightblue" label="hl.segmentUsageHL: Subst({highlight: true, span: S, type: \"usage\"}) []" shape="box" style="filled"];
  "hl.segmentStr" [fillcolor="lightblue" label="hl.segmentStr: Subst({highlight: false, span: S, type: \"string\"}) []" shape="box" style="filled"];
  "hl.segmentInt" [fillcolor="lightblue" label="hl.segmentInt: Subst({highlight: false, span: S, type: \"int\"}) []" shape="box" style="filled"];
  "hl.segmentKeyword" [fillcolor="lightblue" label="hl.segmentKeyword: Subst({highlight: false, span: S, type: \"keyword\"}) []" shape="box" style="filled"];
  "hl.segmentType" [fillcolor="lightblue" label="hl.segmentType: Subst({highlight: false, name: N, span: S, type: \"type\"}) []" shape="box" style="filled"];
  "hl.segmentTypeHL" [fillcolor="lightblue" label="hl.segmentTypeHL: Subst({highlight: true, span: S, type: \"type\"}) []" shape="box" style="filled"];
  "hl.typeHighlighted" [fillcolor="lightblue" label="hl.typeHighlighted: Subst({name: T}) []" shape="box" style="filled"];
  "hl.typeHighlightedParam" [fillcolor="lightblue" label="hl.typeHighlightedParam: Subst({name: T}) []" shape="box" style="filled"];
  "hl.typeHighlightedRet" [fillcolor="lightblue" label="hl.typeHighlightedRet: Subst({name: T}) []" shape="box" style="filled"];
  "0" -> "ast.Expr" [];
  "1" -> "0" [];
  "10" -> "11" [];
  "100" -> "101" [];
  "101" -> "103" [];
  "102" -> "103" [];
  "103" -> "105" [];
  "104" -> "105" [];
  "105" -> "ide.expectedTypeBinding" [];
  "106" -> "108" [];
  "107" -> "108" [];
  "108" -> "ide.Usage" [];
  "109" -> "111" [];
  "11" -> "8" [];
  "110" -> "111" [];
  "111" -> "112" [];
  "112" -> "113" [];
  "113" -> "ide.CurrentPlaceholder" [];
  "114" -> "116" [];
  "115" -> "116" [];
  "116" -> "ide.CurrentSuggestion" [];
  "117" -> "119" [];
  "118" -> "119" [];
  "119" -> "121" [];
  "12" -> "14" [];
  "120" -> "121" [];
  "121" -> "ide.CurrentScope" [];
  "122" -> "124" [];
  "123" -> "124" [];
  "124" -> "126" [];
  "125" -> "126" [];
  "126" -> "127" [];
  "127" -> "128" [];
  "128" -> "ide.CurrentType" [];
  "129" -> "131" [];
  "13" -> "14" [];
  "130" -> "131" [];
  "131" -> "132" [];
  "132" -> "133" [];
  "133" -> "ide.DefnForCursor" [];
  "134" -> "136" [];
  "135" -> "136" [];
  "136" -> "137" [];
  "137" -> "138" [];
  "138" -> "ide.UsageForCursor" [];
  "139" -> "ide.CurrentUsage" [];
  "14" -> "8" [];
  "140" -> "139" [];
  "141" -> "139" [];
  "142" -> "143" [];
  "143" -> "139" [];
  "144" -> "146" [];
  "145" -> "146" [];
  "146" -> "147" [];
  "147" -> "148" [];
  "148" -> "ide.CurrentUsageDefn" [];
  "149" -> "151" [];
  "15" -> "17" [];
  "150" -> "151" [];
  "151" -> "152" [];
  "152" -> "153" [];
  "153" -> "ide.CurrentUsageUsage" [];
  "154" -> "156" [];
  "155" -> "156" [];
  "156" -> "ide.CurrentUsageUsageIndirect" [];
  "157" -> "158" [];
  "158" -> "ide.RenameCandidate" [];
  "159" -> "hl.Segment" [];
  "16" -> "17" [];
  "160" -> "159" [];
  "161" -> "159" [];
  "162" -> "159" [];
  "163" -> "159" [];
  "164" -> "159" [];
  "165" -> "159" [];
  "166" -> "159" [];
  "167" -> "159" [];
  "168" -> "159" [];
  "169" -> "159" [];
  "17" -> "8" [];
  "170" -> "172" [];
  "171" -> "172" [];
  "172" -> "hl.segmentDefn" [];
  "173" -> "175" [];
  "174" -> "175" [];
  "175" -> "hl.segmentDefnHL" [];
  "176" -> "hl.varDefn" [];
  "177" -> "176" [];
  "178" -> "176" [];
  "179" -> "181" [];
  "18" -> "20" [];
  "180" -> "181" [];
  "181" -> "hl.segmentUsage" [];
  "182" -> "hl.segmentUndefinedVar" [];
  "183" -> "185" [];
  "184" -> "185" [];
  "185" -> "hl.segmentUsageHL" [];
  "186" -> "hl.segmentStr" [];
  "187" -> "hl.segmentInt" [];
  "188" -> "hl.segmentKeyword" [];
  "189" -> "188" [];
  "19" -> "20" [];
  "190" -> "188" [];
  "191" -> "hl.segmentType" [];
  "192" -> "191" [];
  "193" -> "191" [];
  "194" -> "196" [];
  "195" -> "196" [];
  "196" -> "hl.segmentTypeHL" [];
  "197" -> "hl.typeHighlighted" [];
  "198" -> "197" [];
  "199" -> "197" [];
  "2" -> "0" [];
  "20" -> "8" [];
  "200" -> "202" [];
  "201" -> "202" [];
  "202" -> "203" [];
  "203" -> "204" [];
  "204" -> "hl.typeHighlightedParam" [];
  "205" -> "207" [];
  "206" -> "207" [];
  "207" -> "208" [];
  "208" -> "209" [];
  "209" -> "hl.typeHighlightedRet" [];
  "21" -> "23" [];
  "22" -> "23" [];
  "23" -> "8" [];
  "24" -> "tc.Type" [];
  "25" -> "24" [];
  "26" -> "24" [];
  "27" -> "24" [];
  "28" -> "24" [];
  "29" -> "24" [];
  "3" -> "0" [];
  "30" -> "24" [];
  "31" -> "24" [];
  "32" -> "tc.typeS" [];
  "33" -> "tc.typeI" [];
  "34" -> "36" [];
  "35" -> "36" [];
  "36" -> "38" [];
  "37" -> "38" [];
  "38" -> "tc.typeFC" [];
  "39" -> "41" [];
  "4" -> "0" [];
  "40" -> "41" [];
  "41" -> "tc.typeLet" [];
  "42" -> "44" [];
  "43" -> "44" [];
  "44" -> "tc.typeVar" [];
  "45" -> "47" [];
  "46" -> "47" [];
  "47" -> "49" [];
  "48" -> "49" [];
  "49" -> "tc.typeLambda" [];
  "5" -> "0" [];
  "50" -> "tc.typePlaceholder" [];
  "51" -> "tc.ScopeItem" [];
  "52" -> "51" [];
  "53" -> "51" [];
  "54" -> "51" [];
  "55" -> "57" [];
  "56" -> "57" [];
  "57" -> "51" [];
  "58" -> "60" [];
  "59" -> "60" [];
  "6" -> "0" [];
  "60" -> "tc.scopeBuiltin" [];
  "61" -> "63" [];
  "62" -> "63" [];
  "63" -> "tc.scopeLet" [];
  "64" -> "66" [];
  "65" -> "66" [];
  "66" -> "tc.scopeLambda" [];
  "67" -> "tc.parentScope" [];
  "68" -> "67" [];
  "69" -> "67" [];
  "7" -> "0" [];
  "70" -> "67" [];
  "71" -> "67" [];
  "72" -> "67" [];
  "73" -> "ide.Suggestion" [];
  "74" -> "73" [];
  "75" -> "73" [];
  "76" -> "73" [];
  "77" -> "79" [];
  "78" -> "79" [];
  "79" -> "81" [];
  "8" -> "ast.ParentExpr" [];
  "80" -> "81" [];
  "81" -> "ide.suggestionVar" [];
  "82" -> "84" [];
  "83" -> "84" [];
  "84" -> "86" [];
  "85" -> "86" [];
  "86" -> "ide.suggestionFunc" [];
  "87" -> "89" [];
  "88" -> "89" [];
  "89" -> "ide.suggestionScope" [];
  "9" -> "11" [];
  "90" -> "ide.expectedType" [];
  "91" -> "90" [];
  "92" -> "94" [];
  "93" -> "94" [];
  "94" -> "90" [];
  "95" -> "97" [];
  "96" -> "97" [];
  "97" -> "90" [];
  "98" -> "90" [];
  "99" -> "101" [];
  "ast.Expr" -> "9" [];
  "ast.Expr" -> "12" [];
  "ast.Expr" -> "15" [];
  "ast.Expr" -> "18" [];
  "ast.Expr" -> "21" [];
  "ast.Expr" -> "102" [];
  "ast.Expr" -> "118" [];
  "ast.Expr" -> "123" [];
  "ast.FuncCall" -> "5" [];
  "ast.FuncCall" -> "16" [];
  "ast.FuncCall" -> "19" [];
  "ast.FuncCall" -> "34" [];
  "ast.FuncCall" -> "70" [];
  "ast.FuncCall" -> "71" [];
  "ast.FuncCall" -> "95" [];
  "ast.IntLit" -> "2" [];
  "ast.IntLit" -> "33" [];
  "ast.IntLit" -> "187" [];
  "ast.Lambda" -> "6" [];
  "ast.Lambda" -> "22" [];
  "ast.Lambda" -> "45" [];
  "ast.Lambda" -> "64" [];
  "ast.Lambda" -> "72" [];
  "ast.Lambda" -> "91" [];
  "ast.Lambda" -> "193" [];
  "ast.Lambda" -> "205" [];
  "ast.LambdaParam" -> "46" [];
  "ast.LambdaParam" -> "65" [];
  "ast.LambdaParam" -> "178" [];
  "ast.LambdaParam" -> "192" [];
  "ast.LambdaParam" -> "200" [];
  "ast.LetExpr" -> "4" [];
  "ast.LetExpr" -> "10" [];
  "ast.LetExpr" -> "13" [];
  "ast.LetExpr" -> "39" [];
  "ast.LetExpr" -> "61" [];
  "ast.LetExpr" -> "68" [];
  "ast.LetExpr" -> "69" [];
  "ast.LetExpr" -> "92" [];
  "ast.LetExpr" -> "99" [];
  "ast.LetExpr" -> "177" [];
  "ast.LetExpr" -> "189" [];
  "ast.LetExpr" -> "190" [];
  "ast.Placeholder" -> "7" [];
  "ast.Placeholder" -> "50" [];
  "ast.Placeholder" -> "77" [];
  "ast.Placeholder" -> "82" [];
  "ast.Placeholder" -> "87" [];
  "ast.Placeholder" -> "109" [];
  "ast.RootExpr" -> "58" [];
  "ast.StringLit" -> "1" [];
  "ast.StringLit" -> "32" [];
  "ast.StringLit" -> "186" [];
  "ast.Var" -> "3" [];
  "ast.Var" -> "42" [];
  "ast.Var" -> "106" [];
  "ast.Var" -> "179" [];
  "ast.Var" -> "182" [];
  "ast.Var" -> "184" [];
  "hl.segmentDefn" -> "160" [];
  "hl.segmentDefnHL" -> "161" [];
  "hl.segmentInt" -> "166" [];
  "hl.segmentKeyword" -> "167" [];
  "hl.segmentStr" -> "165" [];
  "hl.segmentType" -> "168" [];
  "hl.segmentType" -> "194" [];
  "hl.segmentTypeHL" -> "169" [];
  "hl.segmentUndefinedVar" -> "163" [];
  "hl.segmentUsage" -> "162" [];
  "hl.segmentUsageHL" -> "164" [];
  "hl.typeHighlighted" -> "195" [];
  "hl.typeHighlightedParam" -> "198" [];
  "hl.typeHighlightedRet" -> "199" [];
  "hl.varDefn" -> "170" [];
  "hl.varDefn" -> "174" [];
  "ide.CurrentPlaceholder" -> "114" [];
  "ide.CurrentUsage" -> "157" [];
  "ide.CurrentUsage" -> "173" [];
  "ide.CurrentUsage" -> "183" [];
  "ide.CurrentUsageDefn" -> "140" [];
  "ide.CurrentUsageUsage" -> "141" [];
  "ide.CurrentUsageUsage" -> "154" [];
  "ide.CurrentUsageUsageIndirect" -> "142" [];
  "ide.Cursor" -> "110" [];
  "ide.Cursor" -> "117" [];
  "ide.Cursor" -> "122" [];
  "ide.Cursor" -> "129" [];
  "ide.Cursor" -> "134" [];
  "ide.Cursor" -> "145" [];
  "ide.Cursor" -> "150" [];
  "ide.Cursor" -> "201" [];
  "ide.Cursor" -> "206" [];
  "ide.Suggestion" -> "115" [];
  "ide.Usage" -> "100" [];
  "ide.Usage" -> "130" [];
  "ide.Usage" -> "135" [];
  "ide.Usage" -> "144" [];
  "ide.Usage" -> "149" [];
  "ide.Usage" -> "155" [];
  "ide.Usage" -> "171" [];
  "ide.Usage" -> "180" [];
  "ide.expectedType" -> "78" [];
  "ide.expectedType" -> "83" [];
  "ide.expectedType" -> "93" [];
  "ide.expectedType" -> "104" [];
  "ide.expectedTypeBinding" -> "98" [];
  "ide.suggestionFunc" -> "75" [];
  "ide.suggestionScope" -> "76" [];
  "ide.suggestionVar" -> "74" [];
  "lang.Builtin" -> "59" [];
  "tc.ScopeItem" -> "43" [];
  "tc.ScopeItem" -> "56" [];
  "tc.ScopeItem" -> "80" [];
  "tc.ScopeItem" -> "85" [];
  "tc.ScopeItem" -> "88" [];
  "tc.ScopeItem" -> "107" [];
  "tc.ScopeItem" -> "120" [];
  "tc.Type" -> "35" [];
  "tc.Type" -> "37" [];
  "tc.Type" -> "40" [];
  "tc.Type" -> "48" [];
  "tc.Type" -> "62" [];
  "tc.Type" -> "96" [];
  "tc.Type" -> "125" [];
  "tc.parentScope" -> "55" [];
  "tc.scopeBuiltin" -> "52" [];
  "tc.scopeLambda" -> "54" [];
  "tc.scopeLet" -> "53" [];
  "tc.typeFC" -> "28" [];
  "tc.typeI" -> "26" [];
  "tc.typeLambda" -> "27" [];
  "tc.typeLet" -> "29" [];
  "tc.typePlaceholder" -> "31" [];
  "tc.typeS" -> "25" [];
  "tc.typeVar" -> "30" [];
}

ast.RootExpr{id: 0}.
----
text/emission-log
from null to ast.RootExpr: ast.RootExpr{id: 0}; {}.  []
  ast.RootExpr{id: 0}; {}
from ast.RootExpr to 58: ast.RootExpr{id: 0}; {}. Match(ast.RootExpr{id: I}; {}) []
  ast.RootExpr{id: 0}; {I: 0}
from 58 to 60: ast.RootExpr{id: 0}; {I: 0}. Join(tc.scopeBuiltin, ) []
  tc.scopeBuiltin{id: 0}; {I: 0, N: "intToString", T: tapp{from: "int", to: "string"}}
  tc.scopeBuiltin{id: 0}; {I: 0, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
  tc.scopeBuiltin{id: 0}; {I: 0, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 60 to tc.scopeBuiltin: tc.scopeBuiltin{id: 0}; {I: 0, N: "intToString", T: tapp{from: "int", to: "string"}}. Subst({id: I, location: "builtin", name: N, type: T}) []
  tc.scopeBuiltin{id: 0, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 0, N: "intToString", T: tapp{from: "int", to: "string"}}
from 60 to tc.scopeBuiltin: tc.scopeBuiltin{id: 0}; {I: 0, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Subst({id: I, location: "builtin", name: N, type: T}) []
  tc.scopeBuiltin{id: 0, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 0, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 60 to tc.scopeBuiltin: tc.scopeBuiltin{id: 0}; {I: 0, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Subst({id: I, location: "builtin", name: N, type: T}) []
  tc.scopeBuiltin{id: 0, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 0, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.scopeBuiltin to 52: tc.scopeBuiltin{id: 0, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 0, N: "intToString", T: tapp{from: "int", to: "string"}}. Match(tc.scopeBuiltin{id: I, location: L, name: N, type: T}; {I: I, N: N, T: T}) []
  tc.scopeBuiltin{id: 0, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 0, L: "builtin", N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.scopeBuiltin to 52: tc.scopeBuiltin{id: 0, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 0, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.scopeBuiltin{id: I, location: L, name: N, type: T}; {I: I, N: N, T: T}) []
  tc.scopeBuiltin{id: 0, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 0, L: "builtin", N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.scopeBuiltin to 52: tc.scopeBuiltin{id: 0, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 0, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.scopeBuiltin{id: I, location: L, name: N, type: T}; {I: I, N: N, T: T}) []
  tc.scopeBuiltin{id: 0, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 0, L: "builtin", N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 52 to 51: tc.scopeBuiltin{id: 0, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 0, L: "builtin", N: "intToString", T: tapp{from: "int", to: "string"}}. Union []
  tc.scopeBuiltin{id: 0, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 0, L: "builtin", N: "intToString", T: tapp{from: "int", to: "string"}}
from 52 to 51: tc.scopeBuiltin{id: 0, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 0, L: "builtin", N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Union []
  tc.scopeBuiltin{id: 0, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 0, L: "builtin", N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 52 to 51: tc.scopeBuiltin{id: 0, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 0, L: "builtin", N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Union []
  tc.scopeBuiltin{id: 0, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 0, L: "builtin", N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 51 to tc.ScopeItem: tc.scopeBuiltin{id: 0, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 0, L: "builtin", N: "intToString", T: tapp{from: "int", to: "string"}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 0, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 0, L: "builtin", N: "intToString", T: tapp{from: "int", to: "string"}}
from 51 to tc.ScopeItem: tc.scopeBuiltin{id: 0, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 0, L: "builtin", N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 0, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 0, L: "builtin", N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 51 to tc.ScopeItem: tc.scopeBuiltin{id: 0, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 0, L: "builtin", N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 0, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 0, L: "builtin", N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 0, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 0, L: "builtin", N: "intToString", T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 0, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 0, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 0, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 0, L: "builtin", N: "intToString", T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 0, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 0, T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 0, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 0, L: "builtin", N: "intToString", T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 0, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 0, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 0, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 0, L: "builtin", N: "intToString", T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 0, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 0, N: "intToString", TF: "int", TT: "string"}
from tc.ScopeItem to 88: tc.ScopeItem{id: 0, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 0, L: "builtin", N: "intToString", T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 0, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 0, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 0, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 0, L: "builtin", N: "intToString", T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 0, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 0, N: "intToString"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 0, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 0, L: "builtin", N: "intToString", T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 0, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 0, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 0, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 0, L: "builtin", N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 0, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 0, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 0, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 0, L: "builtin", N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 0, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 0, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 0, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 0, L: "builtin", N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 0, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 0, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 0, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 0, L: "builtin", N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 0, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 0, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 0, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 0, L: "builtin", N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 0, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 0, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 0, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 0, L: "builtin", N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 0, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 0, N: "plus"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 0, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 0, L: "builtin", N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 0, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 0, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 0, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 0, L: "builtin", N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 0, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 0, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 0, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 0, L: "builtin", N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 0, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 0, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 0, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 0, L: "builtin", N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 0, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 0, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 0, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 0, L: "builtin", N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 0, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 0, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 0, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 0, L: "builtin", N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 0, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 0, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 0, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 0, L: "builtin", N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 0, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 0, N: "concat"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 0, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 0, L: "builtin", N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 0, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 0, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 43 to 44: tc.ScopeItem{id: 0, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 0, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 0, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 0, T: tapp{from: "int", to: "string"}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 0, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 0, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 0, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 0, N: "intToString", TF: "int", TT: "string"}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 0, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 0, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 0, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 0, N: "intToString"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 0, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 0, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 0, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 0, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 0, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 0, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 0, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 0, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 0, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 0, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 0, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 0, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 0, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 0, N: "plus"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 0, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 0, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 0, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 0, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 0, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 0, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 0, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 0, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 0, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 0, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 0, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 0, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 0, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 0, N: "concat"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 0, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 0, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []

ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}.
----
text/emission-log
from null to ast.LetExpr: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {}.  []
  ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {}
from ast.LetExpr to 4: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {}. Match(ast.LetExpr{id: I, location: S}; {}) []
  ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {I: 0, S: span{from: 0, to: 90}}
from ast.LetExpr to 10: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {}. Match(ast.LetExpr{bodyID: I, id: P}; {}) [I]
  ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {I: 2, P: 0}
from ast.LetExpr to 13: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {}. Match(ast.LetExpr{bindingID: I, id: P}; {}) [I]
  ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {I: 1, P: 0}
from ast.LetExpr to 39: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {}. Match(ast.LetExpr{bodyID: BID, id: I}; {}) [BID]
  ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {BID: 2, I: 0}
from ast.LetExpr to 61: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {}. Match(ast.LetExpr{bindingID: B, bodyID: I, varLoc: L, varName: N}; {}) [B]
  ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {B: 1, I: 2, L: span{from: 4, to: 5}, N: "x"}
from ast.LetExpr to 68: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {}. Match(ast.LetExpr{bodyID: I, id: P}; {}) []
  ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {I: 2, P: 0}
from ast.LetExpr to 69: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {}. Match(ast.LetExpr{bindingID: I, id: P}; {}) []
  ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {I: 1, P: 0}
from ast.LetExpr to 92: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {}. Match(ast.LetExpr{bodyID: I, id: L}; {}) [L]
  ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {I: 2, L: 0}
from ast.LetExpr to 99: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {}. Match(ast.LetExpr{bindingID: I, varLoc: VL}; {}) [VL]
  ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {I: 1, VL: span{from: 4, to: 5}}
from ast.LetExpr to 177: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {}. Match(ast.LetExpr{varLoc: S}; {}) []
  ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {S: span{from: 4, to: 5}}
from ast.LetExpr to 189: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {}. Match(ast.LetExpr{inLoc: S}; {}) []
  ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {S: span{from: 10, to: 13}}
from ast.LetExpr to 190: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {}. Match(ast.LetExpr{letLoc: S}; {}) []
  ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {S: span{from: 0, to: 4}}
from 4 to 0: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {I: 0, S: span{from: 0, to: 90}}. Union []
  ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {I: 0, S: span{from: 0, to: 90}}
from 10 to 11: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {I: 2, P: 0}. Join(ast.ParentExpr, I: 10.bodyID = 9.id) []
from 13 to 14: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {I: 1, P: 0}. Join(ast.ParentExpr, I: 13.bindingID = 12.id) []
from 39 to 41: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {BID: 2, I: 0}. Join(tc.typeLet, BID: 40.id = 39.bodyID) []
from 61 to 63: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {B: 1, I: 2, L: span{from: 4, to: 5}, N: "x"}. Join(tc.scopeLet, B: 62.id = 61.bindingID) []
from 68 to 67: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {I: 2, P: 0}. Union []
  ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {I: 2, P: 0}
from 69 to 67: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {I: 1, P: 0}. Union []
  ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {I: 1, P: 0}
from 92 to 94: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {I: 2, L: 0}. Join(ide.expectedType, L: 93.id = 92.id) []
from 99 to 101: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {I: 1, VL: span{from: 4, to: 5}}. Join(ide.expectedTypeBinding, VL: 100.definitionLoc = 99.varLoc) [UL]
from 177 to 176: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {S: span{from: 4, to: 5}}. Union []
  ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {S: span{from: 4, to: 5}}
from 189 to 188: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {S: span{from: 10, to: 13}}. Union []
  ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {S: span{from: 10, to: 13}}
from 190 to 188: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {S: span{from: 0, to: 4}}. Union []
  ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {S: span{from: 0, to: 4}}
from 0 to ast.Expr: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {I: 0, S: span{from: 0, to: 90}}. Subst({id: I, location: S}) []
  ast.Expr{id: 0, location: span{from: 0, to: 90}}; {I: 0, S: span{from: 0, to: 90}}
from 67 to tc.parentScope: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {I: 2, P: 0}. Subst({id: I, parentID: P}) []
  tc.parentScope{id: 2, parentID: 0}; {I: 2, P: 0}
from 67 to tc.parentScope: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {I: 1, P: 0}. Subst({id: I, parentID: P}) []
  tc.parentScope{id: 1, parentID: 0}; {I: 1, P: 0}
from 176 to hl.varDefn: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {S: span{from: 4, to: 5}}. Subst({span: S}) []
  hl.varDefn{span: span{from: 4, to: 5}}; {S: span{from: 4, to: 5}}
from 188 to hl.segmentKeyword: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {S: span{from: 10, to: 13}}. Subst({highlight: false, span: S, type: "keyword"}) []
  hl.segmentKeyword{highlight: false, span: span{from: 10, to: 13}, type: "keyword"}; {S: span{from: 10, to: 13}}
from 188 to hl.segmentKeyword: ast.LetExpr{bindingID: 1, bodyID: 2, id: 0, inLoc: span{from: 10, to: 13}, letLoc: span{from: 0, to: 4}, location: span{from: 0, to: 90}, varLoc: span{from: 4, to: 5}, varName: "x"}; {S: span{from: 0, to: 4}}. Subst({highlight: false, span: S, type: "keyword"}) []
  hl.segmentKeyword{highlight: false, span: span{from: 0, to: 4}, type: "keyword"}; {S: span{from: 0, to: 4}}
from ast.Expr to 9: ast.Expr{id: 0, location: span{from: 0, to: 90}}; {I: 0, S: span{from: 0, to: 90}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 0, location: span{from: 0, to: 90}}; {I: 0, S: span{from: 0, to: 90}}
from ast.Expr to 12: ast.Expr{id: 0, location: span{from: 0, to: 90}}; {I: 0, S: span{from: 0, to: 90}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 0, location: span{from: 0, to: 90}}; {I: 0, S: span{from: 0, to: 90}}
from ast.Expr to 15: ast.Expr{id: 0, location: span{from: 0, to: 90}}; {I: 0, S: span{from: 0, to: 90}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 0, location: span{from: 0, to: 90}}; {I: 0, S: span{from: 0, to: 90}}
from ast.Expr to 18: ast.Expr{id: 0, location: span{from: 0, to: 90}}; {I: 0, S: span{from: 0, to: 90}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 0, location: span{from: 0, to: 90}}; {I: 0, S: span{from: 0, to: 90}}
from ast.Expr to 21: ast.Expr{id: 0, location: span{from: 0, to: 90}}; {I: 0, S: span{from: 0, to: 90}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 0, location: span{from: 0, to: 90}}; {I: 0, S: span{from: 0, to: 90}}
from ast.Expr to 102: ast.Expr{id: 0, location: span{from: 0, to: 90}}; {I: 0, S: span{from: 0, to: 90}}. Match(ast.Expr{id: UI, location: UL}; {I: UI, S: UL}) [UL]
  ast.Expr{id: 0, location: span{from: 0, to: 90}}; {UI: 0, UL: span{from: 0, to: 90}}
from ast.Expr to 118: ast.Expr{id: 0, location: span{from: 0, to: 90}}; {I: 0, S: span{from: 0, to: 90}}. Match(ast.Expr{id: I, location: span{from: Idx}}; {I: I}) [Idx]
  ast.Expr{id: 0, location: span{from: 0, to: 90}}; {I: 0, Idx: 0}
from ast.Expr to 123: ast.Expr{id: 0, location: span{from: 0, to: 90}}; {I: 0, S: span{from: 0, to: 90}}. Match(ast.Expr{id: I, location: span{from: FIdx, to: TIdx}}; {I: I}) []
  ast.Expr{id: 0, location: span{from: 0, to: 90}}; {FIdx: 0, I: 0, TIdx: 90}
from tc.parentScope to 55: tc.parentScope{id: 2, parentID: 0}; {I: 2, P: 0}. Match(tc.parentScope{id: I, parentID: P}; {I: I, P: P}) [P]
  tc.parentScope{id: 2, parentID: 0}; {I: 2, P: 0}
from tc.parentScope to 55: tc.parentScope{id: 1, parentID: 0}; {I: 1, P: 0}. Match(tc.parentScope{id: I, parentID: P}; {I: I, P: P}) [P]
  tc.parentScope{id: 1, parentID: 0}; {I: 1, P: 0}
from hl.varDefn to 170: hl.varDefn{span: span{from: 4, to: 5}}; {S: span{from: 4, to: 5}}. Match(hl.varDefn{span: S}; {S: S}) [S]
  hl.varDefn{span: span{from: 4, to: 5}}; {S: span{from: 4, to: 5}}
from hl.varDefn to 174: hl.varDefn{span: span{from: 4, to: 5}}; {S: span{from: 4, to: 5}}. Match(hl.varDefn{span: S}; {S: S}) [S]
  hl.varDefn{span: span{from: 4, to: 5}}; {S: span{from: 4, to: 5}}
from hl.segmentKeyword to 167: hl.segmentKeyword{highlight: false, span: span{from: 10, to: 13}, type: "keyword"}; {S: span{from: 10, to: 13}}. Match(hl.segmentKeyword{highlight: H, span: S, type: T}; {S: S}) []
  hl.segmentKeyword{highlight: false, span: span{from: 10, to: 13}, type: "keyword"}; {H: false, S: span{from: 10, to: 13}, T: "keyword"}
from hl.segmentKeyword to 167: hl.segmentKeyword{highlight: false, span: span{from: 0, to: 4}, type: "keyword"}; {S: span{from: 0, to: 4}}. Match(hl.segmentKeyword{highlight: H, span: S, type: T}; {S: S}) []
  hl.segmentKeyword{highlight: false, span: span{from: 0, to: 4}, type: "keyword"}; {H: false, S: span{from: 0, to: 4}, T: "keyword"}
from 9 to 11: ast.Expr{id: 0, location: span{from: 0, to: 90}}; {I: 0, S: span{from: 0, to: 90}}. Join(ast.ParentExpr, I: 10.bodyID = 9.id) []
from 12 to 14: ast.Expr{id: 0, location: span{from: 0, to: 90}}; {I: 0, S: span{from: 0, to: 90}}. Join(ast.ParentExpr, I: 13.bindingID = 12.id) []
from 15 to 17: ast.Expr{id: 0, location: span{from: 0, to: 90}}; {I: 0, S: span{from: 0, to: 90}}. Join(ast.ParentExpr, I: 16.funcID = 15.id) []
from 18 to 20: ast.Expr{id: 0, location: span{from: 0, to: 90}}; {I: 0, S: span{from: 0, to: 90}}. Join(ast.ParentExpr, I: 19.argID = 18.id) []
from 21 to 23: ast.Expr{id: 0, location: span{from: 0, to: 90}}; {I: 0, S: span{from: 0, to: 90}}. Join(ast.ParentExpr, I: 22.body = 21.id) []
from 102 to 103: ast.Expr{id: 0, location: span{from: 0, to: 90}}; {UI: 0, UL: span{from: 0, to: 90}}. Join(ide.expectedTypeBinding, UL: 102.location = 101.usageLoc) [UI]
from 118 to 119: ast.Expr{id: 0, location: span{from: 0, to: 90}}; {I: 0, Idx: 0}. Join(ide.CurrentScope, Idx: 118.location.from = 117.idx) [I]
from 123 to 124: ast.Expr{id: 0, location: span{from: 0, to: 90}}; {FIdx: 0, I: 0, TIdx: 90}. Join(ide.CurrentType, ) [I]
from 55 to 57: tc.parentScope{id: 2, parentID: 0}; {I: 2, P: 0}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
  tc.ScopeItem{id: 2, parentID: 0}; {I: 2, L: "builtin", N: "intToString", P: 0, T: tapp{from: "int", to: "string"}}
  tc.ScopeItem{id: 2, parentID: 0}; {I: 2, L: "builtin", N: "plus", P: 0, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
  tc.ScopeItem{id: 2, parentID: 0}; {I: 2, L: "builtin", N: "concat", P: 0, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 55 to 57: tc.parentScope{id: 1, parentID: 0}; {I: 1, P: 0}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
  tc.ScopeItem{id: 1, parentID: 0}; {I: 1, L: "builtin", N: "intToString", P: 0, T: tapp{from: "int", to: "string"}}
  tc.ScopeItem{id: 1, parentID: 0}; {I: 1, L: "builtin", N: "plus", P: 0, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
  tc.ScopeItem{id: 1, parentID: 0}; {I: 1, L: "builtin", N: "concat", P: 0, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 170 to 172: hl.varDefn{span: span{from: 4, to: 5}}; {S: span{from: 4, to: 5}}. Join(hl.segmentDefn, S: 171.definitionLoc = 170.span) []
from 174 to 175: hl.varDefn{span: span{from: 4, to: 5}}; {S: span{from: 4, to: 5}}. Join(hl.segmentDefnHL, S: 174.span = 173.defnLoc) []
from 167 to 159: hl.segmentKeyword{highlight: false, span: span{from: 10, to: 13}, type: "keyword"}; {H: false, S: span{from: 10, to: 13}, T: "keyword"}. Union []
  hl.segmentKeyword{highlight: false, span: span{from: 10, to: 13}, type: "keyword"}; {H: false, S: span{from: 10, to: 13}, T: "keyword"}
from 167 to 159: hl.segmentKeyword{highlight: false, span: span{from: 0, to: 4}, type: "keyword"}; {H: false, S: span{from: 0, to: 4}, T: "keyword"}. Union []
  hl.segmentKeyword{highlight: false, span: span{from: 0, to: 4}, type: "keyword"}; {H: false, S: span{from: 0, to: 4}, T: "keyword"}
from 57 to 51: tc.ScopeItem{id: 2, parentID: 0}; {I: 2, L: "builtin", N: "intToString", P: 0, T: tapp{from: "int", to: "string"}}. Union []
  tc.ScopeItem{id: 2, parentID: 0}; {I: 2, L: "builtin", N: "intToString", P: 0, T: tapp{from: "int", to: "string"}}
from 57 to 51: tc.ScopeItem{id: 2, parentID: 0}; {I: 2, L: "builtin", N: "plus", P: 0, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Union []
  tc.ScopeItem{id: 2, parentID: 0}; {I: 2, L: "builtin", N: "plus", P: 0, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 57 to 51: tc.ScopeItem{id: 2, parentID: 0}; {I: 2, L: "builtin", N: "concat", P: 0, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Union []
  tc.ScopeItem{id: 2, parentID: 0}; {I: 2, L: "builtin", N: "concat", P: 0, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 57 to 51: tc.ScopeItem{id: 1, parentID: 0}; {I: 1, L: "builtin", N: "intToString", P: 0, T: tapp{from: "int", to: "string"}}. Union []
  tc.ScopeItem{id: 1, parentID: 0}; {I: 1, L: "builtin", N: "intToString", P: 0, T: tapp{from: "int", to: "string"}}
from 57 to 51: tc.ScopeItem{id: 1, parentID: 0}; {I: 1, L: "builtin", N: "plus", P: 0, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Union []
  tc.ScopeItem{id: 1, parentID: 0}; {I: 1, L: "builtin", N: "plus", P: 0, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 57 to 51: tc.ScopeItem{id: 1, parentID: 0}; {I: 1, L: "builtin", N: "concat", P: 0, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Union []
  tc.ScopeItem{id: 1, parentID: 0}; {I: 1, L: "builtin", N: "concat", P: 0, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 159 to hl.Segment: hl.segmentKeyword{highlight: false, span: span{from: 10, to: 13}, type: "keyword"}; {H: false, S: span{from: 10, to: 13}, T: "keyword"}. Subst({highlight: H, span: S, type: T}) []
  hl.Segment{highlight: false, span: span{from: 10, to: 13}, type: "keyword"}; {H: false, S: span{from: 10, to: 13}, T: "keyword"}
from 159 to hl.Segment: hl.segmentKeyword{highlight: false, span: span{from: 0, to: 4}, type: "keyword"}; {H: false, S: span{from: 0, to: 4}, T: "keyword"}. Subst({highlight: H, span: S, type: T}) []
  hl.Segment{highlight: false, span: span{from: 0, to: 4}, type: "keyword"}; {H: false, S: span{from: 0, to: 4}, T: "keyword"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 2, parentID: 0}; {I: 2, L: "builtin", N: "intToString", P: 0, T: tapp{from: "int", to: "string"}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 2, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 2, L: "builtin", N: "intToString", P: 0, T: tapp{from: "int", to: "string"}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 2, parentID: 0}; {I: 2, L: "builtin", N: "plus", P: 0, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 2, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 2, L: "builtin", N: "plus", P: 0, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 2, parentID: 0}; {I: 2, L: "builtin", N: "concat", P: 0, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 2, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 2, L: "builtin", N: "concat", P: 0, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 1, parentID: 0}; {I: 1, L: "builtin", N: "intToString", P: 0, T: tapp{from: "int", to: "string"}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 1, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 1, L: "builtin", N: "intToString", P: 0, T: tapp{from: "int", to: "string"}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 1, parentID: 0}; {I: 1, L: "builtin", N: "plus", P: 0, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 1, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 1, L: "builtin", N: "plus", P: 0, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 1, parentID: 0}; {I: 1, L: "builtin", N: "concat", P: 0, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 1, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 1, L: "builtin", N: "concat", P: 0, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 2, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 2, L: "builtin", N: "intToString", P: 0, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 2, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 2, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 2, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 2, L: "builtin", N: "intToString", P: 0, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 2, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 2, T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 2, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 2, L: "builtin", N: "intToString", P: 0, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 2, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 2, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 2, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 2, L: "builtin", N: "intToString", P: 0, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 2, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 2, N: "intToString", TF: "int", TT: "string"}
from tc.ScopeItem to 88: tc.ScopeItem{id: 2, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 2, L: "builtin", N: "intToString", P: 0, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 2, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 2, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 2, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 2, L: "builtin", N: "intToString", P: 0, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 2, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 2, N: "intToString"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 2, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 2, L: "builtin", N: "intToString", P: 0, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 2, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 2, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 2, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 2, L: "builtin", N: "plus", P: 0, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 2, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 2, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 2, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 2, L: "builtin", N: "plus", P: 0, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 2, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 2, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 2, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 2, L: "builtin", N: "plus", P: 0, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 2, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 2, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 2, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 2, L: "builtin", N: "plus", P: 0, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 2, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 2, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 2, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 2, L: "builtin", N: "plus", P: 0, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 2, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 2, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 2, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 2, L: "builtin", N: "plus", P: 0, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 2, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 2, N: "plus"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 2, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 2, L: "builtin", N: "plus", P: 0, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 2, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 2, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 2, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 2, L: "builtin", N: "concat", P: 0, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 2, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 2, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 2, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 2, L: "builtin", N: "concat", P: 0, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 2, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 2, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 2, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 2, L: "builtin", N: "concat", P: 0, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 2, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 2, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 2, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 2, L: "builtin", N: "concat", P: 0, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 2, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 2, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 2, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 2, L: "builtin", N: "concat", P: 0, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 2, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 2, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 2, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 2, L: "builtin", N: "concat", P: 0, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 2, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 2, N: "concat"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 2, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 2, L: "builtin", N: "concat", P: 0, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 2, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 2, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 1, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 1, L: "builtin", N: "intToString", P: 0, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 1, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 1, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 1, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 1, L: "builtin", N: "intToString", P: 0, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 1, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 1, T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 1, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 1, L: "builtin", N: "intToString", P: 0, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 1, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 1, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 1, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 1, L: "builtin", N: "intToString", P: 0, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 1, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 1, N: "intToString", TF: "int", TT: "string"}
from tc.ScopeItem to 88: tc.ScopeItem{id: 1, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 1, L: "builtin", N: "intToString", P: 0, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 1, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 1, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 1, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 1, L: "builtin", N: "intToString", P: 0, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 1, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 1, N: "intToString"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 1, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 1, L: "builtin", N: "intToString", P: 0, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 1, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 1, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 1, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 1, L: "builtin", N: "plus", P: 0, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 1, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 1, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 1, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 1, L: "builtin", N: "plus", P: 0, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 1, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 1, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 1, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 1, L: "builtin", N: "plus", P: 0, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 1, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 1, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 1, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 1, L: "builtin", N: "plus", P: 0, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 1, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 1, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 1, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 1, L: "builtin", N: "plus", P: 0, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 1, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 1, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 1, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 1, L: "builtin", N: "plus", P: 0, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 1, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 1, N: "plus"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 1, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 1, L: "builtin", N: "plus", P: 0, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 1, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 1, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 1, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 1, L: "builtin", N: "concat", P: 0, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 1, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 1, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 1, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 1, L: "builtin", N: "concat", P: 0, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 1, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 1, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 1, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 1, L: "builtin", N: "concat", P: 0, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 1, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 1, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 1, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 1, L: "builtin", N: "concat", P: 0, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 1, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 1, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 1, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 1, L: "builtin", N: "concat", P: 0, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 1, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 1, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 1, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 1, L: "builtin", N: "concat", P: 0, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 1, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 1, N: "concat"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 1, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 1, L: "builtin", N: "concat", P: 0, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 1, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 1, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 43 to 44: tc.ScopeItem{id: 2, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 2, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 2, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 2, T: tapp{from: "int", to: "string"}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 2, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 2, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 2, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 2, N: "intToString", TF: "int", TT: "string"}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 2, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 2, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 2, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 2, N: "intToString"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 2, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 2, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 2, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 2, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 2, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 2, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 2, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 2, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 2, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 2, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 2, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 2, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 2, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 2, N: "plus"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 2, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 2, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 2, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 2, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 2, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 2, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 2, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 2, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 2, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 2, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 2, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 2, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 2, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 2, N: "concat"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 2, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 2, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 1, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 1, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 1, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 1, T: tapp{from: "int", to: "string"}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 1, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 1, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 1, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 1, N: "intToString", TF: "int", TT: "string"}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 1, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 1, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 1, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 1, N: "intToString"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 1, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 1, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 1, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 1, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 1, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 1, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 1, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 1, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 1, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 1, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 1, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 1, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 1, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 1, N: "plus"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 1, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 1, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 1, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 1, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 1, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 1, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 1, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 1, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 1, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 1, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 1, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 1, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 1, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 1, N: "concat"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 1, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 1, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []

ast.IntLit{id: 1, location: span{from: 8, to: 9}, val: 2}.
----
text/emission-log
from null to ast.IntLit: ast.IntLit{id: 1, location: span{from: 8, to: 9}, val: 2}; {}.  []
  ast.IntLit{id: 1, location: span{from: 8, to: 9}, val: 2}; {}
from ast.IntLit to 2: ast.IntLit{id: 1, location: span{from: 8, to: 9}, val: 2}; {}. Match(ast.IntLit{id: I, location: S}; {}) []
  ast.IntLit{id: 1, location: span{from: 8, to: 9}, val: 2}; {I: 1, S: span{from: 8, to: 9}}
from ast.IntLit to 33: ast.IntLit{id: 1, location: span{from: 8, to: 9}, val: 2}; {}. Match(ast.IntLit{id: I}; {}) []
  ast.IntLit{id: 1, location: span{from: 8, to: 9}, val: 2}; {I: 1}
from ast.IntLit to 187: ast.IntLit{id: 1, location: span{from: 8, to: 9}, val: 2}; {}. Match(ast.IntLit{location: S}; {}) []
  ast.IntLit{id: 1, location: span{from: 8, to: 9}, val: 2}; {S: span{from: 8, to: 9}}
from 2 to 0: ast.IntLit{id: 1, location: span{from: 8, to: 9}, val: 2}; {I: 1, S: span{from: 8, to: 9}}. Union []
  ast.IntLit{id: 1, location: span{from: 8, to: 9}, val: 2}; {I: 1, S: span{from: 8, to: 9}}
from 33 to tc.typeI: ast.IntLit{id: 1, location: span{from: 8, to: 9}, val: 2}; {I: 1}. Subst({id: I, type: "int"}) []
  tc.typeI{id: 1, type: "int"}; {I: 1}
from 187 to hl.segmentInt: ast.IntLit{id: 1, location: span{from: 8, to: 9}, val: 2}; {S: span{from: 8, to: 9}}. Subst({highlight: false, span: S, type: "int"}) []
  hl.segmentInt{highlight: false, span: span{from: 8, to: 9}, type: "int"}; {S: span{from: 8, to: 9}}
from 0 to ast.Expr: ast.IntLit{id: 1, location: span{from: 8, to: 9}, val: 2}; {I: 1, S: span{from: 8, to: 9}}. Subst({id: I, location: S}) []
  ast.Expr{id: 1, location: span{from: 8, to: 9}}; {I: 1, S: span{from: 8, to: 9}}
from tc.typeI to 26: tc.typeI{id: 1, type: "int"}; {I: 1}. Match(tc.typeI{id: I, type: T}; {I: I}) []
  tc.typeI{id: 1, type: "int"}; {I: 1, T: "int"}
from hl.segmentInt to 166: hl.segmentInt{highlight: false, span: span{from: 8, to: 9}, type: "int"}; {S: span{from: 8, to: 9}}. Match(hl.segmentInt{highlight: H, span: S, type: T}; {S: S}) []
  hl.segmentInt{highlight: false, span: span{from: 8, to: 9}, type: "int"}; {H: false, S: span{from: 8, to: 9}, T: "int"}
from ast.Expr to 9: ast.Expr{id: 1, location: span{from: 8, to: 9}}; {I: 1, S: span{from: 8, to: 9}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 1, location: span{from: 8, to: 9}}; {I: 1, S: span{from: 8, to: 9}}
from ast.Expr to 12: ast.Expr{id: 1, location: span{from: 8, to: 9}}; {I: 1, S: span{from: 8, to: 9}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 1, location: span{from: 8, to: 9}}; {I: 1, S: span{from: 8, to: 9}}
from ast.Expr to 15: ast.Expr{id: 1, location: span{from: 8, to: 9}}; {I: 1, S: span{from: 8, to: 9}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 1, location: span{from: 8, to: 9}}; {I: 1, S: span{from: 8, to: 9}}
from ast.Expr to 18: ast.Expr{id: 1, location: span{from: 8, to: 9}}; {I: 1, S: span{from: 8, to: 9}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 1, location: span{from: 8, to: 9}}; {I: 1, S: span{from: 8, to: 9}}
from ast.Expr to 21: ast.Expr{id: 1, location: span{from: 8, to: 9}}; {I: 1, S: span{from: 8, to: 9}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 1, location: span{from: 8, to: 9}}; {I: 1, S: span{from: 8, to: 9}}
from ast.Expr to 102: ast.Expr{id: 1, location: span{from: 8, to: 9}}; {I: 1, S: span{from: 8, to: 9}}. Match(ast.Expr{id: UI, location: UL}; {I: UI, S: UL}) [UL]
  ast.Expr{id: 1, location: span{from: 8, to: 9}}; {UI: 1, UL: span{from: 8, to: 9}}
from ast.Expr to 118: ast.Expr{id: 1, location: span{from: 8, to: 9}}; {I: 1, S: span{from: 8, to: 9}}. Match(ast.Expr{id: I, location: span{from: Idx}}; {I: I}) [Idx]
  ast.Expr{id: 1, location: span{from: 8, to: 9}}; {I: 1, Idx: 8}
from ast.Expr to 123: ast.Expr{id: 1, location: span{from: 8, to: 9}}; {I: 1, S: span{from: 8, to: 9}}. Match(ast.Expr{id: I, location: span{from: FIdx, to: TIdx}}; {I: I}) []
  ast.Expr{id: 1, location: span{from: 8, to: 9}}; {FIdx: 8, I: 1, TIdx: 9}
from 26 to 24: tc.typeI{id: 1, type: "int"}; {I: 1, T: "int"}. Union []
  tc.typeI{id: 1, type: "int"}; {I: 1, T: "int"}
from 166 to 159: hl.segmentInt{highlight: false, span: span{from: 8, to: 9}, type: "int"}; {H: false, S: span{from: 8, to: 9}, T: "int"}. Union []
  hl.segmentInt{highlight: false, span: span{from: 8, to: 9}, type: "int"}; {H: false, S: span{from: 8, to: 9}, T: "int"}
from 9 to 11: ast.Expr{id: 1, location: span{from: 8, to: 9}}; {I: 1, S: span{from: 8, to: 9}}. Join(ast.ParentExpr, I: 10.bodyID = 9.id) []
from 12 to 14: ast.Expr{id: 1, location: span{from: 8, to: 9}}; {I: 1, S: span{from: 8, to: 9}}. Join(ast.ParentExpr, I: 13.bindingID = 12.id) []
  ast.ParentExpr{id: 1, location: span{from: 8, to: 9}}; {I: 1, P: 0, S: span{from: 8, to: 9}}
from 15 to 17: ast.Expr{id: 1, location: span{from: 8, to: 9}}; {I: 1, S: span{from: 8, to: 9}}. Join(ast.ParentExpr, I: 16.funcID = 15.id) []
from 18 to 20: ast.Expr{id: 1, location: span{from: 8, to: 9}}; {I: 1, S: span{from: 8, to: 9}}. Join(ast.ParentExpr, I: 19.argID = 18.id) []
from 21 to 23: ast.Expr{id: 1, location: span{from: 8, to: 9}}; {I: 1, S: span{from: 8, to: 9}}. Join(ast.ParentExpr, I: 22.body = 21.id) []
from 102 to 103: ast.Expr{id: 1, location: span{from: 8, to: 9}}; {UI: 1, UL: span{from: 8, to: 9}}. Join(ide.expectedTypeBinding, UL: 102.location = 101.usageLoc) [UI]
from 118 to 119: ast.Expr{id: 1, location: span{from: 8, to: 9}}; {I: 1, Idx: 8}. Join(ide.CurrentScope, Idx: 118.location.from = 117.idx) [I]
from 123 to 124: ast.Expr{id: 1, location: span{from: 8, to: 9}}; {FIdx: 8, I: 1, TIdx: 9}. Join(ide.CurrentType, ) [I]
from 24 to tc.Type: tc.typeI{id: 1, type: "int"}; {I: 1, T: "int"}. Subst({id: I, type: T}) []
  tc.Type{id: 1, type: "int"}; {I: 1, T: "int"}
from 159 to hl.Segment: hl.segmentInt{highlight: false, span: span{from: 8, to: 9}, type: "int"}; {H: false, S: span{from: 8, to: 9}, T: "int"}. Subst({highlight: H, span: S, type: T}) []
  hl.Segment{highlight: false, span: span{from: 8, to: 9}, type: "int"}; {H: false, S: span{from: 8, to: 9}, T: "int"}
from 14 to 8: ast.ParentExpr{id: 1, location: span{from: 8, to: 9}}; {I: 1, P: 0, S: span{from: 8, to: 9}}. Union []
  ast.ParentExpr{id: 1, location: span{from: 8, to: 9}}; {I: 1, P: 0, S: span{from: 8, to: 9}}
from tc.Type to 35: tc.Type{id: 1, type: "int"}; {I: 1, T: "int"}. Match(tc.Type{id: FID, type: tapp{from: F, to: T}}; {I: FID}) [FID]
from tc.Type to 37: tc.Type{id: 1, type: "int"}; {I: 1, T: "int"}. Match(tc.Type{id: AID, type: F}; {I: AID, T: F}) [F]
  tc.Type{id: 1, type: "int"}; {AID: 1, F: "int"}
from tc.Type to 40: tc.Type{id: 1, type: "int"}; {I: 1, T: "int"}. Match(tc.Type{id: BID, type: T}; {I: BID, T: T}) [BID]
  tc.Type{id: 1, type: "int"}; {BID: 1, T: "int"}
from tc.Type to 48: tc.Type{id: 1, type: "int"}; {I: 1, T: "int"}. Match(tc.Type{id: B, type: R}; {I: B, T: R}) []
  tc.Type{id: 1, type: "int"}; {B: 1, R: "int"}
from tc.Type to 62: tc.Type{id: 1, type: "int"}; {I: 1, T: "int"}. Match(tc.Type{id: B, type: T}; {I: B, T: T}) [B]
  tc.Type{id: 1, type: "int"}; {B: 1, T: "int"}
from tc.Type to 96: tc.Type{id: 1, type: "int"}; {I: 1, T: "int"}. Match(tc.Type{id: F, type: tapp{from: T}}; {I: F}) [F]
from tc.Type to 125: tc.Type{id: 1, type: "int"}; {I: 1, T: "int"}. Match(tc.Type{id: I, type: T}; {I: I, T: T}) [I]
  tc.Type{id: 1, type: "int"}; {I: 1, T: "int"}
from 8 to ast.ParentExpr: ast.ParentExpr{id: 1, location: span{from: 8, to: 9}}; {I: 1, P: 0, S: span{from: 8, to: 9}}. Subst({id: I, parent: P, span: S}) []
  ast.ParentExpr{id: 1, parent: 0, span: span{from: 8, to: 9}}; {I: 1, P: 0, S: span{from: 8, to: 9}}
from 37 to 38: tc.Type{id: 1, type: "int"}; {AID: 1, F: "int"}. Join(tc.typeFC, F: 37.type = 36.type.from) []
from 40 to 41: tc.Type{id: 1, type: "int"}; {BID: 1, T: "int"}. Join(tc.typeLet, BID: 40.id = 39.bodyID) []
from 48 to 49: tc.Type{id: 1, type: "int"}; {B: 1, R: "int"}. Join(tc.typeLambda, ) []
from 62 to 63: tc.Type{id: 1, type: "int"}; {B: 1, T: "int"}. Join(tc.scopeLet, B: 62.id = 61.bindingID) []
  tc.scopeLet{id: 1, type: "int"}; {B: 1, I: 2, L: span{from: 4, to: 5}, N: "x", T: "int"}
from 125 to 126: tc.Type{id: 1, type: "int"}; {I: 1, T: "int"}. Join(ide.CurrentType, I: 125.id = 124.id) []
from 63 to tc.scopeLet: tc.scopeLet{id: 1, type: "int"}; {B: 1, I: 2, L: span{from: 4, to: 5}, N: "x", T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.scopeLet{id: 2, location: span{from: 4, to: 5}, name: "x", type: "int"}; {B: 1, I: 2, L: span{from: 4, to: 5}, N: "x", T: "int"}
from tc.scopeLet to 53: tc.scopeLet{id: 2, location: span{from: 4, to: 5}, name: "x", type: "int"}; {B: 1, I: 2, L: span{from: 4, to: 5}, N: "x", T: "int"}. Match(tc.scopeLet{id: I, location: L, name: N, type: T}; {I: I, L: L, N: N, T: T}) []
  tc.scopeLet{id: 2, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 2, L: span{from: 4, to: 5}, N: "x", T: "int"}
from 53 to 51: tc.scopeLet{id: 2, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 2, L: span{from: 4, to: 5}, N: "x", T: "int"}. Union []
  tc.scopeLet{id: 2, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 2, L: span{from: 4, to: 5}, N: "x", T: "int"}
from 51 to tc.ScopeItem: tc.scopeLet{id: 2, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 2, L: span{from: 4, to: 5}, N: "x", T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 2, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 2, L: span{from: 4, to: 5}, N: "x", T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 2, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 2, L: span{from: 4, to: 5}, N: "x", T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 2, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 2, N: "x", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 2, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 2, L: span{from: 4, to: 5}, N: "x", T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 2, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 2, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 2, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 2, L: span{from: 4, to: 5}, N: "x", T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 2, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 2, N: "x", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 2, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 2, L: span{from: 4, to: 5}, N: "x", T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 2, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 2, L: span{from: 4, to: 5}, N: "x", T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 2, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 2, N: "x", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 2, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 2, L: span{from: 4, to: 5}, N: "x", T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 2, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 2, N: "x"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 2, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 2, L: span{from: 4, to: 5}, N: "x", T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 2, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 2, N: "x", T: "int"}
from 43 to 44: tc.ScopeItem{id: 2, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 2, N: "x", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 2, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 2, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 2, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 2, N: "x", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 2, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 2, N: "x", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 2, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 2, N: "x"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 2, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 2, N: "x", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []

ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}.
----
text/emission-log
from null to ast.LetExpr: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {}.  []
  ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {}
from ast.LetExpr to 4: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {}. Match(ast.LetExpr{id: I, location: S}; {}) []
  ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {I: 2, S: span{from: 13, to: 90}}
from ast.LetExpr to 10: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {}. Match(ast.LetExpr{bodyID: I, id: P}; {}) [I]
  ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {I: 4, P: 2}
from ast.LetExpr to 13: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {}. Match(ast.LetExpr{bindingID: I, id: P}; {}) [I]
  ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {I: 3, P: 2}
from ast.LetExpr to 39: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {}. Match(ast.LetExpr{bodyID: BID, id: I}; {}) [BID]
  ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {BID: 4, I: 2}
from ast.LetExpr to 61: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {}. Match(ast.LetExpr{bindingID: B, bodyID: I, varLoc: L, varName: N}; {}) [B]
  ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {B: 3, I: 4, L: span{from: 17, to: 18}, N: "y"}
from ast.LetExpr to 68: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {}. Match(ast.LetExpr{bodyID: I, id: P}; {}) []
  ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {I: 4, P: 2}
from ast.LetExpr to 69: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {}. Match(ast.LetExpr{bindingID: I, id: P}; {}) []
  ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {I: 3, P: 2}
from ast.LetExpr to 92: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {}. Match(ast.LetExpr{bodyID: I, id: L}; {}) [L]
  ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {I: 4, L: 2}
from ast.LetExpr to 99: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {}. Match(ast.LetExpr{bindingID: I, varLoc: VL}; {}) [VL]
  ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {I: 3, VL: span{from: 17, to: 18}}
from ast.LetExpr to 177: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {}. Match(ast.LetExpr{varLoc: S}; {}) []
  ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {S: span{from: 17, to: 18}}
from ast.LetExpr to 189: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {}. Match(ast.LetExpr{inLoc: S}; {}) []
  ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {S: span{from: 23, to: 26}}
from ast.LetExpr to 190: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {}. Match(ast.LetExpr{letLoc: S}; {}) []
  ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {S: span{from: 13, to: 17}}
from 4 to 0: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {I: 2, S: span{from: 13, to: 90}}. Union []
  ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {I: 2, S: span{from: 13, to: 90}}
from 10 to 11: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {I: 4, P: 2}. Join(ast.ParentExpr, I: 10.bodyID = 9.id) []
from 13 to 14: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {I: 3, P: 2}. Join(ast.ParentExpr, I: 13.bindingID = 12.id) []
from 39 to 41: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {BID: 4, I: 2}. Join(tc.typeLet, BID: 40.id = 39.bodyID) []
from 61 to 63: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {B: 3, I: 4, L: span{from: 17, to: 18}, N: "y"}. Join(tc.scopeLet, B: 62.id = 61.bindingID) []
from 68 to 67: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {I: 4, P: 2}. Union []
  ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {I: 4, P: 2}
from 69 to 67: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {I: 3, P: 2}. Union []
  ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {I: 3, P: 2}
from 92 to 94: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {I: 4, L: 2}. Join(ide.expectedType, L: 93.id = 92.id) []
from 99 to 101: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {I: 3, VL: span{from: 17, to: 18}}. Join(ide.expectedTypeBinding, VL: 100.definitionLoc = 99.varLoc) [UL]
from 177 to 176: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {S: span{from: 17, to: 18}}. Union []
  ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {S: span{from: 17, to: 18}}
from 189 to 188: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {S: span{from: 23, to: 26}}. Union []
  ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {S: span{from: 23, to: 26}}
from 190 to 188: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {S: span{from: 13, to: 17}}. Union []
  ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {S: span{from: 13, to: 17}}
from 0 to ast.Expr: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {I: 2, S: span{from: 13, to: 90}}. Subst({id: I, location: S}) []
  ast.Expr{id: 2, location: span{from: 13, to: 90}}; {I: 2, S: span{from: 13, to: 90}}
from 67 to tc.parentScope: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {I: 4, P: 2}. Subst({id: I, parentID: P}) []
  tc.parentScope{id: 4, parentID: 2}; {I: 4, P: 2}
from 67 to tc.parentScope: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {I: 3, P: 2}. Subst({id: I, parentID: P}) []
  tc.parentScope{id: 3, parentID: 2}; {I: 3, P: 2}
from 176 to hl.varDefn: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {S: span{from: 17, to: 18}}. Subst({span: S}) []
  hl.varDefn{span: span{from: 17, to: 18}}; {S: span{from: 17, to: 18}}
from 188 to hl.segmentKeyword: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {S: span{from: 23, to: 26}}. Subst({highlight: false, span: S, type: "keyword"}) []
  hl.segmentKeyword{highlight: false, span: span{from: 23, to: 26}, type: "keyword"}; {S: span{from: 23, to: 26}}
from 188 to hl.segmentKeyword: ast.LetExpr{bindingID: 3, bodyID: 4, id: 2, inLoc: span{from: 23, to: 26}, letLoc: span{from: 13, to: 17}, location: span{from: 13, to: 90}, varLoc: span{from: 17, to: 18}, varName: "y"}; {S: span{from: 13, to: 17}}. Subst({highlight: false, span: S, type: "keyword"}) []
  hl.segmentKeyword{highlight: false, span: span{from: 13, to: 17}, type: "keyword"}; {S: span{from: 13, to: 17}}
from ast.Expr to 9: ast.Expr{id: 2, location: span{from: 13, to: 90}}; {I: 2, S: span{from: 13, to: 90}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 2, location: span{from: 13, to: 90}}; {I: 2, S: span{from: 13, to: 90}}
from ast.Expr to 12: ast.Expr{id: 2, location: span{from: 13, to: 90}}; {I: 2, S: span{from: 13, to: 90}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 2, location: span{from: 13, to: 90}}; {I: 2, S: span{from: 13, to: 90}}
from ast.Expr to 15: ast.Expr{id: 2, location: span{from: 13, to: 90}}; {I: 2, S: span{from: 13, to: 90}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 2, location: span{from: 13, to: 90}}; {I: 2, S: span{from: 13, to: 90}}
from ast.Expr to 18: ast.Expr{id: 2, location: span{from: 13, to: 90}}; {I: 2, S: span{from: 13, to: 90}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 2, location: span{from: 13, to: 90}}; {I: 2, S: span{from: 13, to: 90}}
from ast.Expr to 21: ast.Expr{id: 2, location: span{from: 13, to: 90}}; {I: 2, S: span{from: 13, to: 90}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 2, location: span{from: 13, to: 90}}; {I: 2, S: span{from: 13, to: 90}}
from ast.Expr to 102: ast.Expr{id: 2, location: span{from: 13, to: 90}}; {I: 2, S: span{from: 13, to: 90}}. Match(ast.Expr{id: UI, location: UL}; {I: UI, S: UL}) [UL]
  ast.Expr{id: 2, location: span{from: 13, to: 90}}; {UI: 2, UL: span{from: 13, to: 90}}
from ast.Expr to 118: ast.Expr{id: 2, location: span{from: 13, to: 90}}; {I: 2, S: span{from: 13, to: 90}}. Match(ast.Expr{id: I, location: span{from: Idx}}; {I: I}) [Idx]
  ast.Expr{id: 2, location: span{from: 13, to: 90}}; {I: 2, Idx: 13}
from ast.Expr to 123: ast.Expr{id: 2, location: span{from: 13, to: 90}}; {I: 2, S: span{from: 13, to: 90}}. Match(ast.Expr{id: I, location: span{from: FIdx, to: TIdx}}; {I: I}) []
  ast.Expr{id: 2, location: span{from: 13, to: 90}}; {FIdx: 13, I: 2, TIdx: 90}
from tc.parentScope to 55: tc.parentScope{id: 4, parentID: 2}; {I: 4, P: 2}. Match(tc.parentScope{id: I, parentID: P}; {I: I, P: P}) [P]
  tc.parentScope{id: 4, parentID: 2}; {I: 4, P: 2}
from tc.parentScope to 55: tc.parentScope{id: 3, parentID: 2}; {I: 3, P: 2}. Match(tc.parentScope{id: I, parentID: P}; {I: I, P: P}) [P]
  tc.parentScope{id: 3, parentID: 2}; {I: 3, P: 2}
from hl.varDefn to 170: hl.varDefn{span: span{from: 17, to: 18}}; {S: span{from: 17, to: 18}}. Match(hl.varDefn{span: S}; {S: S}) [S]
  hl.varDefn{span: span{from: 17, to: 18}}; {S: span{from: 17, to: 18}}
from hl.varDefn to 174: hl.varDefn{span: span{from: 17, to: 18}}; {S: span{from: 17, to: 18}}. Match(hl.varDefn{span: S}; {S: S}) [S]
  hl.varDefn{span: span{from: 17, to: 18}}; {S: span{from: 17, to: 18}}
from hl.segmentKeyword to 167: hl.segmentKeyword{highlight: false, span: span{from: 23, to: 26}, type: "keyword"}; {S: span{from: 23, to: 26}}. Match(hl.segmentKeyword{highlight: H, span: S, type: T}; {S: S}) []
  hl.segmentKeyword{highlight: false, span: span{from: 23, to: 26}, type: "keyword"}; {H: false, S: span{from: 23, to: 26}, T: "keyword"}
from hl.segmentKeyword to 167: hl.segmentKeyword{highlight: false, span: span{from: 13, to: 17}, type: "keyword"}; {S: span{from: 13, to: 17}}. Match(hl.segmentKeyword{highlight: H, span: S, type: T}; {S: S}) []
  hl.segmentKeyword{highlight: false, span: span{from: 13, to: 17}, type: "keyword"}; {H: false, S: span{from: 13, to: 17}, T: "keyword"}
from 9 to 11: ast.Expr{id: 2, location: span{from: 13, to: 90}}; {I: 2, S: span{from: 13, to: 90}}. Join(ast.ParentExpr, I: 10.bodyID = 9.id) []
  ast.ParentExpr{id: 2, location: span{from: 13, to: 90}}; {I: 2, P: 0, S: span{from: 13, to: 90}}
from 12 to 14: ast.Expr{id: 2, location: span{from: 13, to: 90}}; {I: 2, S: span{from: 13, to: 90}}. Join(ast.ParentExpr, I: 13.bindingID = 12.id) []
from 15 to 17: ast.Expr{id: 2, location: span{from: 13, to: 90}}; {I: 2, S: span{from: 13, to: 90}}. Join(ast.ParentExpr, I: 16.funcID = 15.id) []
from 18 to 20: ast.Expr{id: 2, location: span{from: 13, to: 90}}; {I: 2, S: span{from: 13, to: 90}}. Join(ast.ParentExpr, I: 19.argID = 18.id) []
from 21 to 23: ast.Expr{id: 2, location: span{from: 13, to: 90}}; {I: 2, S: span{from: 13, to: 90}}. Join(ast.ParentExpr, I: 22.body = 21.id) []
from 102 to 103: ast.Expr{id: 2, location: span{from: 13, to: 90}}; {UI: 2, UL: span{from: 13, to: 90}}. Join(ide.expectedTypeBinding, UL: 102.location = 101.usageLoc) [UI]
from 118 to 119: ast.Expr{id: 2, location: span{from: 13, to: 90}}; {I: 2, Idx: 13}. Join(ide.CurrentScope, Idx: 118.location.from = 117.idx) [I]
from 123 to 124: ast.Expr{id: 2, location: span{from: 13, to: 90}}; {FIdx: 13, I: 2, TIdx: 90}. Join(ide.CurrentType, ) [I]
from 55 to 57: tc.parentScope{id: 4, parentID: 2}; {I: 4, P: 2}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
  tc.ScopeItem{id: 4, parentID: 2}; {I: 4, L: "builtin", N: "intToString", P: 2, T: tapp{from: "int", to: "string"}}
  tc.ScopeItem{id: 4, parentID: 2}; {I: 4, L: "builtin", N: "plus", P: 2, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
  tc.ScopeItem{id: 4, parentID: 2}; {I: 4, L: "builtin", N: "concat", P: 2, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
  tc.ScopeItem{id: 4, parentID: 2}; {I: 4, L: span{from: 4, to: 5}, N: "x", P: 2, T: "int"}
from 55 to 57: tc.parentScope{id: 3, parentID: 2}; {I: 3, P: 2}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
  tc.ScopeItem{id: 3, parentID: 2}; {I: 3, L: "builtin", N: "intToString", P: 2, T: tapp{from: "int", to: "string"}}
  tc.ScopeItem{id: 3, parentID: 2}; {I: 3, L: "builtin", N: "plus", P: 2, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
  tc.ScopeItem{id: 3, parentID: 2}; {I: 3, L: "builtin", N: "concat", P: 2, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
  tc.ScopeItem{id: 3, parentID: 2}; {I: 3, L: span{from: 4, to: 5}, N: "x", P: 2, T: "int"}
from 170 to 172: hl.varDefn{span: span{from: 17, to: 18}}; {S: span{from: 17, to: 18}}. Join(hl.segmentDefn, S: 171.definitionLoc = 170.span) []
from 174 to 175: hl.varDefn{span: span{from: 17, to: 18}}; {S: span{from: 17, to: 18}}. Join(hl.segmentDefnHL, S: 174.span = 173.defnLoc) []
from 167 to 159: hl.segmentKeyword{highlight: false, span: span{from: 23, to: 26}, type: "keyword"}; {H: false, S: span{from: 23, to: 26}, T: "keyword"}. Union []
  hl.segmentKeyword{highlight: false, span: span{from: 23, to: 26}, type: "keyword"}; {H: false, S: span{from: 23, to: 26}, T: "keyword"}
from 167 to 159: hl.segmentKeyword{highlight: false, span: span{from: 13, to: 17}, type: "keyword"}; {H: false, S: span{from: 13, to: 17}, T: "keyword"}. Union []
  hl.segmentKeyword{highlight: false, span: span{from: 13, to: 17}, type: "keyword"}; {H: false, S: span{from: 13, to: 17}, T: "keyword"}
from 11 to 8: ast.ParentExpr{id: 2, location: span{from: 13, to: 90}}; {I: 2, P: 0, S: span{from: 13, to: 90}}. Union []
  ast.ParentExpr{id: 2, location: span{from: 13, to: 90}}; {I: 2, P: 0, S: span{from: 13, to: 90}}
from 57 to 51: tc.ScopeItem{id: 4, parentID: 2}; {I: 4, L: "builtin", N: "intToString", P: 2, T: tapp{from: "int", to: "string"}}. Union []
  tc.ScopeItem{id: 4, parentID: 2}; {I: 4, L: "builtin", N: "intToString", P: 2, T: tapp{from: "int", to: "string"}}
from 57 to 51: tc.ScopeItem{id: 4, parentID: 2}; {I: 4, L: "builtin", N: "plus", P: 2, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Union []
  tc.ScopeItem{id: 4, parentID: 2}; {I: 4, L: "builtin", N: "plus", P: 2, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 57 to 51: tc.ScopeItem{id: 4, parentID: 2}; {I: 4, L: "builtin", N: "concat", P: 2, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Union []
  tc.ScopeItem{id: 4, parentID: 2}; {I: 4, L: "builtin", N: "concat", P: 2, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 57 to 51: tc.ScopeItem{id: 4, parentID: 2}; {I: 4, L: span{from: 4, to: 5}, N: "x", P: 2, T: "int"}. Union []
  tc.ScopeItem{id: 4, parentID: 2}; {I: 4, L: span{from: 4, to: 5}, N: "x", P: 2, T: "int"}
from 57 to 51: tc.ScopeItem{id: 3, parentID: 2}; {I: 3, L: "builtin", N: "intToString", P: 2, T: tapp{from: "int", to: "string"}}. Union []
  tc.ScopeItem{id: 3, parentID: 2}; {I: 3, L: "builtin", N: "intToString", P: 2, T: tapp{from: "int", to: "string"}}
from 57 to 51: tc.ScopeItem{id: 3, parentID: 2}; {I: 3, L: "builtin", N: "plus", P: 2, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Union []
  tc.ScopeItem{id: 3, parentID: 2}; {I: 3, L: "builtin", N: "plus", P: 2, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 57 to 51: tc.ScopeItem{id: 3, parentID: 2}; {I: 3, L: "builtin", N: "concat", P: 2, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Union []
  tc.ScopeItem{id: 3, parentID: 2}; {I: 3, L: "builtin", N: "concat", P: 2, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 57 to 51: tc.ScopeItem{id: 3, parentID: 2}; {I: 3, L: span{from: 4, to: 5}, N: "x", P: 2, T: "int"}. Union []
  tc.ScopeItem{id: 3, parentID: 2}; {I: 3, L: span{from: 4, to: 5}, N: "x", P: 2, T: "int"}
from 159 to hl.Segment: hl.segmentKeyword{highlight: false, span: span{from: 23, to: 26}, type: "keyword"}; {H: false, S: span{from: 23, to: 26}, T: "keyword"}. Subst({highlight: H, span: S, type: T}) []
  hl.Segment{highlight: false, span: span{from: 23, to: 26}, type: "keyword"}; {H: false, S: span{from: 23, to: 26}, T: "keyword"}
from 159 to hl.Segment: hl.segmentKeyword{highlight: false, span: span{from: 13, to: 17}, type: "keyword"}; {H: false, S: span{from: 13, to: 17}, T: "keyword"}. Subst({highlight: H, span: S, type: T}) []
  hl.Segment{highlight: false, span: span{from: 13, to: 17}, type: "keyword"}; {H: false, S: span{from: 13, to: 17}, T: "keyword"}
from 8 to ast.ParentExpr: ast.ParentExpr{id: 2, location: span{from: 13, to: 90}}; {I: 2, P: 0, S: span{from: 13, to: 90}}. Subst({id: I, parent: P, span: S}) []
  ast.ParentExpr{id: 2, parent: 0, span: span{from: 13, to: 90}}; {I: 2, P: 0, S: span{from: 13, to: 90}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 4, parentID: 2}; {I: 4, L: "builtin", N: "intToString", P: 2, T: tapp{from: "int", to: "string"}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 4, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 4, L: "builtin", N: "intToString", P: 2, T: tapp{from: "int", to: "string"}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 4, parentID: 2}; {I: 4, L: "builtin", N: "plus", P: 2, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 4, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 4, L: "builtin", N: "plus", P: 2, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 4, parentID: 2}; {I: 4, L: "builtin", N: "concat", P: 2, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 4, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 4, L: "builtin", N: "concat", P: 2, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 4, parentID: 2}; {I: 4, L: span{from: 4, to: 5}, N: "x", P: 2, T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 4, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 4, L: span{from: 4, to: 5}, N: "x", P: 2, T: "int"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 3, parentID: 2}; {I: 3, L: "builtin", N: "intToString", P: 2, T: tapp{from: "int", to: "string"}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 3, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 3, L: "builtin", N: "intToString", P: 2, T: tapp{from: "int", to: "string"}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 3, parentID: 2}; {I: 3, L: "builtin", N: "plus", P: 2, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 3, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 3, L: "builtin", N: "plus", P: 2, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 3, parentID: 2}; {I: 3, L: "builtin", N: "concat", P: 2, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 3, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 3, L: "builtin", N: "concat", P: 2, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 3, parentID: 2}; {I: 3, L: span{from: 4, to: 5}, N: "x", P: 2, T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 3, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 3, L: span{from: 4, to: 5}, N: "x", P: 2, T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 4, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 4, L: "builtin", N: "intToString", P: 2, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 4, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 4, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 4, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 4, L: "builtin", N: "intToString", P: 2, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 4, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 4, T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 4, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 4, L: "builtin", N: "intToString", P: 2, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 4, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 4, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 4, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 4, L: "builtin", N: "intToString", P: 2, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 4, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 4, N: "intToString", TF: "int", TT: "string"}
from tc.ScopeItem to 88: tc.ScopeItem{id: 4, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 4, L: "builtin", N: "intToString", P: 2, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 4, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 4, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 4, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 4, L: "builtin", N: "intToString", P: 2, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 4, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 4, N: "intToString"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 4, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 4, L: "builtin", N: "intToString", P: 2, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 4, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 4, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 4, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 4, L: "builtin", N: "plus", P: 2, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 4, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 4, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 4, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 4, L: "builtin", N: "plus", P: 2, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 4, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 4, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 4, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 4, L: "builtin", N: "plus", P: 2, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 4, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 4, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 4, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 4, L: "builtin", N: "plus", P: 2, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 4, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 4, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 4, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 4, L: "builtin", N: "plus", P: 2, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 4, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 4, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 4, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 4, L: "builtin", N: "plus", P: 2, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 4, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 4, N: "plus"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 4, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 4, L: "builtin", N: "plus", P: 2, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 4, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 4, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 4, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 4, L: "builtin", N: "concat", P: 2, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 4, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 4, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 4, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 4, L: "builtin", N: "concat", P: 2, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 4, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 4, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 4, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 4, L: "builtin", N: "concat", P: 2, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 4, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 4, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 4, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 4, L: "builtin", N: "concat", P: 2, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 4, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 4, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 4, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 4, L: "builtin", N: "concat", P: 2, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 4, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 4, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 4, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 4, L: "builtin", N: "concat", P: 2, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 4, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 4, N: "concat"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 4, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 4, L: "builtin", N: "concat", P: 2, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 4, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 4, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 4, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 4, L: span{from: 4, to: 5}, N: "x", P: 2, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 4, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 4, N: "x", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 4, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 4, L: span{from: 4, to: 5}, N: "x", P: 2, T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 4, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 4, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 4, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 4, L: span{from: 4, to: 5}, N: "x", P: 2, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 4, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 4, N: "x", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 4, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 4, L: span{from: 4, to: 5}, N: "x", P: 2, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 4, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 4, L: span{from: 4, to: 5}, N: "x", P: 2, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 4, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 4, N: "x", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 4, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 4, L: span{from: 4, to: 5}, N: "x", P: 2, T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 4, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 4, N: "x"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 4, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 4, L: span{from: 4, to: 5}, N: "x", P: 2, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 4, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 4, N: "x", T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 3, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 3, L: "builtin", N: "intToString", P: 2, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 3, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 3, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 3, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 3, L: "builtin", N: "intToString", P: 2, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 3, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 3, T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 3, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 3, L: "builtin", N: "intToString", P: 2, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 3, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 3, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 3, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 3, L: "builtin", N: "intToString", P: 2, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 3, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 3, N: "intToString", TF: "int", TT: "string"}
from tc.ScopeItem to 88: tc.ScopeItem{id: 3, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 3, L: "builtin", N: "intToString", P: 2, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 3, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 3, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 3, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 3, L: "builtin", N: "intToString", P: 2, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 3, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 3, N: "intToString"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 3, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 3, L: "builtin", N: "intToString", P: 2, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 3, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 3, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 3, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 3, L: "builtin", N: "plus", P: 2, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 3, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 3, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 3, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 3, L: "builtin", N: "plus", P: 2, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 3, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 3, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 3, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 3, L: "builtin", N: "plus", P: 2, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 3, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 3, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 3, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 3, L: "builtin", N: "plus", P: 2, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 3, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 3, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 3, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 3, L: "builtin", N: "plus", P: 2, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 3, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 3, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 3, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 3, L: "builtin", N: "plus", P: 2, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 3, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 3, N: "plus"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 3, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 3, L: "builtin", N: "plus", P: 2, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 3, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 3, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 3, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 3, L: "builtin", N: "concat", P: 2, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 3, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 3, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 3, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 3, L: "builtin", N: "concat", P: 2, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 3, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 3, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 3, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 3, L: "builtin", N: "concat", P: 2, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 3, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 3, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 3, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 3, L: "builtin", N: "concat", P: 2, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 3, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 3, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 3, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 3, L: "builtin", N: "concat", P: 2, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 3, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 3, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 3, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 3, L: "builtin", N: "concat", P: 2, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 3, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 3, N: "concat"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 3, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 3, L: "builtin", N: "concat", P: 2, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 3, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 3, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 3, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 3, L: span{from: 4, to: 5}, N: "x", P: 2, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 3, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 3, N: "x", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 3, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 3, L: span{from: 4, to: 5}, N: "x", P: 2, T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 3, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 3, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 3, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 3, L: span{from: 4, to: 5}, N: "x", P: 2, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 3, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 3, N: "x", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 3, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 3, L: span{from: 4, to: 5}, N: "x", P: 2, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 3, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 3, L: span{from: 4, to: 5}, N: "x", P: 2, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 3, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 3, N: "x", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 3, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 3, L: span{from: 4, to: 5}, N: "x", P: 2, T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 3, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 3, N: "x"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 3, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 3, L: span{from: 4, to: 5}, N: "x", P: 2, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 3, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 3, N: "x", T: "int"}
from 43 to 44: tc.ScopeItem{id: 4, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 4, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 4, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 4, T: tapp{from: "int", to: "string"}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 4, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 4, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 4, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 4, N: "intToString", TF: "int", TT: "string"}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 4, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 4, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 4, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 4, N: "intToString"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 4, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 4, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 4, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 4, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 4, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 4, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 4, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 4, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 4, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 4, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 4, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 4, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 4, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 4, N: "plus"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 4, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 4, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 4, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 4, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 4, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 4, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 4, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 4, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 4, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 4, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 4, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 4, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 4, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 4, N: "concat"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 4, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 4, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 4, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 4, N: "x", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 4, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 4, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 4, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 4, N: "x", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 4, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 4, N: "x", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 4, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 4, N: "x"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 4, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 4, N: "x", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 3, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 3, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 3, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 3, T: tapp{from: "int", to: "string"}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 3, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 3, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 3, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 3, N: "intToString", TF: "int", TT: "string"}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 3, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 3, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 3, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 3, N: "intToString"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 3, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 3, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 3, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 3, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 3, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 3, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 3, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 3, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 3, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 3, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 3, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 3, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 3, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 3, N: "plus"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 3, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 3, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 3, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 3, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 3, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 3, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 3, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 3, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 3, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 3, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 3, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 3, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 3, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 3, N: "concat"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 3, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 3, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 3, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 3, N: "x", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 3, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 3, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 3, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 3, N: "x", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 3, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 3, N: "x", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 3, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 3, N: "x"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 3, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 3, N: "x", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []

ast.IntLit{id: 3, location: span{from: 21, to: 22}, val: 3}.
----
text/emission-log
from null to ast.IntLit: ast.IntLit{id: 3, location: span{from: 21, to: 22}, val: 3}; {}.  []
  ast.IntLit{id: 3, location: span{from: 21, to: 22}, val: 3}; {}
from ast.IntLit to 2: ast.IntLit{id: 3, location: span{from: 21, to: 22}, val: 3}; {}. Match(ast.IntLit{id: I, location: S}; {}) []
  ast.IntLit{id: 3, location: span{from: 21, to: 22}, val: 3}; {I: 3, S: span{from: 21, to: 22}}
from ast.IntLit to 33: ast.IntLit{id: 3, location: span{from: 21, to: 22}, val: 3}; {}. Match(ast.IntLit{id: I}; {}) []
  ast.IntLit{id: 3, location: span{from: 21, to: 22}, val: 3}; {I: 3}
from ast.IntLit to 187: ast.IntLit{id: 3, location: span{from: 21, to: 22}, val: 3}; {}. Match(ast.IntLit{location: S}; {}) []
  ast.IntLit{id: 3, location: span{from: 21, to: 22}, val: 3}; {S: span{from: 21, to: 22}}
from 2 to 0: ast.IntLit{id: 3, location: span{from: 21, to: 22}, val: 3}; {I: 3, S: span{from: 21, to: 22}}. Union []
  ast.IntLit{id: 3, location: span{from: 21, to: 22}, val: 3}; {I: 3, S: span{from: 21, to: 22}}
from 33 to tc.typeI: ast.IntLit{id: 3, location: span{from: 21, to: 22}, val: 3}; {I: 3}. Subst({id: I, type: "int"}) []
  tc.typeI{id: 3, type: "int"}; {I: 3}
from 187 to hl.segmentInt: ast.IntLit{id: 3, location: span{from: 21, to: 22}, val: 3}; {S: span{from: 21, to: 22}}. Subst({highlight: false, span: S, type: "int"}) []
  hl.segmentInt{highlight: false, span: span{from: 21, to: 22}, type: "int"}; {S: span{from: 21, to: 22}}
from 0 to ast.Expr: ast.IntLit{id: 3, location: span{from: 21, to: 22}, val: 3}; {I: 3, S: span{from: 21, to: 22}}. Subst({id: I, location: S}) []
  ast.Expr{id: 3, location: span{from: 21, to: 22}}; {I: 3, S: span{from: 21, to: 22}}
from tc.typeI to 26: tc.typeI{id: 3, type: "int"}; {I: 3}. Match(tc.typeI{id: I, type: T}; {I: I}) []
  tc.typeI{id: 3, type: "int"}; {I: 3, T: "int"}
from hl.segmentInt to 166: hl.segmentInt{highlight: false, span: span{from: 21, to: 22}, type: "int"}; {S: span{from: 21, to: 22}}. Match(hl.segmentInt{highlight: H, span: S, type: T}; {S: S}) []
  hl.segmentInt{highlight: false, span: span{from: 21, to: 22}, type: "int"}; {H: false, S: span{from: 21, to: 22}, T: "int"}
from ast.Expr to 9: ast.Expr{id: 3, location: span{from: 21, to: 22}}; {I: 3, S: span{from: 21, to: 22}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 3, location: span{from: 21, to: 22}}; {I: 3, S: span{from: 21, to: 22}}
from ast.Expr to 12: ast.Expr{id: 3, location: span{from: 21, to: 22}}; {I: 3, S: span{from: 21, to: 22}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 3, location: span{from: 21, to: 22}}; {I: 3, S: span{from: 21, to: 22}}
from ast.Expr to 15: ast.Expr{id: 3, location: span{from: 21, to: 22}}; {I: 3, S: span{from: 21, to: 22}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 3, location: span{from: 21, to: 22}}; {I: 3, S: span{from: 21, to: 22}}
from ast.Expr to 18: ast.Expr{id: 3, location: span{from: 21, to: 22}}; {I: 3, S: span{from: 21, to: 22}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 3, location: span{from: 21, to: 22}}; {I: 3, S: span{from: 21, to: 22}}
from ast.Expr to 21: ast.Expr{id: 3, location: span{from: 21, to: 22}}; {I: 3, S: span{from: 21, to: 22}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 3, location: span{from: 21, to: 22}}; {I: 3, S: span{from: 21, to: 22}}
from ast.Expr to 102: ast.Expr{id: 3, location: span{from: 21, to: 22}}; {I: 3, S: span{from: 21, to: 22}}. Match(ast.Expr{id: UI, location: UL}; {I: UI, S: UL}) [UL]
  ast.Expr{id: 3, location: span{from: 21, to: 22}}; {UI: 3, UL: span{from: 21, to: 22}}
from ast.Expr to 118: ast.Expr{id: 3, location: span{from: 21, to: 22}}; {I: 3, S: span{from: 21, to: 22}}. Match(ast.Expr{id: I, location: span{from: Idx}}; {I: I}) [Idx]
  ast.Expr{id: 3, location: span{from: 21, to: 22}}; {I: 3, Idx: 21}
from ast.Expr to 123: ast.Expr{id: 3, location: span{from: 21, to: 22}}; {I: 3, S: span{from: 21, to: 22}}. Match(ast.Expr{id: I, location: span{from: FIdx, to: TIdx}}; {I: I}) []
  ast.Expr{id: 3, location: span{from: 21, to: 22}}; {FIdx: 21, I: 3, TIdx: 22}
from 26 to 24: tc.typeI{id: 3, type: "int"}; {I: 3, T: "int"}. Union []
  tc.typeI{id: 3, type: "int"}; {I: 3, T: "int"}
from 166 to 159: hl.segmentInt{highlight: false, span: span{from: 21, to: 22}, type: "int"}; {H: false, S: span{from: 21, to: 22}, T: "int"}. Union []
  hl.segmentInt{highlight: false, span: span{from: 21, to: 22}, type: "int"}; {H: false, S: span{from: 21, to: 22}, T: "int"}
from 9 to 11: ast.Expr{id: 3, location: span{from: 21, to: 22}}; {I: 3, S: span{from: 21, to: 22}}. Join(ast.ParentExpr, I: 10.bodyID = 9.id) []
from 12 to 14: ast.Expr{id: 3, location: span{from: 21, to: 22}}; {I: 3, S: span{from: 21, to: 22}}. Join(ast.ParentExpr, I: 13.bindingID = 12.id) []
  ast.ParentExpr{id: 3, location: span{from: 21, to: 22}}; {I: 3, P: 2, S: span{from: 21, to: 22}}
from 15 to 17: ast.Expr{id: 3, location: span{from: 21, to: 22}}; {I: 3, S: span{from: 21, to: 22}}. Join(ast.ParentExpr, I: 16.funcID = 15.id) []
from 18 to 20: ast.Expr{id: 3, location: span{from: 21, to: 22}}; {I: 3, S: span{from: 21, to: 22}}. Join(ast.ParentExpr, I: 19.argID = 18.id) []
from 21 to 23: ast.Expr{id: 3, location: span{from: 21, to: 22}}; {I: 3, S: span{from: 21, to: 22}}. Join(ast.ParentExpr, I: 22.body = 21.id) []
from 102 to 103: ast.Expr{id: 3, location: span{from: 21, to: 22}}; {UI: 3, UL: span{from: 21, to: 22}}. Join(ide.expectedTypeBinding, UL: 102.location = 101.usageLoc) [UI]
from 118 to 119: ast.Expr{id: 3, location: span{from: 21, to: 22}}; {I: 3, Idx: 21}. Join(ide.CurrentScope, Idx: 118.location.from = 117.idx) [I]
from 123 to 124: ast.Expr{id: 3, location: span{from: 21, to: 22}}; {FIdx: 21, I: 3, TIdx: 22}. Join(ide.CurrentType, ) [I]
from 24 to tc.Type: tc.typeI{id: 3, type: "int"}; {I: 3, T: "int"}. Subst({id: I, type: T}) []
  tc.Type{id: 3, type: "int"}; {I: 3, T: "int"}
from 159 to hl.Segment: hl.segmentInt{highlight: false, span: span{from: 21, to: 22}, type: "int"}; {H: false, S: span{from: 21, to: 22}, T: "int"}. Subst({highlight: H, span: S, type: T}) []
  hl.Segment{highlight: false, span: span{from: 21, to: 22}, type: "int"}; {H: false, S: span{from: 21, to: 22}, T: "int"}
from 14 to 8: ast.ParentExpr{id: 3, location: span{from: 21, to: 22}}; {I: 3, P: 2, S: span{from: 21, to: 22}}. Union []
  ast.ParentExpr{id: 3, location: span{from: 21, to: 22}}; {I: 3, P: 2, S: span{from: 21, to: 22}}
from tc.Type to 35: tc.Type{id: 3, type: "int"}; {I: 3, T: "int"}. Match(tc.Type{id: FID, type: tapp{from: F, to: T}}; {I: FID}) [FID]
from tc.Type to 37: tc.Type{id: 3, type: "int"}; {I: 3, T: "int"}. Match(tc.Type{id: AID, type: F}; {I: AID, T: F}) [F]
  tc.Type{id: 3, type: "int"}; {AID: 3, F: "int"}
from tc.Type to 40: tc.Type{id: 3, type: "int"}; {I: 3, T: "int"}. Match(tc.Type{id: BID, type: T}; {I: BID, T: T}) [BID]
  tc.Type{id: 3, type: "int"}; {BID: 3, T: "int"}
from tc.Type to 48: tc.Type{id: 3, type: "int"}; {I: 3, T: "int"}. Match(tc.Type{id: B, type: R}; {I: B, T: R}) []
  tc.Type{id: 3, type: "int"}; {B: 3, R: "int"}
from tc.Type to 62: tc.Type{id: 3, type: "int"}; {I: 3, T: "int"}. Match(tc.Type{id: B, type: T}; {I: B, T: T}) [B]
  tc.Type{id: 3, type: "int"}; {B: 3, T: "int"}
from tc.Type to 96: tc.Type{id: 3, type: "int"}; {I: 3, T: "int"}. Match(tc.Type{id: F, type: tapp{from: T}}; {I: F}) [F]
from tc.Type to 125: tc.Type{id: 3, type: "int"}; {I: 3, T: "int"}. Match(tc.Type{id: I, type: T}; {I: I, T: T}) [I]
  tc.Type{id: 3, type: "int"}; {I: 3, T: "int"}
from 8 to ast.ParentExpr: ast.ParentExpr{id: 3, location: span{from: 21, to: 22}}; {I: 3, P: 2, S: span{from: 21, to: 22}}. Subst({id: I, parent: P, span: S}) []
  ast.ParentExpr{id: 3, parent: 2, span: span{from: 21, to: 22}}; {I: 3, P: 2, S: span{from: 21, to: 22}}
from 37 to 38: tc.Type{id: 3, type: "int"}; {AID: 3, F: "int"}. Join(tc.typeFC, F: 37.type = 36.type.from) []
from 40 to 41: tc.Type{id: 3, type: "int"}; {BID: 3, T: "int"}. Join(tc.typeLet, BID: 40.id = 39.bodyID) []
from 48 to 49: tc.Type{id: 3, type: "int"}; {B: 3, R: "int"}. Join(tc.typeLambda, ) []
from 62 to 63: tc.Type{id: 3, type: "int"}; {B: 3, T: "int"}. Join(tc.scopeLet, B: 62.id = 61.bindingID) []
  tc.scopeLet{id: 3, type: "int"}; {B: 3, I: 4, L: span{from: 17, to: 18}, N: "y", T: "int"}
from 125 to 126: tc.Type{id: 3, type: "int"}; {I: 3, T: "int"}. Join(ide.CurrentType, I: 125.id = 124.id) []
from 63 to tc.scopeLet: tc.scopeLet{id: 3, type: "int"}; {B: 3, I: 4, L: span{from: 17, to: 18}, N: "y", T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.scopeLet{id: 4, location: span{from: 17, to: 18}, name: "y", type: "int"}; {B: 3, I: 4, L: span{from: 17, to: 18}, N: "y", T: "int"}
from tc.scopeLet to 53: tc.scopeLet{id: 4, location: span{from: 17, to: 18}, name: "y", type: "int"}; {B: 3, I: 4, L: span{from: 17, to: 18}, N: "y", T: "int"}. Match(tc.scopeLet{id: I, location: L, name: N, type: T}; {I: I, L: L, N: N, T: T}) []
  tc.scopeLet{id: 4, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 4, L: span{from: 17, to: 18}, N: "y", T: "int"}
from 53 to 51: tc.scopeLet{id: 4, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 4, L: span{from: 17, to: 18}, N: "y", T: "int"}. Union []
  tc.scopeLet{id: 4, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 4, L: span{from: 17, to: 18}, N: "y", T: "int"}
from 51 to tc.ScopeItem: tc.scopeLet{id: 4, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 4, L: span{from: 17, to: 18}, N: "y", T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 4, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 4, L: span{from: 17, to: 18}, N: "y", T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 4, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 4, L: span{from: 17, to: 18}, N: "y", T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 4, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 4, N: "y", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 4, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 4, L: span{from: 17, to: 18}, N: "y", T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 4, location: span{from: 17, to: 18}, name: "y", type: "int"}; {L: span{from: 17, to: 18}, N: "y", P: 4, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 4, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 4, L: span{from: 17, to: 18}, N: "y", T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 4, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 4, N: "y", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 4, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 4, L: span{from: 17, to: 18}, N: "y", T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 4, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 4, L: span{from: 17, to: 18}, N: "y", T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 4, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 4, N: "y", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 4, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 4, L: span{from: 17, to: 18}, N: "y", T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 4, location: span{from: 17, to: 18}, name: "y", type: "int"}; {DL: span{from: 17, to: 18}, I: 4, N: "y"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 4, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 4, L: span{from: 17, to: 18}, N: "y", T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 4, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 4, N: "y", T: "int"}
from 43 to 44: tc.ScopeItem{id: 4, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 4, N: "y", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 4, location: span{from: 17, to: 18}, name: "y", type: "int"}; {L: span{from: 17, to: 18}, N: "y", P: 4, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 4, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 4, N: "y", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 4, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 4, N: "y", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 4, location: span{from: 17, to: 18}, name: "y", type: "int"}; {DL: span{from: 17, to: 18}, I: 4, N: "y"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 4, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 4, N: "y", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []

ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}.
----
text/emission-log
from null to ast.LetExpr: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {}.  []
  ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {}
from ast.LetExpr to 4: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {}. Match(ast.LetExpr{id: I, location: S}; {}) []
  ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {I: 4, S: span{from: 26, to: 90}}
from ast.LetExpr to 10: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {}. Match(ast.LetExpr{bodyID: I, id: P}; {}) [I]
  ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {I: 6, P: 4}
from ast.LetExpr to 13: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {}. Match(ast.LetExpr{bindingID: I, id: P}; {}) [I]
  ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {I: 5, P: 4}
from ast.LetExpr to 39: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {}. Match(ast.LetExpr{bodyID: BID, id: I}; {}) [BID]
  ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {BID: 6, I: 4}
from ast.LetExpr to 61: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {}. Match(ast.LetExpr{bindingID: B, bodyID: I, varLoc: L, varName: N}; {}) [B]
  ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {B: 5, I: 6, L: span{from: 30, to: 31}, N: "z"}
from ast.LetExpr to 68: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {}. Match(ast.LetExpr{bodyID: I, id: P}; {}) []
  ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {I: 6, P: 4}
from ast.LetExpr to 69: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {}. Match(ast.LetExpr{bindingID: I, id: P}; {}) []
  ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {I: 5, P: 4}
from ast.LetExpr to 92: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {}. Match(ast.LetExpr{bodyID: I, id: L}; {}) [L]
  ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {I: 6, L: 4}
from ast.LetExpr to 99: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {}. Match(ast.LetExpr{bindingID: I, varLoc: VL}; {}) [VL]
  ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {I: 5, VL: span{from: 30, to: 31}}
from ast.LetExpr to 177: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {}. Match(ast.LetExpr{varLoc: S}; {}) []
  ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {S: span{from: 30, to: 31}}
from ast.LetExpr to 189: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {}. Match(ast.LetExpr{inLoc: S}; {}) []
  ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {S: span{from: 40, to: 43}}
from ast.LetExpr to 190: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {}. Match(ast.LetExpr{letLoc: S}; {}) []
  ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {S: span{from: 26, to: 30}}
from 4 to 0: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {I: 4, S: span{from: 26, to: 90}}. Union []
  ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {I: 4, S: span{from: 26, to: 90}}
from 10 to 11: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {I: 6, P: 4}. Join(ast.ParentExpr, I: 10.bodyID = 9.id) []
from 13 to 14: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {I: 5, P: 4}. Join(ast.ParentExpr, I: 13.bindingID = 12.id) []
from 39 to 41: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {BID: 6, I: 4}. Join(tc.typeLet, BID: 40.id = 39.bodyID) []
from 61 to 63: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {B: 5, I: 6, L: span{from: 30, to: 31}, N: "z"}. Join(tc.scopeLet, B: 62.id = 61.bindingID) []
from 68 to 67: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {I: 6, P: 4}. Union []
  ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {I: 6, P: 4}
from 69 to 67: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {I: 5, P: 4}. Union []
  ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {I: 5, P: 4}
from 92 to 94: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {I: 6, L: 4}. Join(ide.expectedType, L: 93.id = 92.id) []
from 99 to 101: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {I: 5, VL: span{from: 30, to: 31}}. Join(ide.expectedTypeBinding, VL: 100.definitionLoc = 99.varLoc) [UL]
from 177 to 176: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {S: span{from: 30, to: 31}}. Union []
  ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {S: span{from: 30, to: 31}}
from 189 to 188: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {S: span{from: 40, to: 43}}. Union []
  ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {S: span{from: 40, to: 43}}
from 190 to 188: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {S: span{from: 26, to: 30}}. Union []
  ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {S: span{from: 26, to: 30}}
from 0 to ast.Expr: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {I: 4, S: span{from: 26, to: 90}}. Subst({id: I, location: S}) []
  ast.Expr{id: 4, location: span{from: 26, to: 90}}; {I: 4, S: span{from: 26, to: 90}}
from 67 to tc.parentScope: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {I: 6, P: 4}. Subst({id: I, parentID: P}) []
  tc.parentScope{id: 6, parentID: 4}; {I: 6, P: 4}
from 67 to tc.parentScope: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {I: 5, P: 4}. Subst({id: I, parentID: P}) []
  tc.parentScope{id: 5, parentID: 4}; {I: 5, P: 4}
from 176 to hl.varDefn: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {S: span{from: 30, to: 31}}. Subst({span: S}) []
  hl.varDefn{span: span{from: 30, to: 31}}; {S: span{from: 30, to: 31}}
from 188 to hl.segmentKeyword: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {S: span{from: 40, to: 43}}. Subst({highlight: false, span: S, type: "keyword"}) []
  hl.segmentKeyword{highlight: false, span: span{from: 40, to: 43}, type: "keyword"}; {S: span{from: 40, to: 43}}
from 188 to hl.segmentKeyword: ast.LetExpr{bindingID: 5, bodyID: 6, id: 4, inLoc: span{from: 40, to: 43}, letLoc: span{from: 26, to: 30}, location: span{from: 26, to: 90}, varLoc: span{from: 30, to: 31}, varName: "z"}; {S: span{from: 26, to: 30}}. Subst({highlight: false, span: S, type: "keyword"}) []
  hl.segmentKeyword{highlight: false, span: span{from: 26, to: 30}, type: "keyword"}; {S: span{from: 26, to: 30}}
from ast.Expr to 9: ast.Expr{id: 4, location: span{from: 26, to: 90}}; {I: 4, S: span{from: 26, to: 90}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 4, location: span{from: 26, to: 90}}; {I: 4, S: span{from: 26, to: 90}}
from ast.Expr to 12: ast.Expr{id: 4, location: span{from: 26, to: 90}}; {I: 4, S: span{from: 26, to: 90}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 4, location: span{from: 26, to: 90}}; {I: 4, S: span{from: 26, to: 90}}
from ast.Expr to 15: ast.Expr{id: 4, location: span{from: 26, to: 90}}; {I: 4, S: span{from: 26, to: 90}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 4, location: span{from: 26, to: 90}}; {I: 4, S: span{from: 26, to: 90}}
from ast.Expr to 18: ast.Expr{id: 4, location: span{from: 26, to: 90}}; {I: 4, S: span{from: 26, to: 90}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 4, location: span{from: 26, to: 90}}; {I: 4, S: span{from: 26, to: 90}}
from ast.Expr to 21: ast.Expr{id: 4, location: span{from: 26, to: 90}}; {I: 4, S: span{from: 26, to: 90}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 4, location: span{from: 26, to: 90}}; {I: 4, S: span{from: 26, to: 90}}
from ast.Expr to 102: ast.Expr{id: 4, location: span{from: 26, to: 90}}; {I: 4, S: span{from: 26, to: 90}}. Match(ast.Expr{id: UI, location: UL}; {I: UI, S: UL}) [UL]
  ast.Expr{id: 4, location: span{from: 26, to: 90}}; {UI: 4, UL: span{from: 26, to: 90}}
from ast.Expr to 118: ast.Expr{id: 4, location: span{from: 26, to: 90}}; {I: 4, S: span{from: 26, to: 90}}. Match(ast.Expr{id: I, location: span{from: Idx}}; {I: I}) [Idx]
  ast.Expr{id: 4, location: span{from: 26, to: 90}}; {I: 4, Idx: 26}
from ast.Expr to 123: ast.Expr{id: 4, location: span{from: 26, to: 90}}; {I: 4, S: span{from: 26, to: 90}}. Match(ast.Expr{id: I, location: span{from: FIdx, to: TIdx}}; {I: I}) []
  ast.Expr{id: 4, location: span{from: 26, to: 90}}; {FIdx: 26, I: 4, TIdx: 90}
from tc.parentScope to 55: tc.parentScope{id: 6, parentID: 4}; {I: 6, P: 4}. Match(tc.parentScope{id: I, parentID: P}; {I: I, P: P}) [P]
  tc.parentScope{id: 6, parentID: 4}; {I: 6, P: 4}
from tc.parentScope to 55: tc.parentScope{id: 5, parentID: 4}; {I: 5, P: 4}. Match(tc.parentScope{id: I, parentID: P}; {I: I, P: P}) [P]
  tc.parentScope{id: 5, parentID: 4}; {I: 5, P: 4}
from hl.varDefn to 170: hl.varDefn{span: span{from: 30, to: 31}}; {S: span{from: 30, to: 31}}. Match(hl.varDefn{span: S}; {S: S}) [S]
  hl.varDefn{span: span{from: 30, to: 31}}; {S: span{from: 30, to: 31}}
from hl.varDefn to 174: hl.varDefn{span: span{from: 30, to: 31}}; {S: span{from: 30, to: 31}}. Match(hl.varDefn{span: S}; {S: S}) [S]
  hl.varDefn{span: span{from: 30, to: 31}}; {S: span{from: 30, to: 31}}
from hl.segmentKeyword to 167: hl.segmentKeyword{highlight: false, span: span{from: 40, to: 43}, type: "keyword"}; {S: span{from: 40, to: 43}}. Match(hl.segmentKeyword{highlight: H, span: S, type: T}; {S: S}) []
  hl.segmentKeyword{highlight: false, span: span{from: 40, to: 43}, type: "keyword"}; {H: false, S: span{from: 40, to: 43}, T: "keyword"}
from hl.segmentKeyword to 167: hl.segmentKeyword{highlight: false, span: span{from: 26, to: 30}, type: "keyword"}; {S: span{from: 26, to: 30}}. Match(hl.segmentKeyword{highlight: H, span: S, type: T}; {S: S}) []
  hl.segmentKeyword{highlight: false, span: span{from: 26, to: 30}, type: "keyword"}; {H: false, S: span{from: 26, to: 30}, T: "keyword"}
from 9 to 11: ast.Expr{id: 4, location: span{from: 26, to: 90}}; {I: 4, S: span{from: 26, to: 90}}. Join(ast.ParentExpr, I: 10.bodyID = 9.id) []
  ast.ParentExpr{id: 4, location: span{from: 26, to: 90}}; {I: 4, P: 2, S: span{from: 26, to: 90}}
from 12 to 14: ast.Expr{id: 4, location: span{from: 26, to: 90}}; {I: 4, S: span{from: 26, to: 90}}. Join(ast.ParentExpr, I: 13.bindingID = 12.id) []
from 15 to 17: ast.Expr{id: 4, location: span{from: 26, to: 90}}; {I: 4, S: span{from: 26, to: 90}}. Join(ast.ParentExpr, I: 16.funcID = 15.id) []
from 18 to 20: ast.Expr{id: 4, location: span{from: 26, to: 90}}; {I: 4, S: span{from: 26, to: 90}}. Join(ast.ParentExpr, I: 19.argID = 18.id) []
from 21 to 23: ast.Expr{id: 4, location: span{from: 26, to: 90}}; {I: 4, S: span{from: 26, to: 90}}. Join(ast.ParentExpr, I: 22.body = 21.id) []
from 102 to 103: ast.Expr{id: 4, location: span{from: 26, to: 90}}; {UI: 4, UL: span{from: 26, to: 90}}. Join(ide.expectedTypeBinding, UL: 102.location = 101.usageLoc) [UI]
from 118 to 119: ast.Expr{id: 4, location: span{from: 26, to: 90}}; {I: 4, Idx: 26}. Join(ide.CurrentScope, Idx: 118.location.from = 117.idx) [I]
from 123 to 124: ast.Expr{id: 4, location: span{from: 26, to: 90}}; {FIdx: 26, I: 4, TIdx: 90}. Join(ide.CurrentType, ) [I]
from 55 to 57: tc.parentScope{id: 6, parentID: 4}; {I: 6, P: 4}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
  tc.ScopeItem{id: 6, parentID: 4}; {I: 6, L: "builtin", N: "intToString", P: 4, T: tapp{from: "int", to: "string"}}
  tc.ScopeItem{id: 6, parentID: 4}; {I: 6, L: "builtin", N: "plus", P: 4, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
  tc.ScopeItem{id: 6, parentID: 4}; {I: 6, L: "builtin", N: "concat", P: 4, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
  tc.ScopeItem{id: 6, parentID: 4}; {I: 6, L: span{from: 4, to: 5}, N: "x", P: 4, T: "int"}
  tc.ScopeItem{id: 6, parentID: 4}; {I: 6, L: span{from: 17, to: 18}, N: "y", P: 4, T: "int"}
from 55 to 57: tc.parentScope{id: 5, parentID: 4}; {I: 5, P: 4}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
  tc.ScopeItem{id: 5, parentID: 4}; {I: 5, L: "builtin", N: "intToString", P: 4, T: tapp{from: "int", to: "string"}}
  tc.ScopeItem{id: 5, parentID: 4}; {I: 5, L: "builtin", N: "plus", P: 4, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
  tc.ScopeItem{id: 5, parentID: 4}; {I: 5, L: "builtin", N: "concat", P: 4, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
  tc.ScopeItem{id: 5, parentID: 4}; {I: 5, L: span{from: 4, to: 5}, N: "x", P: 4, T: "int"}
  tc.ScopeItem{id: 5, parentID: 4}; {I: 5, L: span{from: 17, to: 18}, N: "y", P: 4, T: "int"}
from 170 to 172: hl.varDefn{span: span{from: 30, to: 31}}; {S: span{from: 30, to: 31}}. Join(hl.segmentDefn, S: 171.definitionLoc = 170.span) []
from 174 to 175: hl.varDefn{span: span{from: 30, to: 31}}; {S: span{from: 30, to: 31}}. Join(hl.segmentDefnHL, S: 174.span = 173.defnLoc) []
from 167 to 159: hl.segmentKeyword{highlight: false, span: span{from: 40, to: 43}, type: "keyword"}; {H: false, S: span{from: 40, to: 43}, T: "keyword"}. Union []
  hl.segmentKeyword{highlight: false, span: span{from: 40, to: 43}, type: "keyword"}; {H: false, S: span{from: 40, to: 43}, T: "keyword"}
from 167 to 159: hl.segmentKeyword{highlight: false, span: span{from: 26, to: 30}, type: "keyword"}; {H: false, S: span{from: 26, to: 30}, T: "keyword"}. Union []
  hl.segmentKeyword{highlight: false, span: span{from: 26, to: 30}, type: "keyword"}; {H: false, S: span{from: 26, to: 30}, T: "keyword"}
from 11 to 8: ast.ParentExpr{id: 4, location: span{from: 26, to: 90}}; {I: 4, P: 2, S: span{from: 26, to: 90}}. Union []
  ast.ParentExpr{id: 4, location: span{from: 26, to: 90}}; {I: 4, P: 2, S: span{from: 26, to: 90}}
from 57 to 51: tc.ScopeItem{id: 6, parentID: 4}; {I: 6, L: "builtin", N: "intToString", P: 4, T: tapp{from: "int", to: "string"}}. Union []
  tc.ScopeItem{id: 6, parentID: 4}; {I: 6, L: "builtin", N: "intToString", P: 4, T: tapp{from: "int", to: "string"}}
from 57 to 51: tc.ScopeItem{id: 6, parentID: 4}; {I: 6, L: "builtin", N: "plus", P: 4, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Union []
  tc.ScopeItem{id: 6, parentID: 4}; {I: 6, L: "builtin", N: "plus", P: 4, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 57 to 51: tc.ScopeItem{id: 6, parentID: 4}; {I: 6, L: "builtin", N: "concat", P: 4, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Union []
  tc.ScopeItem{id: 6, parentID: 4}; {I: 6, L: "builtin", N: "concat", P: 4, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 57 to 51: tc.ScopeItem{id: 6, parentID: 4}; {I: 6, L: span{from: 4, to: 5}, N: "x", P: 4, T: "int"}. Union []
  tc.ScopeItem{id: 6, parentID: 4}; {I: 6, L: span{from: 4, to: 5}, N: "x", P: 4, T: "int"}
from 57 to 51: tc.ScopeItem{id: 6, parentID: 4}; {I: 6, L: span{from: 17, to: 18}, N: "y", P: 4, T: "int"}. Union []
  tc.ScopeItem{id: 6, parentID: 4}; {I: 6, L: span{from: 17, to: 18}, N: "y", P: 4, T: "int"}
from 57 to 51: tc.ScopeItem{id: 5, parentID: 4}; {I: 5, L: "builtin", N: "intToString", P: 4, T: tapp{from: "int", to: "string"}}. Union []
  tc.ScopeItem{id: 5, parentID: 4}; {I: 5, L: "builtin", N: "intToString", P: 4, T: tapp{from: "int", to: "string"}}
from 57 to 51: tc.ScopeItem{id: 5, parentID: 4}; {I: 5, L: "builtin", N: "plus", P: 4, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Union []
  tc.ScopeItem{id: 5, parentID: 4}; {I: 5, L: "builtin", N: "plus", P: 4, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 57 to 51: tc.ScopeItem{id: 5, parentID: 4}; {I: 5, L: "builtin", N: "concat", P: 4, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Union []
  tc.ScopeItem{id: 5, parentID: 4}; {I: 5, L: "builtin", N: "concat", P: 4, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 57 to 51: tc.ScopeItem{id: 5, parentID: 4}; {I: 5, L: span{from: 4, to: 5}, N: "x", P: 4, T: "int"}. Union []
  tc.ScopeItem{id: 5, parentID: 4}; {I: 5, L: span{from: 4, to: 5}, N: "x", P: 4, T: "int"}
from 57 to 51: tc.ScopeItem{id: 5, parentID: 4}; {I: 5, L: span{from: 17, to: 18}, N: "y", P: 4, T: "int"}. Union []
  tc.ScopeItem{id: 5, parentID: 4}; {I: 5, L: span{from: 17, to: 18}, N: "y", P: 4, T: "int"}
from 159 to hl.Segment: hl.segmentKeyword{highlight: false, span: span{from: 40, to: 43}, type: "keyword"}; {H: false, S: span{from: 40, to: 43}, T: "keyword"}. Subst({highlight: H, span: S, type: T}) []
  hl.Segment{highlight: false, span: span{from: 40, to: 43}, type: "keyword"}; {H: false, S: span{from: 40, to: 43}, T: "keyword"}
from 159 to hl.Segment: hl.segmentKeyword{highlight: false, span: span{from: 26, to: 30}, type: "keyword"}; {H: false, S: span{from: 26, to: 30}, T: "keyword"}. Subst({highlight: H, span: S, type: T}) []
  hl.Segment{highlight: false, span: span{from: 26, to: 30}, type: "keyword"}; {H: false, S: span{from: 26, to: 30}, T: "keyword"}
from 8 to ast.ParentExpr: ast.ParentExpr{id: 4, location: span{from: 26, to: 90}}; {I: 4, P: 2, S: span{from: 26, to: 90}}. Subst({id: I, parent: P, span: S}) []
  ast.ParentExpr{id: 4, parent: 2, span: span{from: 26, to: 90}}; {I: 4, P: 2, S: span{from: 26, to: 90}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 6, parentID: 4}; {I: 6, L: "builtin", N: "intToString", P: 4, T: tapp{from: "int", to: "string"}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 6, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 6, L: "builtin", N: "intToString", P: 4, T: tapp{from: "int", to: "string"}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 6, parentID: 4}; {I: 6, L: "builtin", N: "plus", P: 4, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 6, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 6, L: "builtin", N: "plus", P: 4, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 6, parentID: 4}; {I: 6, L: "builtin", N: "concat", P: 4, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 6, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 6, L: "builtin", N: "concat", P: 4, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 6, parentID: 4}; {I: 6, L: span{from: 4, to: 5}, N: "x", P: 4, T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 6, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 6, L: span{from: 4, to: 5}, N: "x", P: 4, T: "int"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 6, parentID: 4}; {I: 6, L: span{from: 17, to: 18}, N: "y", P: 4, T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 6, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 6, L: span{from: 17, to: 18}, N: "y", P: 4, T: "int"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 5, parentID: 4}; {I: 5, L: "builtin", N: "intToString", P: 4, T: tapp{from: "int", to: "string"}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 5, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 5, L: "builtin", N: "intToString", P: 4, T: tapp{from: "int", to: "string"}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 5, parentID: 4}; {I: 5, L: "builtin", N: "plus", P: 4, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 5, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 5, L: "builtin", N: "plus", P: 4, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 5, parentID: 4}; {I: 5, L: "builtin", N: "concat", P: 4, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 5, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 5, L: "builtin", N: "concat", P: 4, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 5, parentID: 4}; {I: 5, L: span{from: 4, to: 5}, N: "x", P: 4, T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 5, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 5, L: span{from: 4, to: 5}, N: "x", P: 4, T: "int"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 5, parentID: 4}; {I: 5, L: span{from: 17, to: 18}, N: "y", P: 4, T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 5, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 5, L: span{from: 17, to: 18}, N: "y", P: 4, T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 6, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 6, L: "builtin", N: "intToString", P: 4, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 6, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 6, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 6, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 6, L: "builtin", N: "intToString", P: 4, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 6, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 6, T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 6, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 6, L: "builtin", N: "intToString", P: 4, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 6, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 6, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 6, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 6, L: "builtin", N: "intToString", P: 4, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 6, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 6, N: "intToString", TF: "int", TT: "string"}
from tc.ScopeItem to 88: tc.ScopeItem{id: 6, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 6, L: "builtin", N: "intToString", P: 4, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 6, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 6, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 6, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 6, L: "builtin", N: "intToString", P: 4, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 6, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 6, N: "intToString"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 6, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 6, L: "builtin", N: "intToString", P: 4, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 6, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 6, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 6, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 6, L: "builtin", N: "plus", P: 4, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 6, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 6, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 6, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 6, L: "builtin", N: "plus", P: 4, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 6, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 6, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 6, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 6, L: "builtin", N: "plus", P: 4, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 6, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 6, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 6, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 6, L: "builtin", N: "plus", P: 4, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 6, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 6, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 6, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 6, L: "builtin", N: "plus", P: 4, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 6, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 6, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 6, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 6, L: "builtin", N: "plus", P: 4, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 6, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 6, N: "plus"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 6, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 6, L: "builtin", N: "plus", P: 4, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 6, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 6, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 6, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 6, L: "builtin", N: "concat", P: 4, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 6, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 6, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 6, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 6, L: "builtin", N: "concat", P: 4, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 6, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 6, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 6, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 6, L: "builtin", N: "concat", P: 4, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 6, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 6, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 6, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 6, L: "builtin", N: "concat", P: 4, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 6, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 6, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 6, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 6, L: "builtin", N: "concat", P: 4, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 6, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 6, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 6, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 6, L: "builtin", N: "concat", P: 4, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 6, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 6, N: "concat"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 6, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 6, L: "builtin", N: "concat", P: 4, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 6, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 6, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 6, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 6, L: span{from: 4, to: 5}, N: "x", P: 4, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 6, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 6, N: "x", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 6, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 6, L: span{from: 4, to: 5}, N: "x", P: 4, T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 6, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 6, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 6, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 6, L: span{from: 4, to: 5}, N: "x", P: 4, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 6, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 6, N: "x", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 6, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 6, L: span{from: 4, to: 5}, N: "x", P: 4, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 6, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 6, L: span{from: 4, to: 5}, N: "x", P: 4, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 6, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 6, N: "x", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 6, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 6, L: span{from: 4, to: 5}, N: "x", P: 4, T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 6, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 6, N: "x"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 6, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 6, L: span{from: 4, to: 5}, N: "x", P: 4, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 6, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 6, N: "x", T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 6, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 6, L: span{from: 17, to: 18}, N: "y", P: 4, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 6, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 6, N: "y", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 6, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 6, L: span{from: 17, to: 18}, N: "y", P: 4, T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 6, location: span{from: 17, to: 18}, name: "y", type: "int"}; {L: span{from: 17, to: 18}, N: "y", P: 6, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 6, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 6, L: span{from: 17, to: 18}, N: "y", P: 4, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 6, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 6, N: "y", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 6, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 6, L: span{from: 17, to: 18}, N: "y", P: 4, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 6, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 6, L: span{from: 17, to: 18}, N: "y", P: 4, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 6, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 6, N: "y", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 6, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 6, L: span{from: 17, to: 18}, N: "y", P: 4, T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 6, location: span{from: 17, to: 18}, name: "y", type: "int"}; {DL: span{from: 17, to: 18}, I: 6, N: "y"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 6, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 6, L: span{from: 17, to: 18}, N: "y", P: 4, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 6, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 6, N: "y", T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 5, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 5, L: "builtin", N: "intToString", P: 4, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 5, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 5, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 5, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 5, L: "builtin", N: "intToString", P: 4, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 5, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 5, T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 5, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 5, L: "builtin", N: "intToString", P: 4, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 5, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 5, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 5, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 5, L: "builtin", N: "intToString", P: 4, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 5, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 5, N: "intToString", TF: "int", TT: "string"}
from tc.ScopeItem to 88: tc.ScopeItem{id: 5, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 5, L: "builtin", N: "intToString", P: 4, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 5, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 5, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 5, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 5, L: "builtin", N: "intToString", P: 4, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 5, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 5, N: "intToString"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 5, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 5, L: "builtin", N: "intToString", P: 4, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 5, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 5, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 5, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 5, L: "builtin", N: "plus", P: 4, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 5, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 5, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 5, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 5, L: "builtin", N: "plus", P: 4, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 5, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 5, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 5, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 5, L: "builtin", N: "plus", P: 4, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 5, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 5, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 5, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 5, L: "builtin", N: "plus", P: 4, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 5, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 5, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 5, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 5, L: "builtin", N: "plus", P: 4, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 5, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 5, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 5, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 5, L: "builtin", N: "plus", P: 4, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 5, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 5, N: "plus"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 5, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 5, L: "builtin", N: "plus", P: 4, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 5, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 5, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 5, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 5, L: "builtin", N: "concat", P: 4, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 5, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 5, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 5, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 5, L: "builtin", N: "concat", P: 4, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 5, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 5, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 5, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 5, L: "builtin", N: "concat", P: 4, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 5, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 5, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 5, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 5, L: "builtin", N: "concat", P: 4, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 5, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 5, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 5, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 5, L: "builtin", N: "concat", P: 4, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 5, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 5, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 5, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 5, L: "builtin", N: "concat", P: 4, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 5, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 5, N: "concat"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 5, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 5, L: "builtin", N: "concat", P: 4, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 5, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 5, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 5, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 5, L: span{from: 4, to: 5}, N: "x", P: 4, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 5, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 5, N: "x", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 5, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 5, L: span{from: 4, to: 5}, N: "x", P: 4, T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 5, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 5, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 5, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 5, L: span{from: 4, to: 5}, N: "x", P: 4, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 5, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 5, N: "x", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 5, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 5, L: span{from: 4, to: 5}, N: "x", P: 4, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 5, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 5, L: span{from: 4, to: 5}, N: "x", P: 4, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 5, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 5, N: "x", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 5, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 5, L: span{from: 4, to: 5}, N: "x", P: 4, T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 5, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 5, N: "x"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 5, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 5, L: span{from: 4, to: 5}, N: "x", P: 4, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 5, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 5, N: "x", T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 5, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 5, L: span{from: 17, to: 18}, N: "y", P: 4, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 5, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 5, N: "y", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 5, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 5, L: span{from: 17, to: 18}, N: "y", P: 4, T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 5, location: span{from: 17, to: 18}, name: "y", type: "int"}; {L: span{from: 17, to: 18}, N: "y", P: 5, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 5, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 5, L: span{from: 17, to: 18}, N: "y", P: 4, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 5, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 5, N: "y", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 5, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 5, L: span{from: 17, to: 18}, N: "y", P: 4, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 5, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 5, L: span{from: 17, to: 18}, N: "y", P: 4, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 5, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 5, N: "y", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 5, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 5, L: span{from: 17, to: 18}, N: "y", P: 4, T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 5, location: span{from: 17, to: 18}, name: "y", type: "int"}; {DL: span{from: 17, to: 18}, I: 5, N: "y"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 5, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 5, L: span{from: 17, to: 18}, N: "y", P: 4, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 5, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 5, N: "y", T: "int"}
from 43 to 44: tc.ScopeItem{id: 6, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 6, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 6, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 6, T: tapp{from: "int", to: "string"}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 6, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 6, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 6, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 6, N: "intToString", TF: "int", TT: "string"}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 6, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 6, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 6, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 6, N: "intToString"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 6, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 6, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 6, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 6, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 6, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 6, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 6, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 6, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 6, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 6, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 6, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 6, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 6, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 6, N: "plus"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 6, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 6, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 6, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 6, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 6, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 6, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 6, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 6, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 6, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 6, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 6, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 6, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 6, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 6, N: "concat"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 6, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 6, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 6, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 6, N: "x", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 6, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 6, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 6, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 6, N: "x", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 6, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 6, N: "x", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 6, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 6, N: "x"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 6, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 6, N: "x", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 6, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 6, N: "y", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 6, location: span{from: 17, to: 18}, name: "y", type: "int"}; {L: span{from: 17, to: 18}, N: "y", P: 6, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 6, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 6, N: "y", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 6, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 6, N: "y", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 6, location: span{from: 17, to: 18}, name: "y", type: "int"}; {DL: span{from: 17, to: 18}, I: 6, N: "y"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 6, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 6, N: "y", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 5, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 5, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 5, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 5, T: tapp{from: "int", to: "string"}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 5, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 5, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 5, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 5, N: "intToString", TF: "int", TT: "string"}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 5, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 5, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 5, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 5, N: "intToString"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 5, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 5, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 5, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 5, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 5, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 5, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 5, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 5, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 5, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 5, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 5, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 5, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 5, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 5, N: "plus"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 5, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 5, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 5, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 5, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 5, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 5, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 5, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 5, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 5, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 5, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 5, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 5, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 5, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 5, N: "concat"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 5, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 5, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 5, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 5, N: "x", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 5, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 5, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 5, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 5, N: "x", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 5, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 5, N: "x", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 5, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 5, N: "x"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 5, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 5, N: "x", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 5, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 5, N: "y", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 5, location: span{from: 17, to: 18}, name: "y", type: "int"}; {L: span{from: 17, to: 18}, N: "y", P: 5, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 5, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 5, N: "y", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 5, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 5, N: "y", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 5, location: span{from: 17, to: 18}, name: "y", type: "int"}; {DL: span{from: 17, to: 18}, I: 5, N: "y"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 5, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 5, N: "y", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []

ast.StringLit{id: 5, location: span{from: 34, to: 39}, val: "foo"}.
----
text/emission-log
from null to ast.StringLit: ast.StringLit{id: 5, location: span{from: 34, to: 39}, val: "foo"}; {}.  []
  ast.StringLit{id: 5, location: span{from: 34, to: 39}, val: "foo"}; {}
from ast.StringLit to 1: ast.StringLit{id: 5, location: span{from: 34, to: 39}, val: "foo"}; {}. Match(ast.StringLit{id: I, location: S}; {}) []
  ast.StringLit{id: 5, location: span{from: 34, to: 39}, val: "foo"}; {I: 5, S: span{from: 34, to: 39}}
from ast.StringLit to 32: ast.StringLit{id: 5, location: span{from: 34, to: 39}, val: "foo"}; {}. Match(ast.StringLit{id: I}; {}) []
  ast.StringLit{id: 5, location: span{from: 34, to: 39}, val: "foo"}; {I: 5}
from ast.StringLit to 186: ast.StringLit{id: 5, location: span{from: 34, to: 39}, val: "foo"}; {}. Match(ast.StringLit{location: S}; {}) []
  ast.StringLit{id: 5, location: span{from: 34, to: 39}, val: "foo"}; {S: span{from: 34, to: 39}}
from 1 to 0: ast.StringLit{id: 5, location: span{from: 34, to: 39}, val: "foo"}; {I: 5, S: span{from: 34, to: 39}}. Union []
  ast.StringLit{id: 5, location: span{from: 34, to: 39}, val: "foo"}; {I: 5, S: span{from: 34, to: 39}}
from 32 to tc.typeS: ast.StringLit{id: 5, location: span{from: 34, to: 39}, val: "foo"}; {I: 5}. Subst({id: I, type: "string"}) []
  tc.typeS{id: 5, type: "string"}; {I: 5}
from 186 to hl.segmentStr: ast.StringLit{id: 5, location: span{from: 34, to: 39}, val: "foo"}; {S: span{from: 34, to: 39}}. Subst({highlight: false, span: S, type: "string"}) []
  hl.segmentStr{highlight: false, span: span{from: 34, to: 39}, type: "string"}; {S: span{from: 34, to: 39}}
from 0 to ast.Expr: ast.StringLit{id: 5, location: span{from: 34, to: 39}, val: "foo"}; {I: 5, S: span{from: 34, to: 39}}. Subst({id: I, location: S}) []
  ast.Expr{id: 5, location: span{from: 34, to: 39}}; {I: 5, S: span{from: 34, to: 39}}
from tc.typeS to 25: tc.typeS{id: 5, type: "string"}; {I: 5}. Match(tc.typeS{id: I, type: T}; {I: I}) []
  tc.typeS{id: 5, type: "string"}; {I: 5, T: "string"}
from hl.segmentStr to 165: hl.segmentStr{highlight: false, span: span{from: 34, to: 39}, type: "string"}; {S: span{from: 34, to: 39}}. Match(hl.segmentStr{highlight: H, span: S, type: T}; {S: S}) []
  hl.segmentStr{highlight: false, span: span{from: 34, to: 39}, type: "string"}; {H: false, S: span{from: 34, to: 39}, T: "string"}
from ast.Expr to 9: ast.Expr{id: 5, location: span{from: 34, to: 39}}; {I: 5, S: span{from: 34, to: 39}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 5, location: span{from: 34, to: 39}}; {I: 5, S: span{from: 34, to: 39}}
from ast.Expr to 12: ast.Expr{id: 5, location: span{from: 34, to: 39}}; {I: 5, S: span{from: 34, to: 39}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 5, location: span{from: 34, to: 39}}; {I: 5, S: span{from: 34, to: 39}}
from ast.Expr to 15: ast.Expr{id: 5, location: span{from: 34, to: 39}}; {I: 5, S: span{from: 34, to: 39}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 5, location: span{from: 34, to: 39}}; {I: 5, S: span{from: 34, to: 39}}
from ast.Expr to 18: ast.Expr{id: 5, location: span{from: 34, to: 39}}; {I: 5, S: span{from: 34, to: 39}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 5, location: span{from: 34, to: 39}}; {I: 5, S: span{from: 34, to: 39}}
from ast.Expr to 21: ast.Expr{id: 5, location: span{from: 34, to: 39}}; {I: 5, S: span{from: 34, to: 39}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 5, location: span{from: 34, to: 39}}; {I: 5, S: span{from: 34, to: 39}}
from ast.Expr to 102: ast.Expr{id: 5, location: span{from: 34, to: 39}}; {I: 5, S: span{from: 34, to: 39}}. Match(ast.Expr{id: UI, location: UL}; {I: UI, S: UL}) [UL]
  ast.Expr{id: 5, location: span{from: 34, to: 39}}; {UI: 5, UL: span{from: 34, to: 39}}
from ast.Expr to 118: ast.Expr{id: 5, location: span{from: 34, to: 39}}; {I: 5, S: span{from: 34, to: 39}}. Match(ast.Expr{id: I, location: span{from: Idx}}; {I: I}) [Idx]
  ast.Expr{id: 5, location: span{from: 34, to: 39}}; {I: 5, Idx: 34}
from ast.Expr to 123: ast.Expr{id: 5, location: span{from: 34, to: 39}}; {I: 5, S: span{from: 34, to: 39}}. Match(ast.Expr{id: I, location: span{from: FIdx, to: TIdx}}; {I: I}) []
  ast.Expr{id: 5, location: span{from: 34, to: 39}}; {FIdx: 34, I: 5, TIdx: 39}
from 25 to 24: tc.typeS{id: 5, type: "string"}; {I: 5, T: "string"}. Union []
  tc.typeS{id: 5, type: "string"}; {I: 5, T: "string"}
from 165 to 159: hl.segmentStr{highlight: false, span: span{from: 34, to: 39}, type: "string"}; {H: false, S: span{from: 34, to: 39}, T: "string"}. Union []
  hl.segmentStr{highlight: false, span: span{from: 34, to: 39}, type: "string"}; {H: false, S: span{from: 34, to: 39}, T: "string"}
from 9 to 11: ast.Expr{id: 5, location: span{from: 34, to: 39}}; {I: 5, S: span{from: 34, to: 39}}. Join(ast.ParentExpr, I: 10.bodyID = 9.id) []
from 12 to 14: ast.Expr{id: 5, location: span{from: 34, to: 39}}; {I: 5, S: span{from: 34, to: 39}}. Join(ast.ParentExpr, I: 13.bindingID = 12.id) []
  ast.ParentExpr{id: 5, location: span{from: 34, to: 39}}; {I: 5, P: 4, S: span{from: 34, to: 39}}
from 15 to 17: ast.Expr{id: 5, location: span{from: 34, to: 39}}; {I: 5, S: span{from: 34, to: 39}}. Join(ast.ParentExpr, I: 16.funcID = 15.id) []
from 18 to 20: ast.Expr{id: 5, location: span{from: 34, to: 39}}; {I: 5, S: span{from: 34, to: 39}}. Join(ast.ParentExpr, I: 19.argID = 18.id) []
from 21 to 23: ast.Expr{id: 5, location: span{from: 34, to: 39}}; {I: 5, S: span{from: 34, to: 39}}. Join(ast.ParentExpr, I: 22.body = 21.id) []
from 102 to 103: ast.Expr{id: 5, location: span{from: 34, to: 39}}; {UI: 5, UL: span{from: 34, to: 39}}. Join(ide.expectedTypeBinding, UL: 102.location = 101.usageLoc) [UI]
from 118 to 119: ast.Expr{id: 5, location: span{from: 34, to: 39}}; {I: 5, Idx: 34}. Join(ide.CurrentScope, Idx: 118.location.from = 117.idx) [I]
from 123 to 124: ast.Expr{id: 5, location: span{from: 34, to: 39}}; {FIdx: 34, I: 5, TIdx: 39}. Join(ide.CurrentType, ) [I]
from 24 to tc.Type: tc.typeS{id: 5, type: "string"}; {I: 5, T: "string"}. Subst({id: I, type: T}) []
  tc.Type{id: 5, type: "string"}; {I: 5, T: "string"}
from 159 to hl.Segment: hl.segmentStr{highlight: false, span: span{from: 34, to: 39}, type: "string"}; {H: false, S: span{from: 34, to: 39}, T: "string"}. Subst({highlight: H, span: S, type: T}) []
  hl.Segment{highlight: false, span: span{from: 34, to: 39}, type: "string"}; {H: false, S: span{from: 34, to: 39}, T: "string"}
from 14 to 8: ast.ParentExpr{id: 5, location: span{from: 34, to: 39}}; {I: 5, P: 4, S: span{from: 34, to: 39}}. Union []
  ast.ParentExpr{id: 5, location: span{from: 34, to: 39}}; {I: 5, P: 4, S: span{from: 34, to: 39}}
from tc.Type to 35: tc.Type{id: 5, type: "string"}; {I: 5, T: "string"}. Match(tc.Type{id: FID, type: tapp{from: F, to: T}}; {I: FID}) [FID]
from tc.Type to 37: tc.Type{id: 5, type: "string"}; {I: 5, T: "string"}. Match(tc.Type{id: AID, type: F}; {I: AID, T: F}) [F]
  tc.Type{id: 5, type: "string"}; {AID: 5, F: "string"}
from tc.Type to 40: tc.Type{id: 5, type: "string"}; {I: 5, T: "string"}. Match(tc.Type{id: BID, type: T}; {I: BID, T: T}) [BID]
  tc.Type{id: 5, type: "string"}; {BID: 5, T: "string"}
from tc.Type to 48: tc.Type{id: 5, type: "string"}; {I: 5, T: "string"}. Match(tc.Type{id: B, type: R}; {I: B, T: R}) []
  tc.Type{id: 5, type: "string"}; {B: 5, R: "string"}
from tc.Type to 62: tc.Type{id: 5, type: "string"}; {I: 5, T: "string"}. Match(tc.Type{id: B, type: T}; {I: B, T: T}) [B]
  tc.Type{id: 5, type: "string"}; {B: 5, T: "string"}
from tc.Type to 96: tc.Type{id: 5, type: "string"}; {I: 5, T: "string"}. Match(tc.Type{id: F, type: tapp{from: T}}; {I: F}) [F]
from tc.Type to 125: tc.Type{id: 5, type: "string"}; {I: 5, T: "string"}. Match(tc.Type{id: I, type: T}; {I: I, T: T}) [I]
  tc.Type{id: 5, type: "string"}; {I: 5, T: "string"}
from 8 to ast.ParentExpr: ast.ParentExpr{id: 5, location: span{from: 34, to: 39}}; {I: 5, P: 4, S: span{from: 34, to: 39}}. Subst({id: I, parent: P, span: S}) []
  ast.ParentExpr{id: 5, parent: 4, span: span{from: 34, to: 39}}; {I: 5, P: 4, S: span{from: 34, to: 39}}
from 37 to 38: tc.Type{id: 5, type: "string"}; {AID: 5, F: "string"}. Join(tc.typeFC, F: 37.type = 36.type.from) []
from 40 to 41: tc.Type{id: 5, type: "string"}; {BID: 5, T: "string"}. Join(tc.typeLet, BID: 40.id = 39.bodyID) []
from 48 to 49: tc.Type{id: 5, type: "string"}; {B: 5, R: "string"}. Join(tc.typeLambda, ) []
from 62 to 63: tc.Type{id: 5, type: "string"}; {B: 5, T: "string"}. Join(tc.scopeLet, B: 62.id = 61.bindingID) []
  tc.scopeLet{id: 5, type: "string"}; {B: 5, I: 6, L: span{from: 30, to: 31}, N: "z", T: "string"}
from 125 to 126: tc.Type{id: 5, type: "string"}; {I: 5, T: "string"}. Join(ide.CurrentType, I: 125.id = 124.id) []
from 63 to tc.scopeLet: tc.scopeLet{id: 5, type: "string"}; {B: 5, I: 6, L: span{from: 30, to: 31}, N: "z", T: "string"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.scopeLet{id: 6, location: span{from: 30, to: 31}, name: "z", type: "string"}; {B: 5, I: 6, L: span{from: 30, to: 31}, N: "z", T: "string"}
from tc.scopeLet to 53: tc.scopeLet{id: 6, location: span{from: 30, to: 31}, name: "z", type: "string"}; {B: 5, I: 6, L: span{from: 30, to: 31}, N: "z", T: "string"}. Match(tc.scopeLet{id: I, location: L, name: N, type: T}; {I: I, L: L, N: N, T: T}) []
  tc.scopeLet{id: 6, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 6, L: span{from: 30, to: 31}, N: "z", T: "string"}
from 53 to 51: tc.scopeLet{id: 6, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 6, L: span{from: 30, to: 31}, N: "z", T: "string"}. Union []
  tc.scopeLet{id: 6, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 6, L: span{from: 30, to: 31}, N: "z", T: "string"}
from 51 to tc.ScopeItem: tc.scopeLet{id: 6, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 6, L: span{from: 30, to: 31}, N: "z", T: "string"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 6, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 6, L: span{from: 30, to: 31}, N: "z", T: "string"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 6, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 6, L: span{from: 30, to: 31}, N: "z", T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 6, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 6, N: "z", T: "string"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 6, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 6, L: span{from: 30, to: 31}, N: "z", T: "string"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 6, location: span{from: 30, to: 31}, name: "z", type: "string"}; {L: span{from: 30, to: 31}, N: "z", P: 6, T: "string"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 6, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 6, L: span{from: 30, to: 31}, N: "z", T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 6, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 6, N: "z", T: "string"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 6, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 6, L: span{from: 30, to: 31}, N: "z", T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 6, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 6, L: span{from: 30, to: 31}, N: "z", T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 6, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 6, N: "z", T: "string"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 6, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 6, L: span{from: 30, to: 31}, N: "z", T: "string"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 6, location: span{from: 30, to: 31}, name: "z", type: "string"}; {DL: span{from: 30, to: 31}, I: 6, N: "z"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 6, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 6, L: span{from: 30, to: 31}, N: "z", T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 6, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 6, N: "z", T: "string"}
from 43 to 44: tc.ScopeItem{id: 6, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 6, N: "z", T: "string"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 6, location: span{from: 30, to: 31}, name: "z", type: "string"}; {L: span{from: 30, to: 31}, N: "z", P: 6, T: "string"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 6, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 6, N: "z", T: "string"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 6, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 6, N: "z", T: "string"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 6, location: span{from: 30, to: 31}, name: "z", type: "string"}; {DL: span{from: 30, to: 31}, I: 6, N: "z"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 6, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 6, N: "z", T: "string"}. Join(ide.CurrentScope, I: 120.id = 119.id) []

ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}.
----
text/emission-log
from null to ast.LetExpr: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {}.  []
  ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {}
from ast.LetExpr to 4: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {}. Match(ast.LetExpr{id: I, location: S}; {}) []
  ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {I: 6, S: span{from: 43, to: 90}}
from ast.LetExpr to 10: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {}. Match(ast.LetExpr{bodyID: I, id: P}; {}) [I]
  ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {I: 14, P: 6}
from ast.LetExpr to 13: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {}. Match(ast.LetExpr{bindingID: I, id: P}; {}) [I]
  ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {I: 7, P: 6}
from ast.LetExpr to 39: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {}. Match(ast.LetExpr{bodyID: BID, id: I}; {}) [BID]
  ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {BID: 14, I: 6}
from ast.LetExpr to 61: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {}. Match(ast.LetExpr{bindingID: B, bodyID: I, varLoc: L, varName: N}; {}) [B]
  ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {B: 7, I: 14, L: span{from: 47, to: 48}, N: "a"}
from ast.LetExpr to 68: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {}. Match(ast.LetExpr{bodyID: I, id: P}; {}) []
  ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {I: 14, P: 6}
from ast.LetExpr to 69: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {}. Match(ast.LetExpr{bindingID: I, id: P}; {}) []
  ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {I: 7, P: 6}
from ast.LetExpr to 92: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {}. Match(ast.LetExpr{bodyID: I, id: L}; {}) [L]
  ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {I: 14, L: 6}
from ast.LetExpr to 99: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {}. Match(ast.LetExpr{bindingID: I, varLoc: VL}; {}) [VL]
  ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {I: 7, VL: span{from: 47, to: 48}}
from ast.LetExpr to 177: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {}. Match(ast.LetExpr{varLoc: S}; {}) []
  ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {S: span{from: 47, to: 48}}
from ast.LetExpr to 189: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {}. Match(ast.LetExpr{inLoc: S}; {}) []
  ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {S: span{from: 75, to: 78}}
from ast.LetExpr to 190: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {}. Match(ast.LetExpr{letLoc: S}; {}) []
  ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {S: span{from: 43, to: 47}}
from 4 to 0: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {I: 6, S: span{from: 43, to: 90}}. Union []
  ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {I: 6, S: span{from: 43, to: 90}}
from 10 to 11: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {I: 14, P: 6}. Join(ast.ParentExpr, I: 10.bodyID = 9.id) []
from 13 to 14: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {I: 7, P: 6}. Join(ast.ParentExpr, I: 13.bindingID = 12.id) []
from 39 to 41: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {BID: 14, I: 6}. Join(tc.typeLet, BID: 40.id = 39.bodyID) []
from 61 to 63: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {B: 7, I: 14, L: span{from: 47, to: 48}, N: "a"}. Join(tc.scopeLet, B: 62.id = 61.bindingID) []
from 68 to 67: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {I: 14, P: 6}. Union []
  ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {I: 14, P: 6}
from 69 to 67: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {I: 7, P: 6}. Union []
  ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {I: 7, P: 6}
from 92 to 94: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {I: 14, L: 6}. Join(ide.expectedType, L: 93.id = 92.id) []
from 99 to 101: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {I: 7, VL: span{from: 47, to: 48}}. Join(ide.expectedTypeBinding, VL: 100.definitionLoc = 99.varLoc) [UL]
from 177 to 176: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {S: span{from: 47, to: 48}}. Union []
  ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {S: span{from: 47, to: 48}}
from 189 to 188: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {S: span{from: 75, to: 78}}. Union []
  ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {S: span{from: 75, to: 78}}
from 190 to 188: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {S: span{from: 43, to: 47}}. Union []
  ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {S: span{from: 43, to: 47}}
from 0 to ast.Expr: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {I: 6, S: span{from: 43, to: 90}}. Subst({id: I, location: S}) []
  ast.Expr{id: 6, location: span{from: 43, to: 90}}; {I: 6, S: span{from: 43, to: 90}}
from 67 to tc.parentScope: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {I: 14, P: 6}. Subst({id: I, parentID: P}) []
  tc.parentScope{id: 14, parentID: 6}; {I: 14, P: 6}
from 67 to tc.parentScope: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {I: 7, P: 6}. Subst({id: I, parentID: P}) []
  tc.parentScope{id: 7, parentID: 6}; {I: 7, P: 6}
from 176 to hl.varDefn: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {S: span{from: 47, to: 48}}. Subst({span: S}) []
  hl.varDefn{span: span{from: 47, to: 48}}; {S: span{from: 47, to: 48}}
from 188 to hl.segmentKeyword: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {S: span{from: 75, to: 78}}. Subst({highlight: false, span: S, type: "keyword"}) []
  hl.segmentKeyword{highlight: false, span: span{from: 75, to: 78}, type: "keyword"}; {S: span{from: 75, to: 78}}
from 188 to hl.segmentKeyword: ast.LetExpr{bindingID: 7, bodyID: 14, id: 6, inLoc: span{from: 75, to: 78}, letLoc: span{from: 43, to: 47}, location: span{from: 43, to: 90}, varLoc: span{from: 47, to: 48}, varName: "a"}; {S: span{from: 43, to: 47}}. Subst({highlight: false, span: S, type: "keyword"}) []
  hl.segmentKeyword{highlight: false, span: span{from: 43, to: 47}, type: "keyword"}; {S: span{from: 43, to: 47}}
from ast.Expr to 9: ast.Expr{id: 6, location: span{from: 43, to: 90}}; {I: 6, S: span{from: 43, to: 90}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 6, location: span{from: 43, to: 90}}; {I: 6, S: span{from: 43, to: 90}}
from ast.Expr to 12: ast.Expr{id: 6, location: span{from: 43, to: 90}}; {I: 6, S: span{from: 43, to: 90}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 6, location: span{from: 43, to: 90}}; {I: 6, S: span{from: 43, to: 90}}
from ast.Expr to 15: ast.Expr{id: 6, location: span{from: 43, to: 90}}; {I: 6, S: span{from: 43, to: 90}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 6, location: span{from: 43, to: 90}}; {I: 6, S: span{from: 43, to: 90}}
from ast.Expr to 18: ast.Expr{id: 6, location: span{from: 43, to: 90}}; {I: 6, S: span{from: 43, to: 90}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 6, location: span{from: 43, to: 90}}; {I: 6, S: span{from: 43, to: 90}}
from ast.Expr to 21: ast.Expr{id: 6, location: span{from: 43, to: 90}}; {I: 6, S: span{from: 43, to: 90}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 6, location: span{from: 43, to: 90}}; {I: 6, S: span{from: 43, to: 90}}
from ast.Expr to 102: ast.Expr{id: 6, location: span{from: 43, to: 90}}; {I: 6, S: span{from: 43, to: 90}}. Match(ast.Expr{id: UI, location: UL}; {I: UI, S: UL}) [UL]
  ast.Expr{id: 6, location: span{from: 43, to: 90}}; {UI: 6, UL: span{from: 43, to: 90}}
from ast.Expr to 118: ast.Expr{id: 6, location: span{from: 43, to: 90}}; {I: 6, S: span{from: 43, to: 90}}. Match(ast.Expr{id: I, location: span{from: Idx}}; {I: I}) [Idx]
  ast.Expr{id: 6, location: span{from: 43, to: 90}}; {I: 6, Idx: 43}
from ast.Expr to 123: ast.Expr{id: 6, location: span{from: 43, to: 90}}; {I: 6, S: span{from: 43, to: 90}}. Match(ast.Expr{id: I, location: span{from: FIdx, to: TIdx}}; {I: I}) []
  ast.Expr{id: 6, location: span{from: 43, to: 90}}; {FIdx: 43, I: 6, TIdx: 90}
from tc.parentScope to 55: tc.parentScope{id: 14, parentID: 6}; {I: 14, P: 6}. Match(tc.parentScope{id: I, parentID: P}; {I: I, P: P}) [P]
  tc.parentScope{id: 14, parentID: 6}; {I: 14, P: 6}
from tc.parentScope to 55: tc.parentScope{id: 7, parentID: 6}; {I: 7, P: 6}. Match(tc.parentScope{id: I, parentID: P}; {I: I, P: P}) [P]
  tc.parentScope{id: 7, parentID: 6}; {I: 7, P: 6}
from hl.varDefn to 170: hl.varDefn{span: span{from: 47, to: 48}}; {S: span{from: 47, to: 48}}. Match(hl.varDefn{span: S}; {S: S}) [S]
  hl.varDefn{span: span{from: 47, to: 48}}; {S: span{from: 47, to: 48}}
from hl.varDefn to 174: hl.varDefn{span: span{from: 47, to: 48}}; {S: span{from: 47, to: 48}}. Match(hl.varDefn{span: S}; {S: S}) [S]
  hl.varDefn{span: span{from: 47, to: 48}}; {S: span{from: 47, to: 48}}
from hl.segmentKeyword to 167: hl.segmentKeyword{highlight: false, span: span{from: 75, to: 78}, type: "keyword"}; {S: span{from: 75, to: 78}}. Match(hl.segmentKeyword{highlight: H, span: S, type: T}; {S: S}) []
  hl.segmentKeyword{highlight: false, span: span{from: 75, to: 78}, type: "keyword"}; {H: false, S: span{from: 75, to: 78}, T: "keyword"}
from hl.segmentKeyword to 167: hl.segmentKeyword{highlight: false, span: span{from: 43, to: 47}, type: "keyword"}; {S: span{from: 43, to: 47}}. Match(hl.segmentKeyword{highlight: H, span: S, type: T}; {S: S}) []
  hl.segmentKeyword{highlight: false, span: span{from: 43, to: 47}, type: "keyword"}; {H: false, S: span{from: 43, to: 47}, T: "keyword"}
from 9 to 11: ast.Expr{id: 6, location: span{from: 43, to: 90}}; {I: 6, S: span{from: 43, to: 90}}. Join(ast.ParentExpr, I: 10.bodyID = 9.id) []
  ast.ParentExpr{id: 6, location: span{from: 43, to: 90}}; {I: 6, P: 4, S: span{from: 43, to: 90}}
from 12 to 14: ast.Expr{id: 6, location: span{from: 43, to: 90}}; {I: 6, S: span{from: 43, to: 90}}. Join(ast.ParentExpr, I: 13.bindingID = 12.id) []
from 15 to 17: ast.Expr{id: 6, location: span{from: 43, to: 90}}; {I: 6, S: span{from: 43, to: 90}}. Join(ast.ParentExpr, I: 16.funcID = 15.id) []
from 18 to 20: ast.Expr{id: 6, location: span{from: 43, to: 90}}; {I: 6, S: span{from: 43, to: 90}}. Join(ast.ParentExpr, I: 19.argID = 18.id) []
from 21 to 23: ast.Expr{id: 6, location: span{from: 43, to: 90}}; {I: 6, S: span{from: 43, to: 90}}. Join(ast.ParentExpr, I: 22.body = 21.id) []
from 102 to 103: ast.Expr{id: 6, location: span{from: 43, to: 90}}; {UI: 6, UL: span{from: 43, to: 90}}. Join(ide.expectedTypeBinding, UL: 102.location = 101.usageLoc) [UI]
from 118 to 119: ast.Expr{id: 6, location: span{from: 43, to: 90}}; {I: 6, Idx: 43}. Join(ide.CurrentScope, Idx: 118.location.from = 117.idx) [I]
from 123 to 124: ast.Expr{id: 6, location: span{from: 43, to: 90}}; {FIdx: 43, I: 6, TIdx: 90}. Join(ide.CurrentType, ) [I]
from 55 to 57: tc.parentScope{id: 14, parentID: 6}; {I: 14, P: 6}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
  tc.ScopeItem{id: 14, parentID: 6}; {I: 14, L: "builtin", N: "intToString", P: 6, T: tapp{from: "int", to: "string"}}
  tc.ScopeItem{id: 14, parentID: 6}; {I: 14, L: "builtin", N: "plus", P: 6, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
  tc.ScopeItem{id: 14, parentID: 6}; {I: 14, L: "builtin", N: "concat", P: 6, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
  tc.ScopeItem{id: 14, parentID: 6}; {I: 14, L: span{from: 4, to: 5}, N: "x", P: 6, T: "int"}
  tc.ScopeItem{id: 14, parentID: 6}; {I: 14, L: span{from: 17, to: 18}, N: "y", P: 6, T: "int"}
  tc.ScopeItem{id: 14, parentID: 6}; {I: 14, L: span{from: 30, to: 31}, N: "z", P: 6, T: "string"}
from 55 to 57: tc.parentScope{id: 7, parentID: 6}; {I: 7, P: 6}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
  tc.ScopeItem{id: 7, parentID: 6}; {I: 7, L: "builtin", N: "intToString", P: 6, T: tapp{from: "int", to: "string"}}
  tc.ScopeItem{id: 7, parentID: 6}; {I: 7, L: "builtin", N: "plus", P: 6, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
  tc.ScopeItem{id: 7, parentID: 6}; {I: 7, L: "builtin", N: "concat", P: 6, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
  tc.ScopeItem{id: 7, parentID: 6}; {I: 7, L: span{from: 4, to: 5}, N: "x", P: 6, T: "int"}
  tc.ScopeItem{id: 7, parentID: 6}; {I: 7, L: span{from: 17, to: 18}, N: "y", P: 6, T: "int"}
  tc.ScopeItem{id: 7, parentID: 6}; {I: 7, L: span{from: 30, to: 31}, N: "z", P: 6, T: "string"}
from 170 to 172: hl.varDefn{span: span{from: 47, to: 48}}; {S: span{from: 47, to: 48}}. Join(hl.segmentDefn, S: 171.definitionLoc = 170.span) []
from 174 to 175: hl.varDefn{span: span{from: 47, to: 48}}; {S: span{from: 47, to: 48}}. Join(hl.segmentDefnHL, S: 174.span = 173.defnLoc) []
from 167 to 159: hl.segmentKeyword{highlight: false, span: span{from: 75, to: 78}, type: "keyword"}; {H: false, S: span{from: 75, to: 78}, T: "keyword"}. Union []
  hl.segmentKeyword{highlight: false, span: span{from: 75, to: 78}, type: "keyword"}; {H: false, S: span{from: 75, to: 78}, T: "keyword"}
from 167 to 159: hl.segmentKeyword{highlight: false, span: span{from: 43, to: 47}, type: "keyword"}; {H: false, S: span{from: 43, to: 47}, T: "keyword"}. Union []
  hl.segmentKeyword{highlight: false, span: span{from: 43, to: 47}, type: "keyword"}; {H: false, S: span{from: 43, to: 47}, T: "keyword"}
from 11 to 8: ast.ParentExpr{id: 6, location: span{from: 43, to: 90}}; {I: 6, P: 4, S: span{from: 43, to: 90}}. Union []
  ast.ParentExpr{id: 6, location: span{from: 43, to: 90}}; {I: 6, P: 4, S: span{from: 43, to: 90}}
from 57 to 51: tc.ScopeItem{id: 14, parentID: 6}; {I: 14, L: "builtin", N: "intToString", P: 6, T: tapp{from: "int", to: "string"}}. Union []
  tc.ScopeItem{id: 14, parentID: 6}; {I: 14, L: "builtin", N: "intToString", P: 6, T: tapp{from: "int", to: "string"}}
from 57 to 51: tc.ScopeItem{id: 14, parentID: 6}; {I: 14, L: "builtin", N: "plus", P: 6, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Union []
  tc.ScopeItem{id: 14, parentID: 6}; {I: 14, L: "builtin", N: "plus", P: 6, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 57 to 51: tc.ScopeItem{id: 14, parentID: 6}; {I: 14, L: "builtin", N: "concat", P: 6, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Union []
  tc.ScopeItem{id: 14, parentID: 6}; {I: 14, L: "builtin", N: "concat", P: 6, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 57 to 51: tc.ScopeItem{id: 14, parentID: 6}; {I: 14, L: span{from: 4, to: 5}, N: "x", P: 6, T: "int"}. Union []
  tc.ScopeItem{id: 14, parentID: 6}; {I: 14, L: span{from: 4, to: 5}, N: "x", P: 6, T: "int"}
from 57 to 51: tc.ScopeItem{id: 14, parentID: 6}; {I: 14, L: span{from: 17, to: 18}, N: "y", P: 6, T: "int"}. Union []
  tc.ScopeItem{id: 14, parentID: 6}; {I: 14, L: span{from: 17, to: 18}, N: "y", P: 6, T: "int"}
from 57 to 51: tc.ScopeItem{id: 14, parentID: 6}; {I: 14, L: span{from: 30, to: 31}, N: "z", P: 6, T: "string"}. Union []
  tc.ScopeItem{id: 14, parentID: 6}; {I: 14, L: span{from: 30, to: 31}, N: "z", P: 6, T: "string"}
from 57 to 51: tc.ScopeItem{id: 7, parentID: 6}; {I: 7, L: "builtin", N: "intToString", P: 6, T: tapp{from: "int", to: "string"}}. Union []
  tc.ScopeItem{id: 7, parentID: 6}; {I: 7, L: "builtin", N: "intToString", P: 6, T: tapp{from: "int", to: "string"}}
from 57 to 51: tc.ScopeItem{id: 7, parentID: 6}; {I: 7, L: "builtin", N: "plus", P: 6, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Union []
  tc.ScopeItem{id: 7, parentID: 6}; {I: 7, L: "builtin", N: "plus", P: 6, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 57 to 51: tc.ScopeItem{id: 7, parentID: 6}; {I: 7, L: "builtin", N: "concat", P: 6, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Union []
  tc.ScopeItem{id: 7, parentID: 6}; {I: 7, L: "builtin", N: "concat", P: 6, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 57 to 51: tc.ScopeItem{id: 7, parentID: 6}; {I: 7, L: span{from: 4, to: 5}, N: "x", P: 6, T: "int"}. Union []
  tc.ScopeItem{id: 7, parentID: 6}; {I: 7, L: span{from: 4, to: 5}, N: "x", P: 6, T: "int"}
from 57 to 51: tc.ScopeItem{id: 7, parentID: 6}; {I: 7, L: span{from: 17, to: 18}, N: "y", P: 6, T: "int"}. Union []
  tc.ScopeItem{id: 7, parentID: 6}; {I: 7, L: span{from: 17, to: 18}, N: "y", P: 6, T: "int"}
from 57 to 51: tc.ScopeItem{id: 7, parentID: 6}; {I: 7, L: span{from: 30, to: 31}, N: "z", P: 6, T: "string"}. Union []
  tc.ScopeItem{id: 7, parentID: 6}; {I: 7, L: span{from: 30, to: 31}, N: "z", P: 6, T: "string"}
from 159 to hl.Segment: hl.segmentKeyword{highlight: false, span: span{from: 75, to: 78}, type: "keyword"}; {H: false, S: span{from: 75, to: 78}, T: "keyword"}. Subst({highlight: H, span: S, type: T}) []
  hl.Segment{highlight: false, span: span{from: 75, to: 78}, type: "keyword"}; {H: false, S: span{from: 75, to: 78}, T: "keyword"}
from 159 to hl.Segment: hl.segmentKeyword{highlight: false, span: span{from: 43, to: 47}, type: "keyword"}; {H: false, S: span{from: 43, to: 47}, T: "keyword"}. Subst({highlight: H, span: S, type: T}) []
  hl.Segment{highlight: false, span: span{from: 43, to: 47}, type: "keyword"}; {H: false, S: span{from: 43, to: 47}, T: "keyword"}
from 8 to ast.ParentExpr: ast.ParentExpr{id: 6, location: span{from: 43, to: 90}}; {I: 6, P: 4, S: span{from: 43, to: 90}}. Subst({id: I, parent: P, span: S}) []
  ast.ParentExpr{id: 6, parent: 4, span: span{from: 43, to: 90}}; {I: 6, P: 4, S: span{from: 43, to: 90}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 14, parentID: 6}; {I: 14, L: "builtin", N: "intToString", P: 6, T: tapp{from: "int", to: "string"}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 14, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 14, L: "builtin", N: "intToString", P: 6, T: tapp{from: "int", to: "string"}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 14, parentID: 6}; {I: 14, L: "builtin", N: "plus", P: 6, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 14, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 14, L: "builtin", N: "plus", P: 6, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 14, parentID: 6}; {I: 14, L: "builtin", N: "concat", P: 6, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 14, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 14, L: "builtin", N: "concat", P: 6, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 14, parentID: 6}; {I: 14, L: span{from: 4, to: 5}, N: "x", P: 6, T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 14, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 14, L: span{from: 4, to: 5}, N: "x", P: 6, T: "int"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 14, parentID: 6}; {I: 14, L: span{from: 17, to: 18}, N: "y", P: 6, T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 14, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 14, L: span{from: 17, to: 18}, N: "y", P: 6, T: "int"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 14, parentID: 6}; {I: 14, L: span{from: 30, to: 31}, N: "z", P: 6, T: "string"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 14, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 14, L: span{from: 30, to: 31}, N: "z", P: 6, T: "string"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 7, parentID: 6}; {I: 7, L: "builtin", N: "intToString", P: 6, T: tapp{from: "int", to: "string"}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 7, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 7, L: "builtin", N: "intToString", P: 6, T: tapp{from: "int", to: "string"}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 7, parentID: 6}; {I: 7, L: "builtin", N: "plus", P: 6, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 7, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 7, L: "builtin", N: "plus", P: 6, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 7, parentID: 6}; {I: 7, L: "builtin", N: "concat", P: 6, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 7, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 7, L: "builtin", N: "concat", P: 6, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 7, parentID: 6}; {I: 7, L: span{from: 4, to: 5}, N: "x", P: 6, T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 7, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 7, L: span{from: 4, to: 5}, N: "x", P: 6, T: "int"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 7, parentID: 6}; {I: 7, L: span{from: 17, to: 18}, N: "y", P: 6, T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 7, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 7, L: span{from: 17, to: 18}, N: "y", P: 6, T: "int"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 7, parentID: 6}; {I: 7, L: span{from: 30, to: 31}, N: "z", P: 6, T: "string"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 7, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 7, L: span{from: 30, to: 31}, N: "z", P: 6, T: "string"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 14, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 14, L: "builtin", N: "intToString", P: 6, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 14, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 14, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 14, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 14, L: "builtin", N: "intToString", P: 6, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 14, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 14, T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 14, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 14, L: "builtin", N: "intToString", P: 6, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 14, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 14, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 14, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 14, L: "builtin", N: "intToString", P: 6, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 14, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 14, N: "intToString", TF: "int", TT: "string"}
from tc.ScopeItem to 88: tc.ScopeItem{id: 14, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 14, L: "builtin", N: "intToString", P: 6, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 14, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 14, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 14, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 14, L: "builtin", N: "intToString", P: 6, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 14, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 14, N: "intToString"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 14, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 14, L: "builtin", N: "intToString", P: 6, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 14, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 14, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 14, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 14, L: "builtin", N: "plus", P: 6, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 14, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 14, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 14, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 14, L: "builtin", N: "plus", P: 6, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 14, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 14, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 14, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 14, L: "builtin", N: "plus", P: 6, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 14, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 14, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 14, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 14, L: "builtin", N: "plus", P: 6, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 14, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 14, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 14, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 14, L: "builtin", N: "plus", P: 6, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 14, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 14, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 14, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 14, L: "builtin", N: "plus", P: 6, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 14, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 14, N: "plus"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 14, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 14, L: "builtin", N: "plus", P: 6, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 14, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 14, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 14, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 14, L: "builtin", N: "concat", P: 6, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 14, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 14, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 14, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 14, L: "builtin", N: "concat", P: 6, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 14, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 14, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 14, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 14, L: "builtin", N: "concat", P: 6, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 14, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 14, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 14, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 14, L: "builtin", N: "concat", P: 6, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 14, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 14, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 14, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 14, L: "builtin", N: "concat", P: 6, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 14, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 14, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 14, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 14, L: "builtin", N: "concat", P: 6, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 14, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 14, N: "concat"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 14, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 14, L: "builtin", N: "concat", P: 6, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 14, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 14, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 14, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 14, L: span{from: 4, to: 5}, N: "x", P: 6, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 14, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 14, N: "x", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 14, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 14, L: span{from: 4, to: 5}, N: "x", P: 6, T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 14, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 14, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 14, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 14, L: span{from: 4, to: 5}, N: "x", P: 6, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 14, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 14, N: "x", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 14, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 14, L: span{from: 4, to: 5}, N: "x", P: 6, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 14, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 14, L: span{from: 4, to: 5}, N: "x", P: 6, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 14, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 14, N: "x", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 14, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 14, L: span{from: 4, to: 5}, N: "x", P: 6, T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 14, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 14, N: "x"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 14, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 14, L: span{from: 4, to: 5}, N: "x", P: 6, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 14, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 14, N: "x", T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 14, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 14, L: span{from: 17, to: 18}, N: "y", P: 6, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 14, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 14, N: "y", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 14, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 14, L: span{from: 17, to: 18}, N: "y", P: 6, T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 14, location: span{from: 17, to: 18}, name: "y", type: "int"}; {L: span{from: 17, to: 18}, N: "y", P: 14, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 14, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 14, L: span{from: 17, to: 18}, N: "y", P: 6, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 14, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 14, N: "y", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 14, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 14, L: span{from: 17, to: 18}, N: "y", P: 6, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 14, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 14, L: span{from: 17, to: 18}, N: "y", P: 6, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 14, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 14, N: "y", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 14, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 14, L: span{from: 17, to: 18}, N: "y", P: 6, T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 14, location: span{from: 17, to: 18}, name: "y", type: "int"}; {DL: span{from: 17, to: 18}, I: 14, N: "y"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 14, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 14, L: span{from: 17, to: 18}, N: "y", P: 6, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 14, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 14, N: "y", T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 14, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 14, L: span{from: 30, to: 31}, N: "z", P: 6, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 14, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 14, N: "z", T: "string"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 14, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 14, L: span{from: 30, to: 31}, N: "z", P: 6, T: "string"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 14, location: span{from: 30, to: 31}, name: "z", type: "string"}; {L: span{from: 30, to: 31}, N: "z", P: 14, T: "string"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 14, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 14, L: span{from: 30, to: 31}, N: "z", P: 6, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 14, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 14, N: "z", T: "string"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 14, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 14, L: span{from: 30, to: 31}, N: "z", P: 6, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 14, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 14, L: span{from: 30, to: 31}, N: "z", P: 6, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 14, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 14, N: "z", T: "string"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 14, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 14, L: span{from: 30, to: 31}, N: "z", P: 6, T: "string"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 14, location: span{from: 30, to: 31}, name: "z", type: "string"}; {DL: span{from: 30, to: 31}, I: 14, N: "z"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 14, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 14, L: span{from: 30, to: 31}, N: "z", P: 6, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 14, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 14, N: "z", T: "string"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 7, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 7, L: "builtin", N: "intToString", P: 6, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 7, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 7, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 7, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 7, L: "builtin", N: "intToString", P: 6, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 7, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 7, T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 7, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 7, L: "builtin", N: "intToString", P: 6, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 7, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 7, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 7, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 7, L: "builtin", N: "intToString", P: 6, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 7, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 7, N: "intToString", TF: "int", TT: "string"}
from tc.ScopeItem to 88: tc.ScopeItem{id: 7, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 7, L: "builtin", N: "intToString", P: 6, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 7, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 7, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 7, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 7, L: "builtin", N: "intToString", P: 6, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 7, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 7, N: "intToString"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 7, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 7, L: "builtin", N: "intToString", P: 6, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 7, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 7, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 7, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 7, L: "builtin", N: "plus", P: 6, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 7, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 7, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 7, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 7, L: "builtin", N: "plus", P: 6, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 7, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 7, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 7, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 7, L: "builtin", N: "plus", P: 6, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 7, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 7, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 7, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 7, L: "builtin", N: "plus", P: 6, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 7, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 7, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 7, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 7, L: "builtin", N: "plus", P: 6, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 7, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 7, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 7, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 7, L: "builtin", N: "plus", P: 6, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 7, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 7, N: "plus"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 7, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 7, L: "builtin", N: "plus", P: 6, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 7, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 7, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 7, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 7, L: "builtin", N: "concat", P: 6, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 7, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 7, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 7, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 7, L: "builtin", N: "concat", P: 6, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 7, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 7, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 7, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 7, L: "builtin", N: "concat", P: 6, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 7, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 7, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 7, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 7, L: "builtin", N: "concat", P: 6, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 7, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 7, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 7, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 7, L: "builtin", N: "concat", P: 6, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 7, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 7, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 7, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 7, L: "builtin", N: "concat", P: 6, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 7, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 7, N: "concat"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 7, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 7, L: "builtin", N: "concat", P: 6, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 7, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 7, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 7, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 7, L: span{from: 4, to: 5}, N: "x", P: 6, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 7, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 7, N: "x", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 7, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 7, L: span{from: 4, to: 5}, N: "x", P: 6, T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 7, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 7, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 7, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 7, L: span{from: 4, to: 5}, N: "x", P: 6, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 7, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 7, N: "x", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 7, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 7, L: span{from: 4, to: 5}, N: "x", P: 6, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 7, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 7, L: span{from: 4, to: 5}, N: "x", P: 6, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 7, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 7, N: "x", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 7, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 7, L: span{from: 4, to: 5}, N: "x", P: 6, T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 7, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 7, N: "x"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 7, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 7, L: span{from: 4, to: 5}, N: "x", P: 6, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 7, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 7, N: "x", T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 7, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 7, L: span{from: 17, to: 18}, N: "y", P: 6, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 7, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 7, N: "y", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 7, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 7, L: span{from: 17, to: 18}, N: "y", P: 6, T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 7, location: span{from: 17, to: 18}, name: "y", type: "int"}; {L: span{from: 17, to: 18}, N: "y", P: 7, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 7, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 7, L: span{from: 17, to: 18}, N: "y", P: 6, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 7, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 7, N: "y", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 7, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 7, L: span{from: 17, to: 18}, N: "y", P: 6, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 7, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 7, L: span{from: 17, to: 18}, N: "y", P: 6, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 7, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 7, N: "y", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 7, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 7, L: span{from: 17, to: 18}, N: "y", P: 6, T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 7, location: span{from: 17, to: 18}, name: "y", type: "int"}; {DL: span{from: 17, to: 18}, I: 7, N: "y"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 7, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 7, L: span{from: 17, to: 18}, N: "y", P: 6, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 7, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 7, N: "y", T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 7, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 7, L: span{from: 30, to: 31}, N: "z", P: 6, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 7, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 7, N: "z", T: "string"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 7, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 7, L: span{from: 30, to: 31}, N: "z", P: 6, T: "string"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 7, location: span{from: 30, to: 31}, name: "z", type: "string"}; {L: span{from: 30, to: 31}, N: "z", P: 7, T: "string"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 7, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 7, L: span{from: 30, to: 31}, N: "z", P: 6, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 7, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 7, N: "z", T: "string"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 7, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 7, L: span{from: 30, to: 31}, N: "z", P: 6, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 7, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 7, L: span{from: 30, to: 31}, N: "z", P: 6, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 7, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 7, N: "z", T: "string"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 7, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 7, L: span{from: 30, to: 31}, N: "z", P: 6, T: "string"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 7, location: span{from: 30, to: 31}, name: "z", type: "string"}; {DL: span{from: 30, to: 31}, I: 7, N: "z"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 7, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 7, L: span{from: 30, to: 31}, N: "z", P: 6, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 7, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 7, N: "z", T: "string"}
from 43 to 44: tc.ScopeItem{id: 14, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 14, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 14, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 14, T: tapp{from: "int", to: "string"}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 14, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 14, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 14, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 14, N: "intToString", TF: "int", TT: "string"}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 14, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 14, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 14, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 14, N: "intToString"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 14, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 14, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 14, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 14, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 14, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 14, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 14, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 14, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 14, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 14, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 14, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 14, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 14, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 14, N: "plus"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 14, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 14, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 14, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 14, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 14, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 14, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 14, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 14, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 14, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 14, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 14, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 14, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 14, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 14, N: "concat"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 14, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 14, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 14, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 14, N: "x", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 14, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 14, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 14, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 14, N: "x", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 14, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 14, N: "x", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 14, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 14, N: "x"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 14, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 14, N: "x", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 14, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 14, N: "y", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 14, location: span{from: 17, to: 18}, name: "y", type: "int"}; {L: span{from: 17, to: 18}, N: "y", P: 14, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 14, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 14, N: "y", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 14, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 14, N: "y", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 14, location: span{from: 17, to: 18}, name: "y", type: "int"}; {DL: span{from: 17, to: 18}, I: 14, N: "y"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 14, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 14, N: "y", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 14, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 14, N: "z", T: "string"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 14, location: span{from: 30, to: 31}, name: "z", type: "string"}; {L: span{from: 30, to: 31}, N: "z", P: 14, T: "string"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 14, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 14, N: "z", T: "string"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 14, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 14, N: "z", T: "string"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 14, location: span{from: 30, to: 31}, name: "z", type: "string"}; {DL: span{from: 30, to: 31}, I: 14, N: "z"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 14, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 14, N: "z", T: "string"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 7, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 7, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 7, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 7, T: tapp{from: "int", to: "string"}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 7, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 7, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 7, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 7, N: "intToString", TF: "int", TT: "string"}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 7, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 7, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 7, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 7, N: "intToString"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 7, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 7, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 7, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 7, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 7, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 7, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 7, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 7, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 7, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 7, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 7, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 7, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 7, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 7, N: "plus"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 7, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 7, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 7, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 7, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 7, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 7, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 7, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 7, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 7, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 7, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 7, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 7, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 7, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 7, N: "concat"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 7, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 7, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 7, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 7, N: "x", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 7, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 7, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 7, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 7, N: "x", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 7, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 7, N: "x", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 7, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 7, N: "x"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 7, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 7, N: "x", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 7, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 7, N: "y", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 7, location: span{from: 17, to: 18}, name: "y", type: "int"}; {L: span{from: 17, to: 18}, N: "y", P: 7, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 7, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 7, N: "y", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 7, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 7, N: "y", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 7, location: span{from: 17, to: 18}, name: "y", type: "int"}; {DL: span{from: 17, to: 18}, I: 7, N: "y"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 7, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 7, N: "y", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 7, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 7, N: "z", T: "string"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 7, location: span{from: 30, to: 31}, name: "z", type: "string"}; {L: span{from: 30, to: 31}, N: "z", P: 7, T: "string"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 7, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 7, N: "z", T: "string"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 7, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 7, N: "z", T: "string"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 7, location: span{from: 30, to: 31}, name: "z", type: "string"}; {DL: span{from: 30, to: 31}, I: 7, N: "z"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 7, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 7, N: "z", T: "string"}. Join(ide.CurrentScope, I: 120.id = 119.id) []

ast.FuncCall{argID: 9, funcID: 8, id: 7, location: span{from: 51, to: 75}}.
----
text/emission-log
from null to ast.FuncCall: ast.FuncCall{argID: 9, funcID: 8, id: 7, location: span{from: 51, to: 75}}; {}.  []
  ast.FuncCall{argID: 9, funcID: 8, id: 7, location: span{from: 51, to: 75}}; {}
from ast.FuncCall to 5: ast.FuncCall{argID: 9, funcID: 8, id: 7, location: span{from: 51, to: 75}}; {}. Match(ast.FuncCall{id: I, location: S}; {}) []
  ast.FuncCall{argID: 9, funcID: 8, id: 7, location: span{from: 51, to: 75}}; {I: 7, S: span{from: 51, to: 75}}
from ast.FuncCall to 16: ast.FuncCall{argID: 9, funcID: 8, id: 7, location: span{from: 51, to: 75}}; {}. Match(ast.FuncCall{funcID: I, id: P}; {}) [I]
  ast.FuncCall{argID: 9, funcID: 8, id: 7, location: span{from: 51, to: 75}}; {I: 8, P: 7}
from ast.FuncCall to 19: ast.FuncCall{argID: 9, funcID: 8, id: 7, location: span{from: 51, to: 75}}; {}. Match(ast.FuncCall{argID: I, id: P}; {}) [I]
  ast.FuncCall{argID: 9, funcID: 8, id: 7, location: span{from: 51, to: 75}}; {I: 9, P: 7}
from ast.FuncCall to 34: ast.FuncCall{argID: 9, funcID: 8, id: 7, location: span{from: 51, to: 75}}; {}. Match(ast.FuncCall{argID: AID, funcID: FID, id: I}; {}) [FID]
  ast.FuncCall{argID: 9, funcID: 8, id: 7, location: span{from: 51, to: 75}}; {AID: 9, FID: 8, I: 7}
from ast.FuncCall to 70: ast.FuncCall{argID: 9, funcID: 8, id: 7, location: span{from: 51, to: 75}}; {}. Match(ast.FuncCall{argID: I, id: P}; {}) []
  ast.FuncCall{argID: 9, funcID: 8, id: 7, location: span{from: 51, to: 75}}; {I: 9, P: 7}
from ast.FuncCall to 71: ast.FuncCall{argID: 9, funcID: 8, id: 7, location: span{from: 51, to: 75}}; {}. Match(ast.FuncCall{funcID: I, id: P}; {}) []
  ast.FuncCall{argID: 9, funcID: 8, id: 7, location: span{from: 51, to: 75}}; {I: 8, P: 7}
from ast.FuncCall to 95: ast.FuncCall{argID: 9, funcID: 8, id: 7, location: span{from: 51, to: 75}}; {}. Match(ast.FuncCall{argID: I, funcID: F}; {}) [F]
  ast.FuncCall{argID: 9, funcID: 8, id: 7, location: span{from: 51, to: 75}}; {F: 8, I: 9}
from 5 to 0: ast.FuncCall{argID: 9, funcID: 8, id: 7, location: span{from: 51, to: 75}}; {I: 7, S: span{from: 51, to: 75}}. Union []
  ast.FuncCall{argID: 9, funcID: 8, id: 7, location: span{from: 51, to: 75}}; {I: 7, S: span{from: 51, to: 75}}
from 16 to 17: ast.FuncCall{argID: 9, funcID: 8, id: 7, location: span{from: 51, to: 75}}; {I: 8, P: 7}. Join(ast.ParentExpr, I: 16.funcID = 15.id) []
from 19 to 20: ast.FuncCall{argID: 9, funcID: 8, id: 7, location: span{from: 51, to: 75}}; {I: 9, P: 7}. Join(ast.ParentExpr, I: 19.argID = 18.id) []
from 34 to 36: ast.FuncCall{argID: 9, funcID: 8, id: 7, location: span{from: 51, to: 75}}; {AID: 9, FID: 8, I: 7}. Join(tc.typeFC, FID: 35.id = 34.funcID) [F]
from 70 to 67: ast.FuncCall{argID: 9, funcID: 8, id: 7, location: span{from: 51, to: 75}}; {I: 9, P: 7}. Union []
  ast.FuncCall{argID: 9, funcID: 8, id: 7, location: span{from: 51, to: 75}}; {I: 9, P: 7}
from 71 to 67: ast.FuncCall{argID: 9, funcID: 8, id: 7, location: span{from: 51, to: 75}}; {I: 8, P: 7}. Union []
  ast.FuncCall{argID: 9, funcID: 8, id: 7, location: span{from: 51, to: 75}}; {I: 8, P: 7}
from 95 to 97: ast.FuncCall{argID: 9, funcID: 8, id: 7, location: span{from: 51, to: 75}}; {F: 8, I: 9}. Join(ide.expectedType, F: 96.id = 95.funcID) []
from 0 to ast.Expr: ast.FuncCall{argID: 9, funcID: 8, id: 7, location: span{from: 51, to: 75}}; {I: 7, S: span{from: 51, to: 75}}. Subst({id: I, location: S}) []
  ast.Expr{id: 7, location: span{from: 51, to: 75}}; {I: 7, S: span{from: 51, to: 75}}
from 67 to tc.parentScope: ast.FuncCall{argID: 9, funcID: 8, id: 7, location: span{from: 51, to: 75}}; {I: 9, P: 7}. Subst({id: I, parentID: P}) []
  tc.parentScope{id: 9, parentID: 7}; {I: 9, P: 7}
from 67 to tc.parentScope: ast.FuncCall{argID: 9, funcID: 8, id: 7, location: span{from: 51, to: 75}}; {I: 8, P: 7}. Subst({id: I, parentID: P}) []
  tc.parentScope{id: 8, parentID: 7}; {I: 8, P: 7}
from ast.Expr to 9: ast.Expr{id: 7, location: span{from: 51, to: 75}}; {I: 7, S: span{from: 51, to: 75}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 7, location: span{from: 51, to: 75}}; {I: 7, S: span{from: 51, to: 75}}
from ast.Expr to 12: ast.Expr{id: 7, location: span{from: 51, to: 75}}; {I: 7, S: span{from: 51, to: 75}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 7, location: span{from: 51, to: 75}}; {I: 7, S: span{from: 51, to: 75}}
from ast.Expr to 15: ast.Expr{id: 7, location: span{from: 51, to: 75}}; {I: 7, S: span{from: 51, to: 75}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 7, location: span{from: 51, to: 75}}; {I: 7, S: span{from: 51, to: 75}}
from ast.Expr to 18: ast.Expr{id: 7, location: span{from: 51, to: 75}}; {I: 7, S: span{from: 51, to: 75}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 7, location: span{from: 51, to: 75}}; {I: 7, S: span{from: 51, to: 75}}
from ast.Expr to 21: ast.Expr{id: 7, location: span{from: 51, to: 75}}; {I: 7, S: span{from: 51, to: 75}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 7, location: span{from: 51, to: 75}}; {I: 7, S: span{from: 51, to: 75}}
from ast.Expr to 102: ast.Expr{id: 7, location: span{from: 51, to: 75}}; {I: 7, S: span{from: 51, to: 75}}. Match(ast.Expr{id: UI, location: UL}; {I: UI, S: UL}) [UL]
  ast.Expr{id: 7, location: span{from: 51, to: 75}}; {UI: 7, UL: span{from: 51, to: 75}}
from ast.Expr to 118: ast.Expr{id: 7, location: span{from: 51, to: 75}}; {I: 7, S: span{from: 51, to: 75}}. Match(ast.Expr{id: I, location: span{from: Idx}}; {I: I}) [Idx]
  ast.Expr{id: 7, location: span{from: 51, to: 75}}; {I: 7, Idx: 51}
from ast.Expr to 123: ast.Expr{id: 7, location: span{from: 51, to: 75}}; {I: 7, S: span{from: 51, to: 75}}. Match(ast.Expr{id: I, location: span{from: FIdx, to: TIdx}}; {I: I}) []
  ast.Expr{id: 7, location: span{from: 51, to: 75}}; {FIdx: 51, I: 7, TIdx: 75}
from tc.parentScope to 55: tc.parentScope{id: 9, parentID: 7}; {I: 9, P: 7}. Match(tc.parentScope{id: I, parentID: P}; {I: I, P: P}) [P]
  tc.parentScope{id: 9, parentID: 7}; {I: 9, P: 7}
from tc.parentScope to 55: tc.parentScope{id: 8, parentID: 7}; {I: 8, P: 7}. Match(tc.parentScope{id: I, parentID: P}; {I: I, P: P}) [P]
  tc.parentScope{id: 8, parentID: 7}; {I: 8, P: 7}
from 9 to 11: ast.Expr{id: 7, location: span{from: 51, to: 75}}; {I: 7, S: span{from: 51, to: 75}}. Join(ast.ParentExpr, I: 10.bodyID = 9.id) []
from 12 to 14: ast.Expr{id: 7, location: span{from: 51, to: 75}}; {I: 7, S: span{from: 51, to: 75}}. Join(ast.ParentExpr, I: 13.bindingID = 12.id) []
  ast.ParentExpr{id: 7, location: span{from: 51, to: 75}}; {I: 7, P: 6, S: span{from: 51, to: 75}}
from 15 to 17: ast.Expr{id: 7, location: span{from: 51, to: 75}}; {I: 7, S: span{from: 51, to: 75}}. Join(ast.ParentExpr, I: 16.funcID = 15.id) []
from 18 to 20: ast.Expr{id: 7, location: span{from: 51, to: 75}}; {I: 7, S: span{from: 51, to: 75}}. Join(ast.ParentExpr, I: 19.argID = 18.id) []
from 21 to 23: ast.Expr{id: 7, location: span{from: 51, to: 75}}; {I: 7, S: span{from: 51, to: 75}}. Join(ast.ParentExpr, I: 22.body = 21.id) []
from 102 to 103: ast.Expr{id: 7, location: span{from: 51, to: 75}}; {UI: 7, UL: span{from: 51, to: 75}}. Join(ide.expectedTypeBinding, UL: 102.location = 101.usageLoc) [UI]
from 118 to 119: ast.Expr{id: 7, location: span{from: 51, to: 75}}; {I: 7, Idx: 51}. Join(ide.CurrentScope, Idx: 118.location.from = 117.idx) [I]
from 123 to 124: ast.Expr{id: 7, location: span{from: 51, to: 75}}; {FIdx: 51, I: 7, TIdx: 75}. Join(ide.CurrentType, ) [I]
from 55 to 57: tc.parentScope{id: 9, parentID: 7}; {I: 9, P: 7}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
  tc.ScopeItem{id: 9, parentID: 7}; {I: 9, L: "builtin", N: "intToString", P: 7, T: tapp{from: "int", to: "string"}}
  tc.ScopeItem{id: 9, parentID: 7}; {I: 9, L: "builtin", N: "plus", P: 7, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
  tc.ScopeItem{id: 9, parentID: 7}; {I: 9, L: "builtin", N: "concat", P: 7, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
  tc.ScopeItem{id: 9, parentID: 7}; {I: 9, L: span{from: 4, to: 5}, N: "x", P: 7, T: "int"}
  tc.ScopeItem{id: 9, parentID: 7}; {I: 9, L: span{from: 17, to: 18}, N: "y", P: 7, T: "int"}
  tc.ScopeItem{id: 9, parentID: 7}; {I: 9, L: span{from: 30, to: 31}, N: "z", P: 7, T: "string"}
from 55 to 57: tc.parentScope{id: 8, parentID: 7}; {I: 8, P: 7}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
  tc.ScopeItem{id: 8, parentID: 7}; {I: 8, L: "builtin", N: "intToString", P: 7, T: tapp{from: "int", to: "string"}}
  tc.ScopeItem{id: 8, parentID: 7}; {I: 8, L: "builtin", N: "plus", P: 7, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
  tc.ScopeItem{id: 8, parentID: 7}; {I: 8, L: "builtin", N: "concat", P: 7, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
  tc.ScopeItem{id: 8, parentID: 7}; {I: 8, L: span{from: 4, to: 5}, N: "x", P: 7, T: "int"}
  tc.ScopeItem{id: 8, parentID: 7}; {I: 8, L: span{from: 17, to: 18}, N: "y", P: 7, T: "int"}
  tc.ScopeItem{id: 8, parentID: 7}; {I: 8, L: span{from: 30, to: 31}, N: "z", P: 7, T: "string"}
from 14 to 8: ast.ParentExpr{id: 7, location: span{from: 51, to: 75}}; {I: 7, P: 6, S: span{from: 51, to: 75}}. Union []
  ast.ParentExpr{id: 7, location: span{from: 51, to: 75}}; {I: 7, P: 6, S: span{from: 51, to: 75}}
from 57 to 51: tc.ScopeItem{id: 9, parentID: 7}; {I: 9, L: "builtin", N: "intToString", P: 7, T: tapp{from: "int", to: "string"}}. Union []
  tc.ScopeItem{id: 9, parentID: 7}; {I: 9, L: "builtin", N: "intToString", P: 7, T: tapp{from: "int", to: "string"}}
from 57 to 51: tc.ScopeItem{id: 9, parentID: 7}; {I: 9, L: "builtin", N: "plus", P: 7, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Union []
  tc.ScopeItem{id: 9, parentID: 7}; {I: 9, L: "builtin", N: "plus", P: 7, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 57 to 51: tc.ScopeItem{id: 9, parentID: 7}; {I: 9, L: "builtin", N: "concat", P: 7, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Union []
  tc.ScopeItem{id: 9, parentID: 7}; {I: 9, L: "builtin", N: "concat", P: 7, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 57 to 51: tc.ScopeItem{id: 9, parentID: 7}; {I: 9, L: span{from: 4, to: 5}, N: "x", P: 7, T: "int"}. Union []
  tc.ScopeItem{id: 9, parentID: 7}; {I: 9, L: span{from: 4, to: 5}, N: "x", P: 7, T: "int"}
from 57 to 51: tc.ScopeItem{id: 9, parentID: 7}; {I: 9, L: span{from: 17, to: 18}, N: "y", P: 7, T: "int"}. Union []
  tc.ScopeItem{id: 9, parentID: 7}; {I: 9, L: span{from: 17, to: 18}, N: "y", P: 7, T: "int"}
from 57 to 51: tc.ScopeItem{id: 9, parentID: 7}; {I: 9, L: span{from: 30, to: 31}, N: "z", P: 7, T: "string"}. Union []
  tc.ScopeItem{id: 9, parentID: 7}; {I: 9, L: span{from: 30, to: 31}, N: "z", P: 7, T: "string"}
from 57 to 51: tc.ScopeItem{id: 8, parentID: 7}; {I: 8, L: "builtin", N: "intToString", P: 7, T: tapp{from: "int", to: "string"}}. Union []
  tc.ScopeItem{id: 8, parentID: 7}; {I: 8, L: "builtin", N: "intToString", P: 7, T: tapp{from: "int", to: "string"}}
from 57 to 51: tc.ScopeItem{id: 8, parentID: 7}; {I: 8, L: "builtin", N: "plus", P: 7, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Union []
  tc.ScopeItem{id: 8, parentID: 7}; {I: 8, L: "builtin", N: "plus", P: 7, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 57 to 51: tc.ScopeItem{id: 8, parentID: 7}; {I: 8, L: "builtin", N: "concat", P: 7, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Union []
  tc.ScopeItem{id: 8, parentID: 7}; {I: 8, L: "builtin", N: "concat", P: 7, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 57 to 51: tc.ScopeItem{id: 8, parentID: 7}; {I: 8, L: span{from: 4, to: 5}, N: "x", P: 7, T: "int"}. Union []
  tc.ScopeItem{id: 8, parentID: 7}; {I: 8, L: span{from: 4, to: 5}, N: "x", P: 7, T: "int"}
from 57 to 51: tc.ScopeItem{id: 8, parentID: 7}; {I: 8, L: span{from: 17, to: 18}, N: "y", P: 7, T: "int"}. Union []
  tc.ScopeItem{id: 8, parentID: 7}; {I: 8, L: span{from: 17, to: 18}, N: "y", P: 7, T: "int"}
from 57 to 51: tc.ScopeItem{id: 8, parentID: 7}; {I: 8, L: span{from: 30, to: 31}, N: "z", P: 7, T: "string"}. Union []
  tc.ScopeItem{id: 8, parentID: 7}; {I: 8, L: span{from: 30, to: 31}, N: "z", P: 7, T: "string"}
from 8 to ast.ParentExpr: ast.ParentExpr{id: 7, location: span{from: 51, to: 75}}; {I: 7, P: 6, S: span{from: 51, to: 75}}. Subst({id: I, parent: P, span: S}) []
  ast.ParentExpr{id: 7, parent: 6, span: span{from: 51, to: 75}}; {I: 7, P: 6, S: span{from: 51, to: 75}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 9, parentID: 7}; {I: 9, L: "builtin", N: "intToString", P: 7, T: tapp{from: "int", to: "string"}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 9, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 9, L: "builtin", N: "intToString", P: 7, T: tapp{from: "int", to: "string"}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 9, parentID: 7}; {I: 9, L: "builtin", N: "plus", P: 7, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 9, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 9, L: "builtin", N: "plus", P: 7, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 9, parentID: 7}; {I: 9, L: "builtin", N: "concat", P: 7, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 9, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 9, L: "builtin", N: "concat", P: 7, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 9, parentID: 7}; {I: 9, L: span{from: 4, to: 5}, N: "x", P: 7, T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 9, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 9, L: span{from: 4, to: 5}, N: "x", P: 7, T: "int"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 9, parentID: 7}; {I: 9, L: span{from: 17, to: 18}, N: "y", P: 7, T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 9, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 9, L: span{from: 17, to: 18}, N: "y", P: 7, T: "int"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 9, parentID: 7}; {I: 9, L: span{from: 30, to: 31}, N: "z", P: 7, T: "string"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 9, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 9, L: span{from: 30, to: 31}, N: "z", P: 7, T: "string"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 8, parentID: 7}; {I: 8, L: "builtin", N: "intToString", P: 7, T: tapp{from: "int", to: "string"}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 8, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 8, L: "builtin", N: "intToString", P: 7, T: tapp{from: "int", to: "string"}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 8, parentID: 7}; {I: 8, L: "builtin", N: "plus", P: 7, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 8, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 8, L: "builtin", N: "plus", P: 7, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 8, parentID: 7}; {I: 8, L: "builtin", N: "concat", P: 7, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 8, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 8, L: "builtin", N: "concat", P: 7, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 8, parentID: 7}; {I: 8, L: span{from: 4, to: 5}, N: "x", P: 7, T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 8, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 8, L: span{from: 4, to: 5}, N: "x", P: 7, T: "int"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 8, parentID: 7}; {I: 8, L: span{from: 17, to: 18}, N: "y", P: 7, T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 8, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 8, L: span{from: 17, to: 18}, N: "y", P: 7, T: "int"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 8, parentID: 7}; {I: 8, L: span{from: 30, to: 31}, N: "z", P: 7, T: "string"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 8, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 8, L: span{from: 30, to: 31}, N: "z", P: 7, T: "string"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 9, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 9, L: "builtin", N: "intToString", P: 7, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 9, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 9, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 9, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 9, L: "builtin", N: "intToString", P: 7, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 9, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 9, T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 9, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 9, L: "builtin", N: "intToString", P: 7, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 9, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 9, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 9, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 9, L: "builtin", N: "intToString", P: 7, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 9, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 9, N: "intToString", TF: "int", TT: "string"}
from tc.ScopeItem to 88: tc.ScopeItem{id: 9, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 9, L: "builtin", N: "intToString", P: 7, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 9, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 9, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 9, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 9, L: "builtin", N: "intToString", P: 7, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 9, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 9, N: "intToString"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 9, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 9, L: "builtin", N: "intToString", P: 7, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 9, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 9, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 9, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 9, L: "builtin", N: "plus", P: 7, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 9, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 9, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 9, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 9, L: "builtin", N: "plus", P: 7, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 9, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 9, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 9, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 9, L: "builtin", N: "plus", P: 7, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 9, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 9, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 9, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 9, L: "builtin", N: "plus", P: 7, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 9, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 9, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 9, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 9, L: "builtin", N: "plus", P: 7, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 9, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 9, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 9, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 9, L: "builtin", N: "plus", P: 7, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 9, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 9, N: "plus"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 9, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 9, L: "builtin", N: "plus", P: 7, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 9, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 9, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 9, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 9, L: "builtin", N: "concat", P: 7, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 9, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 9, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 9, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 9, L: "builtin", N: "concat", P: 7, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 9, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 9, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 9, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 9, L: "builtin", N: "concat", P: 7, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 9, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 9, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 9, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 9, L: "builtin", N: "concat", P: 7, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 9, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 9, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 9, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 9, L: "builtin", N: "concat", P: 7, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 9, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 9, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 9, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 9, L: "builtin", N: "concat", P: 7, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 9, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 9, N: "concat"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 9, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 9, L: "builtin", N: "concat", P: 7, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 9, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 9, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 9, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 9, L: span{from: 4, to: 5}, N: "x", P: 7, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 9, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 9, N: "x", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 9, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 9, L: span{from: 4, to: 5}, N: "x", P: 7, T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 9, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 9, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 9, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 9, L: span{from: 4, to: 5}, N: "x", P: 7, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 9, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 9, N: "x", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 9, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 9, L: span{from: 4, to: 5}, N: "x", P: 7, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 9, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 9, L: span{from: 4, to: 5}, N: "x", P: 7, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 9, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 9, N: "x", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 9, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 9, L: span{from: 4, to: 5}, N: "x", P: 7, T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 9, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 9, N: "x"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 9, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 9, L: span{from: 4, to: 5}, N: "x", P: 7, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 9, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 9, N: "x", T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 9, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 9, L: span{from: 17, to: 18}, N: "y", P: 7, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 9, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 9, N: "y", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 9, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 9, L: span{from: 17, to: 18}, N: "y", P: 7, T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 9, location: span{from: 17, to: 18}, name: "y", type: "int"}; {L: span{from: 17, to: 18}, N: "y", P: 9, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 9, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 9, L: span{from: 17, to: 18}, N: "y", P: 7, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 9, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 9, N: "y", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 9, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 9, L: span{from: 17, to: 18}, N: "y", P: 7, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 9, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 9, L: span{from: 17, to: 18}, N: "y", P: 7, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 9, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 9, N: "y", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 9, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 9, L: span{from: 17, to: 18}, N: "y", P: 7, T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 9, location: span{from: 17, to: 18}, name: "y", type: "int"}; {DL: span{from: 17, to: 18}, I: 9, N: "y"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 9, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 9, L: span{from: 17, to: 18}, N: "y", P: 7, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 9, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 9, N: "y", T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 9, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 9, L: span{from: 30, to: 31}, N: "z", P: 7, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 9, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 9, N: "z", T: "string"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 9, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 9, L: span{from: 30, to: 31}, N: "z", P: 7, T: "string"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 9, location: span{from: 30, to: 31}, name: "z", type: "string"}; {L: span{from: 30, to: 31}, N: "z", P: 9, T: "string"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 9, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 9, L: span{from: 30, to: 31}, N: "z", P: 7, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 9, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 9, N: "z", T: "string"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 9, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 9, L: span{from: 30, to: 31}, N: "z", P: 7, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 9, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 9, L: span{from: 30, to: 31}, N: "z", P: 7, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 9, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 9, N: "z", T: "string"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 9, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 9, L: span{from: 30, to: 31}, N: "z", P: 7, T: "string"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 9, location: span{from: 30, to: 31}, name: "z", type: "string"}; {DL: span{from: 30, to: 31}, I: 9, N: "z"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 9, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 9, L: span{from: 30, to: 31}, N: "z", P: 7, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 9, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 9, N: "z", T: "string"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 8, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 8, L: "builtin", N: "intToString", P: 7, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 8, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 8, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 8, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 8, L: "builtin", N: "intToString", P: 7, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 8, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 8, T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 8, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 8, L: "builtin", N: "intToString", P: 7, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 8, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 8, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 8, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 8, L: "builtin", N: "intToString", P: 7, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 8, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 8, N: "intToString", TF: "int", TT: "string"}
from tc.ScopeItem to 88: tc.ScopeItem{id: 8, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 8, L: "builtin", N: "intToString", P: 7, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 8, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 8, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 8, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 8, L: "builtin", N: "intToString", P: 7, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 8, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 8, N: "intToString"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 8, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 8, L: "builtin", N: "intToString", P: 7, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 8, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 8, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 8, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 8, L: "builtin", N: "plus", P: 7, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 8, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 8, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 8, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 8, L: "builtin", N: "plus", P: 7, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 8, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 8, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 8, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 8, L: "builtin", N: "plus", P: 7, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 8, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 8, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 8, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 8, L: "builtin", N: "plus", P: 7, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 8, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 8, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 8, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 8, L: "builtin", N: "plus", P: 7, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 8, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 8, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 8, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 8, L: "builtin", N: "plus", P: 7, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 8, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 8, N: "plus"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 8, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 8, L: "builtin", N: "plus", P: 7, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 8, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 8, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 8, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 8, L: "builtin", N: "concat", P: 7, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 8, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 8, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 8, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 8, L: "builtin", N: "concat", P: 7, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 8, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 8, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 8, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 8, L: "builtin", N: "concat", P: 7, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 8, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 8, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 8, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 8, L: "builtin", N: "concat", P: 7, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 8, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 8, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 8, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 8, L: "builtin", N: "concat", P: 7, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 8, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 8, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 8, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 8, L: "builtin", N: "concat", P: 7, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 8, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 8, N: "concat"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 8, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 8, L: "builtin", N: "concat", P: 7, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 8, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 8, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 8, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 8, L: span{from: 4, to: 5}, N: "x", P: 7, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 8, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 8, N: "x", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 8, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 8, L: span{from: 4, to: 5}, N: "x", P: 7, T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 8, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 8, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 8, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 8, L: span{from: 4, to: 5}, N: "x", P: 7, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 8, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 8, N: "x", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 8, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 8, L: span{from: 4, to: 5}, N: "x", P: 7, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 8, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 8, L: span{from: 4, to: 5}, N: "x", P: 7, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 8, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 8, N: "x", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 8, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 8, L: span{from: 4, to: 5}, N: "x", P: 7, T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 8, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 8, N: "x"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 8, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 8, L: span{from: 4, to: 5}, N: "x", P: 7, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 8, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 8, N: "x", T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 8, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 8, L: span{from: 17, to: 18}, N: "y", P: 7, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 8, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 8, N: "y", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 8, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 8, L: span{from: 17, to: 18}, N: "y", P: 7, T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 8, location: span{from: 17, to: 18}, name: "y", type: "int"}; {L: span{from: 17, to: 18}, N: "y", P: 8, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 8, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 8, L: span{from: 17, to: 18}, N: "y", P: 7, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 8, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 8, N: "y", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 8, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 8, L: span{from: 17, to: 18}, N: "y", P: 7, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 8, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 8, L: span{from: 17, to: 18}, N: "y", P: 7, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 8, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 8, N: "y", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 8, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 8, L: span{from: 17, to: 18}, N: "y", P: 7, T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 8, location: span{from: 17, to: 18}, name: "y", type: "int"}; {DL: span{from: 17, to: 18}, I: 8, N: "y"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 8, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 8, L: span{from: 17, to: 18}, N: "y", P: 7, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 8, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 8, N: "y", T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 8, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 8, L: span{from: 30, to: 31}, N: "z", P: 7, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 8, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 8, N: "z", T: "string"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 8, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 8, L: span{from: 30, to: 31}, N: "z", P: 7, T: "string"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 8, location: span{from: 30, to: 31}, name: "z", type: "string"}; {L: span{from: 30, to: 31}, N: "z", P: 8, T: "string"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 8, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 8, L: span{from: 30, to: 31}, N: "z", P: 7, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 8, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 8, N: "z", T: "string"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 8, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 8, L: span{from: 30, to: 31}, N: "z", P: 7, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 8, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 8, L: span{from: 30, to: 31}, N: "z", P: 7, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 8, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 8, N: "z", T: "string"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 8, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 8, L: span{from: 30, to: 31}, N: "z", P: 7, T: "string"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 8, location: span{from: 30, to: 31}, name: "z", type: "string"}; {DL: span{from: 30, to: 31}, I: 8, N: "z"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 8, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 8, L: span{from: 30, to: 31}, N: "z", P: 7, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 8, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 8, N: "z", T: "string"}
from 43 to 44: tc.ScopeItem{id: 9, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 9, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 9, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 9, T: tapp{from: "int", to: "string"}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 9, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 9, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 9, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 9, N: "intToString", TF: "int", TT: "string"}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 9, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 9, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 9, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 9, N: "intToString"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 9, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 9, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 9, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 9, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 9, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 9, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 9, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 9, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 9, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 9, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 9, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 9, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 9, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 9, N: "plus"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 9, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 9, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 9, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 9, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 9, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 9, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 9, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 9, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 9, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 9, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 9, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 9, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 9, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 9, N: "concat"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 9, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 9, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 9, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 9, N: "x", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 9, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 9, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 9, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 9, N: "x", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 9, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 9, N: "x", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 9, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 9, N: "x"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 9, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 9, N: "x", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 9, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 9, N: "y", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 9, location: span{from: 17, to: 18}, name: "y", type: "int"}; {L: span{from: 17, to: 18}, N: "y", P: 9, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 9, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 9, N: "y", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 9, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 9, N: "y", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 9, location: span{from: 17, to: 18}, name: "y", type: "int"}; {DL: span{from: 17, to: 18}, I: 9, N: "y"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 9, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 9, N: "y", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 9, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 9, N: "z", T: "string"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 9, location: span{from: 30, to: 31}, name: "z", type: "string"}; {L: span{from: 30, to: 31}, N: "z", P: 9, T: "string"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 9, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 9, N: "z", T: "string"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 9, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 9, N: "z", T: "string"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 9, location: span{from: 30, to: 31}, name: "z", type: "string"}; {DL: span{from: 30, to: 31}, I: 9, N: "z"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 9, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 9, N: "z", T: "string"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 8, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 8, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 8, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 8, T: tapp{from: "int", to: "string"}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 8, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 8, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 8, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 8, N: "intToString", TF: "int", TT: "string"}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 8, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 8, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 8, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 8, N: "intToString"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 8, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 8, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 8, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 8, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 8, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 8, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 8, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 8, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 8, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 8, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 8, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 8, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 8, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 8, N: "plus"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 8, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 8, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 8, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 8, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 8, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 8, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 8, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 8, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 8, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 8, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 8, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 8, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 8, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 8, N: "concat"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 8, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 8, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 8, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 8, N: "x", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 8, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 8, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 8, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 8, N: "x", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 8, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 8, N: "x", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 8, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 8, N: "x"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 8, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 8, N: "x", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 8, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 8, N: "y", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 8, location: span{from: 17, to: 18}, name: "y", type: "int"}; {L: span{from: 17, to: 18}, N: "y", P: 8, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 8, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 8, N: "y", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 8, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 8, N: "y", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 8, location: span{from: 17, to: 18}, name: "y", type: "int"}; {DL: span{from: 17, to: 18}, I: 8, N: "y"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 8, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 8, N: "y", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 8, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 8, N: "z", T: "string"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 8, location: span{from: 30, to: 31}, name: "z", type: "string"}; {L: span{from: 30, to: 31}, N: "z", P: 8, T: "string"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 8, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 8, N: "z", T: "string"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 8, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 8, N: "z", T: "string"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 8, location: span{from: 30, to: 31}, name: "z", type: "string"}; {DL: span{from: 30, to: 31}, I: 8, N: "z"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 8, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 8, N: "z", T: "string"}. Join(ide.CurrentScope, I: 120.id = 119.id) []

ast.Var{id: 8, location: span{from: 51, to: 62}, name: "intToString"}.
----
text/emission-log
from null to ast.Var: ast.Var{id: 8, location: span{from: 51, to: 62}, name: "intToString"}; {}.  []
  ast.Var{id: 8, location: span{from: 51, to: 62}, name: "intToString"}; {}
from ast.Var to 3: ast.Var{id: 8, location: span{from: 51, to: 62}, name: "intToString"}; {}. Match(ast.Var{id: I, location: S}; {}) []
  ast.Var{id: 8, location: span{from: 51, to: 62}, name: "intToString"}; {I: 8, S: span{from: 51, to: 62}}
from ast.Var to 42: ast.Var{id: 8, location: span{from: 51, to: 62}, name: "intToString"}; {}. Match(ast.Var{id: I, name: N}; {}) [I-N]
  ast.Var{id: 8, location: span{from: 51, to: 62}, name: "intToString"}; {I: 8, N: "intToString"}
from ast.Var to 106: ast.Var{id: 8, location: span{from: 51, to: 62}, name: "intToString"}; {}. Match(ast.Var{id: I, location: UL, name: N}; {}) [I-N]
  ast.Var{id: 8, location: span{from: 51, to: 62}, name: "intToString"}; {I: 8, N: "intToString", UL: span{from: 51, to: 62}}
from ast.Var to 179: ast.Var{id: 8, location: span{from: 51, to: 62}, name: "intToString"}; {}. Match(ast.Var{location: S}; {}) [S]
  ast.Var{id: 8, location: span{from: 51, to: 62}, name: "intToString"}; {S: span{from: 51, to: 62}}
from ast.Var to 182: ast.Var{id: 8, location: span{from: 51, to: 62}, name: "intToString"}; {}. Match(ast.Var{location: S}; {}) []
  ast.Var{id: 8, location: span{from: 51, to: 62}, name: "intToString"}; {S: span{from: 51, to: 62}}
from ast.Var to 184: ast.Var{id: 8, location: span{from: 51, to: 62}, name: "intToString"}; {}. Match(ast.Var{location: S}; {}) [S]
  ast.Var{id: 8, location: span{from: 51, to: 62}, name: "intToString"}; {S: span{from: 51, to: 62}}
from 3 to 0: ast.Var{id: 8, location: span{from: 51, to: 62}, name: "intToString"}; {I: 8, S: span{from: 51, to: 62}}. Union []
  ast.Var{id: 8, location: span{from: 51, to: 62}, name: "intToString"}; {I: 8, S: span{from: 51, to: 62}}
from 42 to 44: ast.Var{id: 8, location: span{from: 51, to: 62}, name: "intToString"}; {I: 8, N: "intToString"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
  tc.typeVar{id: 8, location: span{from: 51, to: 62}, name: "intToString"}; {I: 8, N: "intToString", T: tapp{from: "int", to: "string"}}
from 106 to 108: ast.Var{id: 8, location: span{from: 51, to: 62}, name: "intToString"}; {I: 8, N: "intToString", UL: span{from: 51, to: 62}}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
  ide.Usage{id: 8, location: span{from: 51, to: 62}, name: "intToString"}; {DL: "builtin", I: 8, N: "intToString", UL: span{from: 51, to: 62}}
from 179 to 181: ast.Var{id: 8, location: span{from: 51, to: 62}, name: "intToString"}; {S: span{from: 51, to: 62}}. Join(hl.segmentUsage, S: 180.usageLoc = 179.location) []
from 182 to hl.segmentUndefinedVar: ast.Var{id: 8, location: span{from: 51, to: 62}, name: "intToString"}; {S: span{from: 51, to: 62}}. Subst({highlight: false, span: S, type: "undefined-var"}) []
  hl.segmentUndefinedVar{highlight: false, span: span{from: 51, to: 62}, type: "undefined-var"}; {S: span{from: 51, to: 62}}
from 184 to 185: ast.Var{id: 8, location: span{from: 51, to: 62}, name: "intToString"}; {S: span{from: 51, to: 62}}. Join(hl.segmentUsageHL, S: 184.location = 183.usageLoc) []
from 0 to ast.Expr: ast.Var{id: 8, location: span{from: 51, to: 62}, name: "intToString"}; {I: 8, S: span{from: 51, to: 62}}. Subst({id: I, location: S}) []
  ast.Expr{id: 8, location: span{from: 51, to: 62}}; {I: 8, S: span{from: 51, to: 62}}
from 44 to tc.typeVar: tc.typeVar{id: 8, location: span{from: 51, to: 62}, name: "intToString"}; {I: 8, N: "intToString", T: tapp{from: "int", to: "string"}}. Subst({id: I, type: T}) []
  tc.typeVar{id: 8, type: tapp{from: "int", to: "string"}}; {I: 8, N: "intToString", T: tapp{from: "int", to: "string"}}
from 108 to ide.Usage: ide.Usage{id: 8, location: span{from: 51, to: 62}, name: "intToString"}; {DL: "builtin", I: 8, N: "intToString", UL: span{from: 51, to: 62}}. Subst({definitionLoc: DL, name: N, usageLoc: UL}) []
  ide.Usage{definitionLoc: "builtin", name: "intToString", usageLoc: span{from: 51, to: 62}}; {DL: "builtin", I: 8, N: "intToString", UL: span{from: 51, to: 62}}
from hl.segmentUndefinedVar to 163: hl.segmentUndefinedVar{highlight: false, span: span{from: 51, to: 62}, type: "undefined-var"}; {S: span{from: 51, to: 62}}. Match(hl.segmentUndefinedVar{highlight: H, span: S, type: T}; {S: S}) []
  hl.segmentUndefinedVar{highlight: false, span: span{from: 51, to: 62}, type: "undefined-var"}; {H: false, S: span{from: 51, to: 62}, T: "undefined-var"}
from ast.Expr to 9: ast.Expr{id: 8, location: span{from: 51, to: 62}}; {I: 8, S: span{from: 51, to: 62}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 8, location: span{from: 51, to: 62}}; {I: 8, S: span{from: 51, to: 62}}
from ast.Expr to 12: ast.Expr{id: 8, location: span{from: 51, to: 62}}; {I: 8, S: span{from: 51, to: 62}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 8, location: span{from: 51, to: 62}}; {I: 8, S: span{from: 51, to: 62}}
from ast.Expr to 15: ast.Expr{id: 8, location: span{from: 51, to: 62}}; {I: 8, S: span{from: 51, to: 62}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 8, location: span{from: 51, to: 62}}; {I: 8, S: span{from: 51, to: 62}}
from ast.Expr to 18: ast.Expr{id: 8, location: span{from: 51, to: 62}}; {I: 8, S: span{from: 51, to: 62}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 8, location: span{from: 51, to: 62}}; {I: 8, S: span{from: 51, to: 62}}
from ast.Expr to 21: ast.Expr{id: 8, location: span{from: 51, to: 62}}; {I: 8, S: span{from: 51, to: 62}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 8, location: span{from: 51, to: 62}}; {I: 8, S: span{from: 51, to: 62}}
from ast.Expr to 102: ast.Expr{id: 8, location: span{from: 51, to: 62}}; {I: 8, S: span{from: 51, to: 62}}. Match(ast.Expr{id: UI, location: UL}; {I: UI, S: UL}) [UL]
  ast.Expr{id: 8, location: span{from: 51, to: 62}}; {UI: 8, UL: span{from: 51, to: 62}}
from ast.Expr to 118: ast.Expr{id: 8, location: span{from: 51, to: 62}}; {I: 8, S: span{from: 51, to: 62}}. Match(ast.Expr{id: I, location: span{from: Idx}}; {I: I}) [Idx]
  ast.Expr{id: 8, location: span{from: 51, to: 62}}; {I: 8, Idx: 51}
from ast.Expr to 123: ast.Expr{id: 8, location: span{from: 51, to: 62}}; {I: 8, S: span{from: 51, to: 62}}. Match(ast.Expr{id: I, location: span{from: FIdx, to: TIdx}}; {I: I}) []
  ast.Expr{id: 8, location: span{from: 51, to: 62}}; {FIdx: 51, I: 8, TIdx: 62}
from tc.typeVar to 30: tc.typeVar{id: 8, type: tapp{from: "int", to: "string"}}; {I: 8, N: "intToString", T: tapp{from: "int", to: "string"}}. Match(tc.typeVar{id: I, type: T}; {I: I, T: T}) []
  tc.typeVar{id: 8, type: tapp{from: "int", to: "string"}}; {I: 8, T: tapp{from: "int", to: "string"}}
from ide.Usage to 100: ide.Usage{definitionLoc: "builtin", name: "intToString", usageLoc: span{from: 51, to: 62}}; {DL: "builtin", I: 8, N: "intToString", UL: span{from: 51, to: 62}}. Match(ide.Usage{definitionLoc: VL, usageLoc: UL}; {DL: VL, UL: UL}) [VL]
  ide.Usage{definitionLoc: "builtin", name: "intToString", usageLoc: span{from: 51, to: 62}}; {UL: span{from: 51, to: 62}, VL: "builtin"}
from ide.Usage to 130: ide.Usage{definitionLoc: "builtin", name: "intToString", usageLoc: span{from: 51, to: 62}}; {DL: "builtin", I: 8, N: "intToString", UL: span{from: 51, to: 62}}. Match(ide.Usage{definitionLoc: DL, usageLoc: span{from: FIdx, to: TIdx}}; {DL: DL}) []
  ide.Usage{definitionLoc: "builtin", name: "intToString", usageLoc: span{from: 51, to: 62}}; {DL: "builtin", FIdx: 51, TIdx: 62}
from ide.Usage to 135: ide.Usage{definitionLoc: "builtin", name: "intToString", usageLoc: span{from: 51, to: 62}}; {DL: "builtin", I: 8, N: "intToString", UL: span{from: 51, to: 62}}. Match(ide.Usage{definitionLoc: span{from: FIdx, to: TIdx}, usageLoc: UL}; {UL: UL}) []
from ide.Usage to 144: ide.Usage{definitionLoc: "builtin", name: "intToString", usageLoc: span{from: 51, to: 62}}; {DL: "builtin", I: 8, N: "intToString", UL: span{from: 51, to: 62}}. Match(ide.Usage{definitionLoc: span{from: FIdx, to: TIdx}, usageLoc: UL}; {UL: UL}) []
from ide.Usage to 149: ide.Usage{definitionLoc: "builtin", name: "intToString", usageLoc: span{from: 51, to: 62}}; {DL: "builtin", I: 8, N: "intToString", UL: span{from: 51, to: 62}}. Match(ide.Usage{definitionLoc: DL, usageLoc: span{from: FIdx, to: TIdx}}; {DL: DL}) []
  ide.Usage{definitionLoc: "builtin", name: "intToString", usageLoc: span{from: 51, to: 62}}; {DL: "builtin", FIdx: 51, TIdx: 62}
from ide.Usage to 155: ide.Usage{definitionLoc: "builtin", name: "intToString", usageLoc: span{from: 51, to: 62}}; {DL: "builtin", I: 8, N: "intToString", UL: span{from: 51, to: 62}}. Match(ide.Usage{definitionLoc: DL, usageLoc: UL}; {DL: DL, UL: UL}) [DL]
  ide.Usage{definitionLoc: "builtin", name: "intToString", usageLoc: span{from: 51, to: 62}}; {DL: "builtin", UL: span{from: 51, to: 62}}
from ide.Usage to 171: ide.Usage{definitionLoc: "builtin", name: "intToString", usageLoc: span{from: 51, to: 62}}; {DL: "builtin", I: 8, N: "intToString", UL: span{from: 51, to: 62}}. Match(ide.Usage{definitionLoc: S}; {DL: S}) [S]
  ide.Usage{definitionLoc: "builtin", name: "intToString", usageLoc: span{from: 51, to: 62}}; {S: "builtin"}
from ide.Usage to 180: ide.Usage{definitionLoc: "builtin", name: "intToString", usageLoc: span{from: 51, to: 62}}; {DL: "builtin", I: 8, N: "intToString", UL: span{from: 51, to: 62}}. Match(ide.Usage{usageLoc: S}; {UL: S}) [S]
  ide.Usage{definitionLoc: "builtin", name: "intToString", usageLoc: span{from: 51, to: 62}}; {S: span{from: 51, to: 62}}
from 163 to 159: hl.segmentUndefinedVar{highlight: false, span: span{from: 51, to: 62}, type: "undefined-var"}; {H: false, S: span{from: 51, to: 62}, T: "undefined-var"}. Union []
  hl.segmentUndefinedVar{highlight: false, span: span{from: 51, to: 62}, type: "undefined-var"}; {H: false, S: span{from: 51, to: 62}, T: "undefined-var"}
from 9 to 11: ast.Expr{id: 8, location: span{from: 51, to: 62}}; {I: 8, S: span{from: 51, to: 62}}. Join(ast.ParentExpr, I: 10.bodyID = 9.id) []
from 12 to 14: ast.Expr{id: 8, location: span{from: 51, to: 62}}; {I: 8, S: span{from: 51, to: 62}}. Join(ast.ParentExpr, I: 13.bindingID = 12.id) []
from 15 to 17: ast.Expr{id: 8, location: span{from: 51, to: 62}}; {I: 8, S: span{from: 51, to: 62}}. Join(ast.ParentExpr, I: 16.funcID = 15.id) []
  ast.ParentExpr{id: 8, location: span{from: 51, to: 62}}; {I: 8, P: 7, S: span{from: 51, to: 62}}
from 18 to 20: ast.Expr{id: 8, location: span{from: 51, to: 62}}; {I: 8, S: span{from: 51, to: 62}}. Join(ast.ParentExpr, I: 19.argID = 18.id) []
from 21 to 23: ast.Expr{id: 8, location: span{from: 51, to: 62}}; {I: 8, S: span{from: 51, to: 62}}. Join(ast.ParentExpr, I: 22.body = 21.id) []
from 102 to 103: ast.Expr{id: 8, location: span{from: 51, to: 62}}; {UI: 8, UL: span{from: 51, to: 62}}. Join(ide.expectedTypeBinding, UL: 102.location = 101.usageLoc) [UI]
from 118 to 119: ast.Expr{id: 8, location: span{from: 51, to: 62}}; {I: 8, Idx: 51}. Join(ide.CurrentScope, Idx: 118.location.from = 117.idx) [I]
from 123 to 124: ast.Expr{id: 8, location: span{from: 51, to: 62}}; {FIdx: 51, I: 8, TIdx: 62}. Join(ide.CurrentType, ) [I]
from 30 to 24: tc.typeVar{id: 8, type: tapp{from: "int", to: "string"}}; {I: 8, T: tapp{from: "int", to: "string"}}. Union []
  tc.typeVar{id: 8, type: tapp{from: "int", to: "string"}}; {I: 8, T: tapp{from: "int", to: "string"}}
from 100 to 101: ide.Usage{definitionLoc: "builtin", name: "intToString", usageLoc: span{from: 51, to: 62}}; {UL: span{from: 51, to: 62}, VL: "builtin"}. Join(ide.expectedTypeBinding, VL: 100.definitionLoc = 99.varLoc) [UL]
from 130 to 131: ide.Usage{definitionLoc: "builtin", name: "intToString", usageLoc: span{from: 51, to: 62}}; {DL: "builtin", FIdx: 51, TIdx: 62}. Join(ide.DefnForCursor, ) []
from 149 to 151: ide.Usage{definitionLoc: "builtin", name: "intToString", usageLoc: span{from: 51, to: 62}}; {DL: "builtin", FIdx: 51, TIdx: 62}. Join(ide.CurrentUsageUsage, ) []
from 155 to 156: ide.Usage{definitionLoc: "builtin", name: "intToString", usageLoc: span{from: 51, to: 62}}; {DL: "builtin", UL: span{from: 51, to: 62}}. Join(ide.CurrentUsageUsageIndirect, DL: 155.definitionLoc = 154.defnLoc) []
from 171 to 172: ide.Usage{definitionLoc: "builtin", name: "intToString", usageLoc: span{from: 51, to: 62}}; {S: "builtin"}. Join(hl.segmentDefn, S: 171.definitionLoc = 170.span) []
from 180 to 181: ide.Usage{definitionLoc: "builtin", name: "intToString", usageLoc: span{from: 51, to: 62}}; {S: span{from: 51, to: 62}}. Join(hl.segmentUsage, S: 180.usageLoc = 179.location) []
  hl.segmentUsage{definitionLoc: "builtin", name: "intToString", usageLoc: span{from: 51, to: 62}}; {S: span{from: 51, to: 62}}
from 159 to hl.Segment: hl.segmentUndefinedVar{highlight: false, span: span{from: 51, to: 62}, type: "undefined-var"}; {H: false, S: span{from: 51, to: 62}, T: "undefined-var"}. Subst({highlight: H, span: S, type: T}) []
  hl.Segment{highlight: false, span: span{from: 51, to: 62}, type: "undefined-var"}; {H: false, S: span{from: 51, to: 62}, T: "undefined-var"}
from 17 to 8: ast.ParentExpr{id: 8, location: span{from: 51, to: 62}}; {I: 8, P: 7, S: span{from: 51, to: 62}}. Union []
  ast.ParentExpr{id: 8, location: span{from: 51, to: 62}}; {I: 8, P: 7, S: span{from: 51, to: 62}}
from 24 to tc.Type: tc.typeVar{id: 8, type: tapp{from: "int", to: "string"}}; {I: 8, T: tapp{from: "int", to: "string"}}. Subst({id: I, type: T}) []
  tc.Type{id: 8, type: tapp{from: "int", to: "string"}}; {I: 8, T: tapp{from: "int", to: "string"}}
from 181 to hl.segmentUsage: hl.segmentUsage{definitionLoc: "builtin", name: "intToString", usageLoc: span{from: 51, to: 62}}; {S: span{from: 51, to: 62}}. Subst({highlight: false, span: S, type: "usage"}) []
  hl.segmentUsage{highlight: false, span: span{from: 51, to: 62}, type: "usage"}; {S: span{from: 51, to: 62}}
from 8 to ast.ParentExpr: ast.ParentExpr{id: 8, location: span{from: 51, to: 62}}; {I: 8, P: 7, S: span{from: 51, to: 62}}. Subst({id: I, parent: P, span: S}) []
  ast.ParentExpr{id: 8, parent: 7, span: span{from: 51, to: 62}}; {I: 8, P: 7, S: span{from: 51, to: 62}}
from tc.Type to 35: tc.Type{id: 8, type: tapp{from: "int", to: "string"}}; {I: 8, T: tapp{from: "int", to: "string"}}. Match(tc.Type{id: FID, type: tapp{from: F, to: T}}; {I: FID}) [FID]
  tc.Type{id: 8, type: tapp{from: "int", to: "string"}}; {F: "int", FID: 8, T: "string"}
from tc.Type to 37: tc.Type{id: 8, type: tapp{from: "int", to: "string"}}; {I: 8, T: tapp{from: "int", to: "string"}}. Match(tc.Type{id: AID, type: F}; {I: AID, T: F}) [F]
  tc.Type{id: 8, type: tapp{from: "int", to: "string"}}; {AID: 8, F: tapp{from: "int", to: "string"}}
from tc.Type to 40: tc.Type{id: 8, type: tapp{from: "int", to: "string"}}; {I: 8, T: tapp{from: "int", to: "string"}}. Match(tc.Type{id: BID, type: T}; {I: BID, T: T}) [BID]
  tc.Type{id: 8, type: tapp{from: "int", to: "string"}}; {BID: 8, T: tapp{from: "int", to: "string"}}
from tc.Type to 48: tc.Type{id: 8, type: tapp{from: "int", to: "string"}}; {I: 8, T: tapp{from: "int", to: "string"}}. Match(tc.Type{id: B, type: R}; {I: B, T: R}) []
  tc.Type{id: 8, type: tapp{from: "int", to: "string"}}; {B: 8, R: tapp{from: "int", to: "string"}}
from tc.Type to 62: tc.Type{id: 8, type: tapp{from: "int", to: "string"}}; {I: 8, T: tapp{from: "int", to: "string"}}. Match(tc.Type{id: B, type: T}; {I: B, T: T}) [B]
  tc.Type{id: 8, type: tapp{from: "int", to: "string"}}; {B: 8, T: tapp{from: "int", to: "string"}}
from tc.Type to 96: tc.Type{id: 8, type: tapp{from: "int", to: "string"}}; {I: 8, T: tapp{from: "int", to: "string"}}. Match(tc.Type{id: F, type: tapp{from: T}}; {I: F}) [F]
  tc.Type{id: 8, type: tapp{from: "int", to: "string"}}; {F: 8, T: "int"}
from tc.Type to 125: tc.Type{id: 8, type: tapp{from: "int", to: "string"}}; {I: 8, T: tapp{from: "int", to: "string"}}. Match(tc.Type{id: I, type: T}; {I: I, T: T}) [I]
  tc.Type{id: 8, type: tapp{from: "int", to: "string"}}; {I: 8, T: tapp{from: "int", to: "string"}}
from hl.segmentUsage to 162: hl.segmentUsage{highlight: false, span: span{from: 51, to: 62}, type: "usage"}; {S: span{from: 51, to: 62}}. Match(hl.segmentUsage{highlight: H, span: S, type: T}; {S: S}) []
  hl.segmentUsage{highlight: false, span: span{from: 51, to: 62}, type: "usage"}; {H: false, S: span{from: 51, to: 62}, T: "usage"}
from 35 to 36: tc.Type{id: 8, type: tapp{from: "int", to: "string"}}; {F: "int", FID: 8, T: "string"}. Join(tc.typeFC, FID: 35.id = 34.funcID) [F]
  tc.typeFC{id: 8, type: tapp{from: "int", to: "string"}}; {AID: 9, F: "int", FID: 8, I: 7, T: "string"}
from 37 to 38: tc.Type{id: 8, type: tapp{from: "int", to: "string"}}; {AID: 8, F: tapp{from: "int", to: "string"}}. Join(tc.typeFC, F: 37.type = 36.type.from) []
from 40 to 41: tc.Type{id: 8, type: tapp{from: "int", to: "string"}}; {BID: 8, T: tapp{from: "int", to: "string"}}. Join(tc.typeLet, BID: 40.id = 39.bodyID) []
from 48 to 49: tc.Type{id: 8, type: tapp{from: "int", to: "string"}}; {B: 8, R: tapp{from: "int", to: "string"}}. Join(tc.typeLambda, ) []
from 62 to 63: tc.Type{id: 8, type: tapp{from: "int", to: "string"}}; {B: 8, T: tapp{from: "int", to: "string"}}. Join(tc.scopeLet, B: 62.id = 61.bindingID) []
from 96 to 97: tc.Type{id: 8, type: tapp{from: "int", to: "string"}}; {F: 8, T: "int"}. Join(ide.expectedType, F: 96.id = 95.funcID) []
  ide.expectedType{id: 8, type: tapp{from: "int", to: "string"}}; {F: 8, I: 9, T: "int"}
from 125 to 126: tc.Type{id: 8, type: tapp{from: "int", to: "string"}}; {I: 8, T: tapp{from: "int", to: "string"}}. Join(ide.CurrentType, I: 125.id = 124.id) []
from 162 to 159: hl.segmentUsage{highlight: false, span: span{from: 51, to: 62}, type: "usage"}; {H: false, S: span{from: 51, to: 62}, T: "usage"}. Union []
  hl.segmentUsage{highlight: false, span: span{from: 51, to: 62}, type: "usage"}; {H: false, S: span{from: 51, to: 62}, T: "usage"}
from 36 to 38: tc.typeFC{id: 8, type: tapp{from: "int", to: "string"}}; {AID: 9, F: "int", FID: 8, I: 7, T: "string"}. Join(tc.typeFC, F: 37.type = 36.type.from) []
from 97 to 90: ide.expectedType{id: 8, type: tapp{from: "int", to: "string"}}; {F: 8, I: 9, T: "int"}. Union []
  ide.expectedType{id: 8, type: tapp{from: "int", to: "string"}}; {F: 8, I: 9, T: "int"}
from 159 to hl.Segment: hl.segmentUsage{highlight: false, span: span{from: 51, to: 62}, type: "usage"}; {H: false, S: span{from: 51, to: 62}, T: "usage"}. Subst({highlight: H, span: S, type: T}) []
  hl.Segment{highlight: false, span: span{from: 51, to: 62}, type: "usage"}; {H: false, S: span{from: 51, to: 62}, T: "usage"}
from 90 to ide.expectedType: ide.expectedType{id: 8, type: tapp{from: "int", to: "string"}}; {F: 8, I: 9, T: "int"}. Subst({id: I, type: T}) []
  ide.expectedType{id: 9, type: "int"}; {F: 8, I: 9, T: "int"}
from ide.expectedType to 78: ide.expectedType{id: 9, type: "int"}; {F: 8, I: 9, T: "int"}. Match(ide.expectedType{id: I, type: T}; {I: I, T: T}) [I]
  ide.expectedType{id: 9, type: "int"}; {I: 9, T: "int"}
from ide.expectedType to 83: ide.expectedType{id: 9, type: "int"}; {F: 8, I: 9, T: "int"}. Match(ide.expectedType{id: I, type: TT}; {I: I, T: TT}) [I]
  ide.expectedType{id: 9, type: "int"}; {I: 9, TT: "int"}
from ide.expectedType to 93: ide.expectedType{id: 9, type: "int"}; {F: 8, I: 9, T: "int"}. Match(ide.expectedType{id: L, type: T}; {I: L, T: T}) [L]
  ide.expectedType{id: 9, type: "int"}; {L: 9, T: "int"}
from ide.expectedType to 104: ide.expectedType{id: 9, type: "int"}; {F: 8, I: 9, T: "int"}. Match(ide.expectedType{id: UI, type: T}; {I: UI, T: T}) [UI]
  ide.expectedType{id: 9, type: "int"}; {T: "int", UI: 9}
from 78 to 79: ide.expectedType{id: 9, type: "int"}; {I: 9, T: "int"}. Join(ide.suggestionVar, I: 78.id = 77.id) [I-T]
from 83 to 84: ide.expectedType{id: 9, type: "int"}; {I: 9, TT: "int"}. Join(ide.suggestionFunc, I: 83.id = 82.id) [I-TT]
from 93 to 94: ide.expectedType{id: 9, type: "int"}; {L: 9, T: "int"}. Join(ide.expectedType, L: 93.id = 92.id) []
from 104 to 105: ide.expectedType{id: 9, type: "int"}; {T: "int", UI: 9}. Join(ide.expectedTypeBinding, UI: 104.id = 103.id) []

ast.FuncCall{argID: 13, funcID: 10, id: 9, location: span{from: 63, to: 73}}.
----
text/emission-log
from null to ast.FuncCall: ast.FuncCall{argID: 13, funcID: 10, id: 9, location: span{from: 63, to: 73}}; {}.  []
  ast.FuncCall{argID: 13, funcID: 10, id: 9, location: span{from: 63, to: 73}}; {}
from ast.FuncCall to 5: ast.FuncCall{argID: 13, funcID: 10, id: 9, location: span{from: 63, to: 73}}; {}. Match(ast.FuncCall{id: I, location: S}; {}) []
  ast.FuncCall{argID: 13, funcID: 10, id: 9, location: span{from: 63, to: 73}}; {I: 9, S: span{from: 63, to: 73}}
from ast.FuncCall to 16: ast.FuncCall{argID: 13, funcID: 10, id: 9, location: span{from: 63, to: 73}}; {}. Match(ast.FuncCall{funcID: I, id: P}; {}) [I]
  ast.FuncCall{argID: 13, funcID: 10, id: 9, location: span{from: 63, to: 73}}; {I: 10, P: 9}
from ast.FuncCall to 19: ast.FuncCall{argID: 13, funcID: 10, id: 9, location: span{from: 63, to: 73}}; {}. Match(ast.FuncCall{argID: I, id: P}; {}) [I]
  ast.FuncCall{argID: 13, funcID: 10, id: 9, location: span{from: 63, to: 73}}; {I: 13, P: 9}
from ast.FuncCall to 34: ast.FuncCall{argID: 13, funcID: 10, id: 9, location: span{from: 63, to: 73}}; {}. Match(ast.FuncCall{argID: AID, funcID: FID, id: I}; {}) [FID]
  ast.FuncCall{argID: 13, funcID: 10, id: 9, location: span{from: 63, to: 73}}; {AID: 13, FID: 10, I: 9}
from ast.FuncCall to 70: ast.FuncCall{argID: 13, funcID: 10, id: 9, location: span{from: 63, to: 73}}; {}. Match(ast.FuncCall{argID: I, id: P}; {}) []
  ast.FuncCall{argID: 13, funcID: 10, id: 9, location: span{from: 63, to: 73}}; {I: 13, P: 9}
from ast.FuncCall to 71: ast.FuncCall{argID: 13, funcID: 10, id: 9, location: span{from: 63, to: 73}}; {}. Match(ast.FuncCall{funcID: I, id: P}; {}) []
  ast.FuncCall{argID: 13, funcID: 10, id: 9, location: span{from: 63, to: 73}}; {I: 10, P: 9}
from ast.FuncCall to 95: ast.FuncCall{argID: 13, funcID: 10, id: 9, location: span{from: 63, to: 73}}; {}. Match(ast.FuncCall{argID: I, funcID: F}; {}) [F]
  ast.FuncCall{argID: 13, funcID: 10, id: 9, location: span{from: 63, to: 73}}; {F: 10, I: 13}
from 5 to 0: ast.FuncCall{argID: 13, funcID: 10, id: 9, location: span{from: 63, to: 73}}; {I: 9, S: span{from: 63, to: 73}}. Union []
  ast.FuncCall{argID: 13, funcID: 10, id: 9, location: span{from: 63, to: 73}}; {I: 9, S: span{from: 63, to: 73}}
from 16 to 17: ast.FuncCall{argID: 13, funcID: 10, id: 9, location: span{from: 63, to: 73}}; {I: 10, P: 9}. Join(ast.ParentExpr, I: 16.funcID = 15.id) []
from 19 to 20: ast.FuncCall{argID: 13, funcID: 10, id: 9, location: span{from: 63, to: 73}}; {I: 13, P: 9}. Join(ast.ParentExpr, I: 19.argID = 18.id) []
from 34 to 36: ast.FuncCall{argID: 13, funcID: 10, id: 9, location: span{from: 63, to: 73}}; {AID: 13, FID: 10, I: 9}. Join(tc.typeFC, FID: 35.id = 34.funcID) [F]
from 70 to 67: ast.FuncCall{argID: 13, funcID: 10, id: 9, location: span{from: 63, to: 73}}; {I: 13, P: 9}. Union []
  ast.FuncCall{argID: 13, funcID: 10, id: 9, location: span{from: 63, to: 73}}; {I: 13, P: 9}
from 71 to 67: ast.FuncCall{argID: 13, funcID: 10, id: 9, location: span{from: 63, to: 73}}; {I: 10, P: 9}. Union []
  ast.FuncCall{argID: 13, funcID: 10, id: 9, location: span{from: 63, to: 73}}; {I: 10, P: 9}
from 95 to 97: ast.FuncCall{argID: 13, funcID: 10, id: 9, location: span{from: 63, to: 73}}; {F: 10, I: 13}. Join(ide.expectedType, F: 96.id = 95.funcID) []
from 0 to ast.Expr: ast.FuncCall{argID: 13, funcID: 10, id: 9, location: span{from: 63, to: 73}}; {I: 9, S: span{from: 63, to: 73}}. Subst({id: I, location: S}) []
  ast.Expr{id: 9, location: span{from: 63, to: 73}}; {I: 9, S: span{from: 63, to: 73}}
from 67 to tc.parentScope: ast.FuncCall{argID: 13, funcID: 10, id: 9, location: span{from: 63, to: 73}}; {I: 13, P: 9}. Subst({id: I, parentID: P}) []
  tc.parentScope{id: 13, parentID: 9}; {I: 13, P: 9}
from 67 to tc.parentScope: ast.FuncCall{argID: 13, funcID: 10, id: 9, location: span{from: 63, to: 73}}; {I: 10, P: 9}. Subst({id: I, parentID: P}) []
  tc.parentScope{id: 10, parentID: 9}; {I: 10, P: 9}
from ast.Expr to 9: ast.Expr{id: 9, location: span{from: 63, to: 73}}; {I: 9, S: span{from: 63, to: 73}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 9, location: span{from: 63, to: 73}}; {I: 9, S: span{from: 63, to: 73}}
from ast.Expr to 12: ast.Expr{id: 9, location: span{from: 63, to: 73}}; {I: 9, S: span{from: 63, to: 73}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 9, location: span{from: 63, to: 73}}; {I: 9, S: span{from: 63, to: 73}}
from ast.Expr to 15: ast.Expr{id: 9, location: span{from: 63, to: 73}}; {I: 9, S: span{from: 63, to: 73}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 9, location: span{from: 63, to: 73}}; {I: 9, S: span{from: 63, to: 73}}
from ast.Expr to 18: ast.Expr{id: 9, location: span{from: 63, to: 73}}; {I: 9, S: span{from: 63, to: 73}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 9, location: span{from: 63, to: 73}}; {I: 9, S: span{from: 63, to: 73}}
from ast.Expr to 21: ast.Expr{id: 9, location: span{from: 63, to: 73}}; {I: 9, S: span{from: 63, to: 73}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 9, location: span{from: 63, to: 73}}; {I: 9, S: span{from: 63, to: 73}}
from ast.Expr to 102: ast.Expr{id: 9, location: span{from: 63, to: 73}}; {I: 9, S: span{from: 63, to: 73}}. Match(ast.Expr{id: UI, location: UL}; {I: UI, S: UL}) [UL]
  ast.Expr{id: 9, location: span{from: 63, to: 73}}; {UI: 9, UL: span{from: 63, to: 73}}
from ast.Expr to 118: ast.Expr{id: 9, location: span{from: 63, to: 73}}; {I: 9, S: span{from: 63, to: 73}}. Match(ast.Expr{id: I, location: span{from: Idx}}; {I: I}) [Idx]
  ast.Expr{id: 9, location: span{from: 63, to: 73}}; {I: 9, Idx: 63}
from ast.Expr to 123: ast.Expr{id: 9, location: span{from: 63, to: 73}}; {I: 9, S: span{from: 63, to: 73}}. Match(ast.Expr{id: I, location: span{from: FIdx, to: TIdx}}; {I: I}) []
  ast.Expr{id: 9, location: span{from: 63, to: 73}}; {FIdx: 63, I: 9, TIdx: 73}
from tc.parentScope to 55: tc.parentScope{id: 13, parentID: 9}; {I: 13, P: 9}. Match(tc.parentScope{id: I, parentID: P}; {I: I, P: P}) [P]
  tc.parentScope{id: 13, parentID: 9}; {I: 13, P: 9}
from tc.parentScope to 55: tc.parentScope{id: 10, parentID: 9}; {I: 10, P: 9}. Match(tc.parentScope{id: I, parentID: P}; {I: I, P: P}) [P]
  tc.parentScope{id: 10, parentID: 9}; {I: 10, P: 9}
from 9 to 11: ast.Expr{id: 9, location: span{from: 63, to: 73}}; {I: 9, S: span{from: 63, to: 73}}. Join(ast.ParentExpr, I: 10.bodyID = 9.id) []
from 12 to 14: ast.Expr{id: 9, location: span{from: 63, to: 73}}; {I: 9, S: span{from: 63, to: 73}}. Join(ast.ParentExpr, I: 13.bindingID = 12.id) []
from 15 to 17: ast.Expr{id: 9, location: span{from: 63, to: 73}}; {I: 9, S: span{from: 63, to: 73}}. Join(ast.ParentExpr, I: 16.funcID = 15.id) []
from 18 to 20: ast.Expr{id: 9, location: span{from: 63, to: 73}}; {I: 9, S: span{from: 63, to: 73}}. Join(ast.ParentExpr, I: 19.argID = 18.id) []
  ast.ParentExpr{id: 9, location: span{from: 63, to: 73}}; {I: 9, P: 7, S: span{from: 63, to: 73}}
from 21 to 23: ast.Expr{id: 9, location: span{from: 63, to: 73}}; {I: 9, S: span{from: 63, to: 73}}. Join(ast.ParentExpr, I: 22.body = 21.id) []
from 102 to 103: ast.Expr{id: 9, location: span{from: 63, to: 73}}; {UI: 9, UL: span{from: 63, to: 73}}. Join(ide.expectedTypeBinding, UL: 102.location = 101.usageLoc) [UI]
from 118 to 119: ast.Expr{id: 9, location: span{from: 63, to: 73}}; {I: 9, Idx: 63}. Join(ide.CurrentScope, Idx: 118.location.from = 117.idx) [I]
from 123 to 124: ast.Expr{id: 9, location: span{from: 63, to: 73}}; {FIdx: 63, I: 9, TIdx: 73}. Join(ide.CurrentType, ) [I]
from 55 to 57: tc.parentScope{id: 13, parentID: 9}; {I: 13, P: 9}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
  tc.ScopeItem{id: 13, parentID: 9}; {I: 13, L: "builtin", N: "intToString", P: 9, T: tapp{from: "int", to: "string"}}
  tc.ScopeItem{id: 13, parentID: 9}; {I: 13, L: "builtin", N: "plus", P: 9, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
  tc.ScopeItem{id: 13, parentID: 9}; {I: 13, L: "builtin", N: "concat", P: 9, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
  tc.ScopeItem{id: 13, parentID: 9}; {I: 13, L: span{from: 4, to: 5}, N: "x", P: 9, T: "int"}
  tc.ScopeItem{id: 13, parentID: 9}; {I: 13, L: span{from: 17, to: 18}, N: "y", P: 9, T: "int"}
  tc.ScopeItem{id: 13, parentID: 9}; {I: 13, L: span{from: 30, to: 31}, N: "z", P: 9, T: "string"}
from 55 to 57: tc.parentScope{id: 10, parentID: 9}; {I: 10, P: 9}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
  tc.ScopeItem{id: 10, parentID: 9}; {I: 10, L: "builtin", N: "intToString", P: 9, T: tapp{from: "int", to: "string"}}
  tc.ScopeItem{id: 10, parentID: 9}; {I: 10, L: "builtin", N: "plus", P: 9, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
  tc.ScopeItem{id: 10, parentID: 9}; {I: 10, L: "builtin", N: "concat", P: 9, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
  tc.ScopeItem{id: 10, parentID: 9}; {I: 10, L: span{from: 4, to: 5}, N: "x", P: 9, T: "int"}
  tc.ScopeItem{id: 10, parentID: 9}; {I: 10, L: span{from: 17, to: 18}, N: "y", P: 9, T: "int"}
  tc.ScopeItem{id: 10, parentID: 9}; {I: 10, L: span{from: 30, to: 31}, N: "z", P: 9, T: "string"}
from 20 to 8: ast.ParentExpr{id: 9, location: span{from: 63, to: 73}}; {I: 9, P: 7, S: span{from: 63, to: 73}}. Union []
  ast.ParentExpr{id: 9, location: span{from: 63, to: 73}}; {I: 9, P: 7, S: span{from: 63, to: 73}}
from 57 to 51: tc.ScopeItem{id: 13, parentID: 9}; {I: 13, L: "builtin", N: "intToString", P: 9, T: tapp{from: "int", to: "string"}}. Union []
  tc.ScopeItem{id: 13, parentID: 9}; {I: 13, L: "builtin", N: "intToString", P: 9, T: tapp{from: "int", to: "string"}}
from 57 to 51: tc.ScopeItem{id: 13, parentID: 9}; {I: 13, L: "builtin", N: "plus", P: 9, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Union []
  tc.ScopeItem{id: 13, parentID: 9}; {I: 13, L: "builtin", N: "plus", P: 9, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 57 to 51: tc.ScopeItem{id: 13, parentID: 9}; {I: 13, L: "builtin", N: "concat", P: 9, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Union []
  tc.ScopeItem{id: 13, parentID: 9}; {I: 13, L: "builtin", N: "concat", P: 9, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 57 to 51: tc.ScopeItem{id: 13, parentID: 9}; {I: 13, L: span{from: 4, to: 5}, N: "x", P: 9, T: "int"}. Union []
  tc.ScopeItem{id: 13, parentID: 9}; {I: 13, L: span{from: 4, to: 5}, N: "x", P: 9, T: "int"}
from 57 to 51: tc.ScopeItem{id: 13, parentID: 9}; {I: 13, L: span{from: 17, to: 18}, N: "y", P: 9, T: "int"}. Union []
  tc.ScopeItem{id: 13, parentID: 9}; {I: 13, L: span{from: 17, to: 18}, N: "y", P: 9, T: "int"}
from 57 to 51: tc.ScopeItem{id: 13, parentID: 9}; {I: 13, L: span{from: 30, to: 31}, N: "z", P: 9, T: "string"}. Union []
  tc.ScopeItem{id: 13, parentID: 9}; {I: 13, L: span{from: 30, to: 31}, N: "z", P: 9, T: "string"}
from 57 to 51: tc.ScopeItem{id: 10, parentID: 9}; {I: 10, L: "builtin", N: "intToString", P: 9, T: tapp{from: "int", to: "string"}}. Union []
  tc.ScopeItem{id: 10, parentID: 9}; {I: 10, L: "builtin", N: "intToString", P: 9, T: tapp{from: "int", to: "string"}}
from 57 to 51: tc.ScopeItem{id: 10, parentID: 9}; {I: 10, L: "builtin", N: "plus", P: 9, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Union []
  tc.ScopeItem{id: 10, parentID: 9}; {I: 10, L: "builtin", N: "plus", P: 9, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 57 to 51: tc.ScopeItem{id: 10, parentID: 9}; {I: 10, L: "builtin", N: "concat", P: 9, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Union []
  tc.ScopeItem{id: 10, parentID: 9}; {I: 10, L: "builtin", N: "concat", P: 9, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 57 to 51: tc.ScopeItem{id: 10, parentID: 9}; {I: 10, L: span{from: 4, to: 5}, N: "x", P: 9, T: "int"}. Union []
  tc.ScopeItem{id: 10, parentID: 9}; {I: 10, L: span{from: 4, to: 5}, N: "x", P: 9, T: "int"}
from 57 to 51: tc.ScopeItem{id: 10, parentID: 9}; {I: 10, L: span{from: 17, to: 18}, N: "y", P: 9, T: "int"}. Union []
  tc.ScopeItem{id: 10, parentID: 9}; {I: 10, L: span{from: 17, to: 18}, N: "y", P: 9, T: "int"}
from 57 to 51: tc.ScopeItem{id: 10, parentID: 9}; {I: 10, L: span{from: 30, to: 31}, N: "z", P: 9, T: "string"}. Union []
  tc.ScopeItem{id: 10, parentID: 9}; {I: 10, L: span{from: 30, to: 31}, N: "z", P: 9, T: "string"}
from 8 to ast.ParentExpr: ast.ParentExpr{id: 9, location: span{from: 63, to: 73}}; {I: 9, P: 7, S: span{from: 63, to: 73}}. Subst({id: I, parent: P, span: S}) []
  ast.ParentExpr{id: 9, parent: 7, span: span{from: 63, to: 73}}; {I: 9, P: 7, S: span{from: 63, to: 73}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 13, parentID: 9}; {I: 13, L: "builtin", N: "intToString", P: 9, T: tapp{from: "int", to: "string"}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 13, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 13, L: "builtin", N: "intToString", P: 9, T: tapp{from: "int", to: "string"}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 13, parentID: 9}; {I: 13, L: "builtin", N: "plus", P: 9, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 13, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 13, L: "builtin", N: "plus", P: 9, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 13, parentID: 9}; {I: 13, L: "builtin", N: "concat", P: 9, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 13, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 13, L: "builtin", N: "concat", P: 9, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 13, parentID: 9}; {I: 13, L: span{from: 4, to: 5}, N: "x", P: 9, T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 13, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 13, L: span{from: 4, to: 5}, N: "x", P: 9, T: "int"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 13, parentID: 9}; {I: 13, L: span{from: 17, to: 18}, N: "y", P: 9, T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 13, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 13, L: span{from: 17, to: 18}, N: "y", P: 9, T: "int"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 13, parentID: 9}; {I: 13, L: span{from: 30, to: 31}, N: "z", P: 9, T: "string"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 13, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 13, L: span{from: 30, to: 31}, N: "z", P: 9, T: "string"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 10, parentID: 9}; {I: 10, L: "builtin", N: "intToString", P: 9, T: tapp{from: "int", to: "string"}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 10, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 10, L: "builtin", N: "intToString", P: 9, T: tapp{from: "int", to: "string"}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 10, parentID: 9}; {I: 10, L: "builtin", N: "plus", P: 9, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 10, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 10, L: "builtin", N: "plus", P: 9, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 10, parentID: 9}; {I: 10, L: "builtin", N: "concat", P: 9, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 10, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 10, L: "builtin", N: "concat", P: 9, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 10, parentID: 9}; {I: 10, L: span{from: 4, to: 5}, N: "x", P: 9, T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 10, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 10, L: span{from: 4, to: 5}, N: "x", P: 9, T: "int"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 10, parentID: 9}; {I: 10, L: span{from: 17, to: 18}, N: "y", P: 9, T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 10, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 10, L: span{from: 17, to: 18}, N: "y", P: 9, T: "int"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 10, parentID: 9}; {I: 10, L: span{from: 30, to: 31}, N: "z", P: 9, T: "string"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 10, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 10, L: span{from: 30, to: 31}, N: "z", P: 9, T: "string"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 13, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 13, L: "builtin", N: "intToString", P: 9, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 13, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 13, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 13, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 13, L: "builtin", N: "intToString", P: 9, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 13, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 13, T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 13, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 13, L: "builtin", N: "intToString", P: 9, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 13, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 13, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 13, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 13, L: "builtin", N: "intToString", P: 9, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 13, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 13, N: "intToString", TF: "int", TT: "string"}
from tc.ScopeItem to 88: tc.ScopeItem{id: 13, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 13, L: "builtin", N: "intToString", P: 9, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 13, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 13, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 13, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 13, L: "builtin", N: "intToString", P: 9, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 13, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 13, N: "intToString"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 13, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 13, L: "builtin", N: "intToString", P: 9, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 13, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 13, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 13, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 13, L: "builtin", N: "plus", P: 9, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 13, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 13, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 13, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 13, L: "builtin", N: "plus", P: 9, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 13, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 13, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 13, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 13, L: "builtin", N: "plus", P: 9, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 13, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 13, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 13, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 13, L: "builtin", N: "plus", P: 9, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 13, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 13, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 13, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 13, L: "builtin", N: "plus", P: 9, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 13, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 13, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 13, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 13, L: "builtin", N: "plus", P: 9, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 13, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 13, N: "plus"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 13, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 13, L: "builtin", N: "plus", P: 9, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 13, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 13, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 13, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 13, L: "builtin", N: "concat", P: 9, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 13, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 13, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 13, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 13, L: "builtin", N: "concat", P: 9, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 13, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 13, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 13, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 13, L: "builtin", N: "concat", P: 9, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 13, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 13, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 13, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 13, L: "builtin", N: "concat", P: 9, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 13, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 13, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 13, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 13, L: "builtin", N: "concat", P: 9, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 13, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 13, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 13, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 13, L: "builtin", N: "concat", P: 9, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 13, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 13, N: "concat"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 13, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 13, L: "builtin", N: "concat", P: 9, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 13, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 13, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 13, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 13, L: span{from: 4, to: 5}, N: "x", P: 9, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 13, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 13, N: "x", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 13, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 13, L: span{from: 4, to: 5}, N: "x", P: 9, T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 13, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 13, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 13, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 13, L: span{from: 4, to: 5}, N: "x", P: 9, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 13, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 13, N: "x", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 13, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 13, L: span{from: 4, to: 5}, N: "x", P: 9, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 13, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 13, L: span{from: 4, to: 5}, N: "x", P: 9, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 13, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 13, N: "x", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 13, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 13, L: span{from: 4, to: 5}, N: "x", P: 9, T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 13, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 13, N: "x"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 13, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 13, L: span{from: 4, to: 5}, N: "x", P: 9, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 13, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 13, N: "x", T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 13, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 13, L: span{from: 17, to: 18}, N: "y", P: 9, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 13, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 13, N: "y", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 13, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 13, L: span{from: 17, to: 18}, N: "y", P: 9, T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 13, location: span{from: 17, to: 18}, name: "y", type: "int"}; {L: span{from: 17, to: 18}, N: "y", P: 13, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 13, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 13, L: span{from: 17, to: 18}, N: "y", P: 9, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 13, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 13, N: "y", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 13, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 13, L: span{from: 17, to: 18}, N: "y", P: 9, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 13, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 13, L: span{from: 17, to: 18}, N: "y", P: 9, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 13, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 13, N: "y", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 13, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 13, L: span{from: 17, to: 18}, N: "y", P: 9, T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 13, location: span{from: 17, to: 18}, name: "y", type: "int"}; {DL: span{from: 17, to: 18}, I: 13, N: "y"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 13, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 13, L: span{from: 17, to: 18}, N: "y", P: 9, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 13, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 13, N: "y", T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 13, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 13, L: span{from: 30, to: 31}, N: "z", P: 9, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 13, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 13, N: "z", T: "string"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 13, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 13, L: span{from: 30, to: 31}, N: "z", P: 9, T: "string"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 13, location: span{from: 30, to: 31}, name: "z", type: "string"}; {L: span{from: 30, to: 31}, N: "z", P: 13, T: "string"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 13, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 13, L: span{from: 30, to: 31}, N: "z", P: 9, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 13, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 13, N: "z", T: "string"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 13, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 13, L: span{from: 30, to: 31}, N: "z", P: 9, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 13, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 13, L: span{from: 30, to: 31}, N: "z", P: 9, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 13, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 13, N: "z", T: "string"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 13, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 13, L: span{from: 30, to: 31}, N: "z", P: 9, T: "string"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 13, location: span{from: 30, to: 31}, name: "z", type: "string"}; {DL: span{from: 30, to: 31}, I: 13, N: "z"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 13, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 13, L: span{from: 30, to: 31}, N: "z", P: 9, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 13, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 13, N: "z", T: "string"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 10, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 10, L: "builtin", N: "intToString", P: 9, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 10, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 10, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 10, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 10, L: "builtin", N: "intToString", P: 9, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 10, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 10, T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 10, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 10, L: "builtin", N: "intToString", P: 9, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 10, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 10, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 10, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 10, L: "builtin", N: "intToString", P: 9, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 10, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 10, N: "intToString", TF: "int", TT: "string"}
from tc.ScopeItem to 88: tc.ScopeItem{id: 10, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 10, L: "builtin", N: "intToString", P: 9, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 10, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 10, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 10, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 10, L: "builtin", N: "intToString", P: 9, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 10, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 10, N: "intToString"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 10, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 10, L: "builtin", N: "intToString", P: 9, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 10, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 10, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 10, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 10, L: "builtin", N: "plus", P: 9, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 10, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 10, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 10, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 10, L: "builtin", N: "plus", P: 9, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 10, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 10, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 10, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 10, L: "builtin", N: "plus", P: 9, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 10, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 10, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 10, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 10, L: "builtin", N: "plus", P: 9, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 10, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 10, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 10, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 10, L: "builtin", N: "plus", P: 9, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 10, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 10, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 10, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 10, L: "builtin", N: "plus", P: 9, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 10, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 10, N: "plus"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 10, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 10, L: "builtin", N: "plus", P: 9, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 10, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 10, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 10, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 10, L: "builtin", N: "concat", P: 9, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 10, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 10, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 10, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 10, L: "builtin", N: "concat", P: 9, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 10, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 10, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 10, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 10, L: "builtin", N: "concat", P: 9, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 10, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 10, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 10, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 10, L: "builtin", N: "concat", P: 9, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 10, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 10, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 10, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 10, L: "builtin", N: "concat", P: 9, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 10, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 10, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 10, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 10, L: "builtin", N: "concat", P: 9, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 10, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 10, N: "concat"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 10, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 10, L: "builtin", N: "concat", P: 9, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 10, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 10, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 10, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 10, L: span{from: 4, to: 5}, N: "x", P: 9, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 10, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 10, N: "x", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 10, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 10, L: span{from: 4, to: 5}, N: "x", P: 9, T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 10, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 10, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 10, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 10, L: span{from: 4, to: 5}, N: "x", P: 9, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 10, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 10, N: "x", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 10, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 10, L: span{from: 4, to: 5}, N: "x", P: 9, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 10, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 10, L: span{from: 4, to: 5}, N: "x", P: 9, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 10, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 10, N: "x", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 10, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 10, L: span{from: 4, to: 5}, N: "x", P: 9, T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 10, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 10, N: "x"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 10, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 10, L: span{from: 4, to: 5}, N: "x", P: 9, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 10, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 10, N: "x", T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 10, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 10, L: span{from: 17, to: 18}, N: "y", P: 9, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 10, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 10, N: "y", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 10, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 10, L: span{from: 17, to: 18}, N: "y", P: 9, T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 10, location: span{from: 17, to: 18}, name: "y", type: "int"}; {L: span{from: 17, to: 18}, N: "y", P: 10, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 10, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 10, L: span{from: 17, to: 18}, N: "y", P: 9, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 10, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 10, N: "y", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 10, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 10, L: span{from: 17, to: 18}, N: "y", P: 9, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 10, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 10, L: span{from: 17, to: 18}, N: "y", P: 9, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 10, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 10, N: "y", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 10, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 10, L: span{from: 17, to: 18}, N: "y", P: 9, T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 10, location: span{from: 17, to: 18}, name: "y", type: "int"}; {DL: span{from: 17, to: 18}, I: 10, N: "y"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 10, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 10, L: span{from: 17, to: 18}, N: "y", P: 9, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 10, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 10, N: "y", T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 10, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 10, L: span{from: 30, to: 31}, N: "z", P: 9, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 10, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 10, N: "z", T: "string"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 10, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 10, L: span{from: 30, to: 31}, N: "z", P: 9, T: "string"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 10, location: span{from: 30, to: 31}, name: "z", type: "string"}; {L: span{from: 30, to: 31}, N: "z", P: 10, T: "string"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 10, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 10, L: span{from: 30, to: 31}, N: "z", P: 9, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 10, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 10, N: "z", T: "string"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 10, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 10, L: span{from: 30, to: 31}, N: "z", P: 9, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 10, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 10, L: span{from: 30, to: 31}, N: "z", P: 9, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 10, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 10, N: "z", T: "string"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 10, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 10, L: span{from: 30, to: 31}, N: "z", P: 9, T: "string"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 10, location: span{from: 30, to: 31}, name: "z", type: "string"}; {DL: span{from: 30, to: 31}, I: 10, N: "z"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 10, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 10, L: span{from: 30, to: 31}, N: "z", P: 9, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 10, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 10, N: "z", T: "string"}
from 43 to 44: tc.ScopeItem{id: 13, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 13, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 13, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 13, T: tapp{from: "int", to: "string"}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 13, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 13, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 13, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 13, N: "intToString", TF: "int", TT: "string"}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 13, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 13, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 13, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 13, N: "intToString"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 13, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 13, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 13, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 13, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 13, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 13, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 13, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 13, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 13, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 13, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 13, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 13, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 13, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 13, N: "plus"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 13, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 13, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 13, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 13, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 13, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 13, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 13, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 13, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 13, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 13, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 13, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 13, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 13, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 13, N: "concat"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 13, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 13, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 13, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 13, N: "x", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 13, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 13, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 13, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 13, N: "x", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 13, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 13, N: "x", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 13, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 13, N: "x"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 13, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 13, N: "x", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 13, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 13, N: "y", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 13, location: span{from: 17, to: 18}, name: "y", type: "int"}; {L: span{from: 17, to: 18}, N: "y", P: 13, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 13, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 13, N: "y", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 13, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 13, N: "y", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 13, location: span{from: 17, to: 18}, name: "y", type: "int"}; {DL: span{from: 17, to: 18}, I: 13, N: "y"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 13, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 13, N: "y", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 13, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 13, N: "z", T: "string"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 13, location: span{from: 30, to: 31}, name: "z", type: "string"}; {L: span{from: 30, to: 31}, N: "z", P: 13, T: "string"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 13, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 13, N: "z", T: "string"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 13, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 13, N: "z", T: "string"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 13, location: span{from: 30, to: 31}, name: "z", type: "string"}; {DL: span{from: 30, to: 31}, I: 13, N: "z"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 13, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 13, N: "z", T: "string"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 10, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 10, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 10, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 10, T: tapp{from: "int", to: "string"}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 10, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 10, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 10, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 10, N: "intToString", TF: "int", TT: "string"}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 10, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 10, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 10, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 10, N: "intToString"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 10, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 10, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 10, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 10, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 10, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 10, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 10, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 10, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 10, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 10, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 10, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 10, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 10, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 10, N: "plus"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 10, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 10, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 10, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 10, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 10, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 10, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 10, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 10, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 10, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 10, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 10, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 10, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 10, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 10, N: "concat"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 10, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 10, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 10, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 10, N: "x", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 10, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 10, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 10, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 10, N: "x", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 10, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 10, N: "x", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 10, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 10, N: "x"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 10, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 10, N: "x", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 10, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 10, N: "y", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 10, location: span{from: 17, to: 18}, name: "y", type: "int"}; {L: span{from: 17, to: 18}, N: "y", P: 10, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 10, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 10, N: "y", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 10, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 10, N: "y", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 10, location: span{from: 17, to: 18}, name: "y", type: "int"}; {DL: span{from: 17, to: 18}, I: 10, N: "y"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 10, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 10, N: "y", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 10, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 10, N: "z", T: "string"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 10, location: span{from: 30, to: 31}, name: "z", type: "string"}; {L: span{from: 30, to: 31}, N: "z", P: 10, T: "string"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 10, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 10, N: "z", T: "string"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 10, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 10, N: "z", T: "string"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 10, location: span{from: 30, to: 31}, name: "z", type: "string"}; {DL: span{from: 30, to: 31}, I: 10, N: "z"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 10, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 10, N: "z", T: "string"}. Join(ide.CurrentScope, I: 120.id = 119.id) []

ast.FuncCall{argID: 12, funcID: 11, id: 10, location: span{from: 63, to: 67}}.
----
text/emission-log
from null to ast.FuncCall: ast.FuncCall{argID: 12, funcID: 11, id: 10, location: span{from: 63, to: 67}}; {}.  []
  ast.FuncCall{argID: 12, funcID: 11, id: 10, location: span{from: 63, to: 67}}; {}
from ast.FuncCall to 5: ast.FuncCall{argID: 12, funcID: 11, id: 10, location: span{from: 63, to: 67}}; {}. Match(ast.FuncCall{id: I, location: S}; {}) []
  ast.FuncCall{argID: 12, funcID: 11, id: 10, location: span{from: 63, to: 67}}; {I: 10, S: span{from: 63, to: 67}}
from ast.FuncCall to 16: ast.FuncCall{argID: 12, funcID: 11, id: 10, location: span{from: 63, to: 67}}; {}. Match(ast.FuncCall{funcID: I, id: P}; {}) [I]
  ast.FuncCall{argID: 12, funcID: 11, id: 10, location: span{from: 63, to: 67}}; {I: 11, P: 10}
from ast.FuncCall to 19: ast.FuncCall{argID: 12, funcID: 11, id: 10, location: span{from: 63, to: 67}}; {}. Match(ast.FuncCall{argID: I, id: P}; {}) [I]
  ast.FuncCall{argID: 12, funcID: 11, id: 10, location: span{from: 63, to: 67}}; {I: 12, P: 10}
from ast.FuncCall to 34: ast.FuncCall{argID: 12, funcID: 11, id: 10, location: span{from: 63, to: 67}}; {}. Match(ast.FuncCall{argID: AID, funcID: FID, id: I}; {}) [FID]
  ast.FuncCall{argID: 12, funcID: 11, id: 10, location: span{from: 63, to: 67}}; {AID: 12, FID: 11, I: 10}
from ast.FuncCall to 70: ast.FuncCall{argID: 12, funcID: 11, id: 10, location: span{from: 63, to: 67}}; {}. Match(ast.FuncCall{argID: I, id: P}; {}) []
  ast.FuncCall{argID: 12, funcID: 11, id: 10, location: span{from: 63, to: 67}}; {I: 12, P: 10}
from ast.FuncCall to 71: ast.FuncCall{argID: 12, funcID: 11, id: 10, location: span{from: 63, to: 67}}; {}. Match(ast.FuncCall{funcID: I, id: P}; {}) []
  ast.FuncCall{argID: 12, funcID: 11, id: 10, location: span{from: 63, to: 67}}; {I: 11, P: 10}
from ast.FuncCall to 95: ast.FuncCall{argID: 12, funcID: 11, id: 10, location: span{from: 63, to: 67}}; {}. Match(ast.FuncCall{argID: I, funcID: F}; {}) [F]
  ast.FuncCall{argID: 12, funcID: 11, id: 10, location: span{from: 63, to: 67}}; {F: 11, I: 12}
from 5 to 0: ast.FuncCall{argID: 12, funcID: 11, id: 10, location: span{from: 63, to: 67}}; {I: 10, S: span{from: 63, to: 67}}. Union []
  ast.FuncCall{argID: 12, funcID: 11, id: 10, location: span{from: 63, to: 67}}; {I: 10, S: span{from: 63, to: 67}}
from 16 to 17: ast.FuncCall{argID: 12, funcID: 11, id: 10, location: span{from: 63, to: 67}}; {I: 11, P: 10}. Join(ast.ParentExpr, I: 16.funcID = 15.id) []
from 19 to 20: ast.FuncCall{argID: 12, funcID: 11, id: 10, location: span{from: 63, to: 67}}; {I: 12, P: 10}. Join(ast.ParentExpr, I: 19.argID = 18.id) []
from 34 to 36: ast.FuncCall{argID: 12, funcID: 11, id: 10, location: span{from: 63, to: 67}}; {AID: 12, FID: 11, I: 10}. Join(tc.typeFC, FID: 35.id = 34.funcID) [F]
from 70 to 67: ast.FuncCall{argID: 12, funcID: 11, id: 10, location: span{from: 63, to: 67}}; {I: 12, P: 10}. Union []
  ast.FuncCall{argID: 12, funcID: 11, id: 10, location: span{from: 63, to: 67}}; {I: 12, P: 10}
from 71 to 67: ast.FuncCall{argID: 12, funcID: 11, id: 10, location: span{from: 63, to: 67}}; {I: 11, P: 10}. Union []
  ast.FuncCall{argID: 12, funcID: 11, id: 10, location: span{from: 63, to: 67}}; {I: 11, P: 10}
from 95 to 97: ast.FuncCall{argID: 12, funcID: 11, id: 10, location: span{from: 63, to: 67}}; {F: 11, I: 12}. Join(ide.expectedType, F: 96.id = 95.funcID) []
from 0 to ast.Expr: ast.FuncCall{argID: 12, funcID: 11, id: 10, location: span{from: 63, to: 67}}; {I: 10, S: span{from: 63, to: 67}}. Subst({id: I, location: S}) []
  ast.Expr{id: 10, location: span{from: 63, to: 67}}; {I: 10, S: span{from: 63, to: 67}}
from 67 to tc.parentScope: ast.FuncCall{argID: 12, funcID: 11, id: 10, location: span{from: 63, to: 67}}; {I: 12, P: 10}. Subst({id: I, parentID: P}) []
  tc.parentScope{id: 12, parentID: 10}; {I: 12, P: 10}
from 67 to tc.parentScope: ast.FuncCall{argID: 12, funcID: 11, id: 10, location: span{from: 63, to: 67}}; {I: 11, P: 10}. Subst({id: I, parentID: P}) []
  tc.parentScope{id: 11, parentID: 10}; {I: 11, P: 10}
from ast.Expr to 9: ast.Expr{id: 10, location: span{from: 63, to: 67}}; {I: 10, S: span{from: 63, to: 67}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 10, location: span{from: 63, to: 67}}; {I: 10, S: span{from: 63, to: 67}}
from ast.Expr to 12: ast.Expr{id: 10, location: span{from: 63, to: 67}}; {I: 10, S: span{from: 63, to: 67}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 10, location: span{from: 63, to: 67}}; {I: 10, S: span{from: 63, to: 67}}
from ast.Expr to 15: ast.Expr{id: 10, location: span{from: 63, to: 67}}; {I: 10, S: span{from: 63, to: 67}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 10, location: span{from: 63, to: 67}}; {I: 10, S: span{from: 63, to: 67}}
from ast.Expr to 18: ast.Expr{id: 10, location: span{from: 63, to: 67}}; {I: 10, S: span{from: 63, to: 67}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 10, location: span{from: 63, to: 67}}; {I: 10, S: span{from: 63, to: 67}}
from ast.Expr to 21: ast.Expr{id: 10, location: span{from: 63, to: 67}}; {I: 10, S: span{from: 63, to: 67}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 10, location: span{from: 63, to: 67}}; {I: 10, S: span{from: 63, to: 67}}
from ast.Expr to 102: ast.Expr{id: 10, location: span{from: 63, to: 67}}; {I: 10, S: span{from: 63, to: 67}}. Match(ast.Expr{id: UI, location: UL}; {I: UI, S: UL}) [UL]
  ast.Expr{id: 10, location: span{from: 63, to: 67}}; {UI: 10, UL: span{from: 63, to: 67}}
from ast.Expr to 118: ast.Expr{id: 10, location: span{from: 63, to: 67}}; {I: 10, S: span{from: 63, to: 67}}. Match(ast.Expr{id: I, location: span{from: Idx}}; {I: I}) [Idx]
  ast.Expr{id: 10, location: span{from: 63, to: 67}}; {I: 10, Idx: 63}
from ast.Expr to 123: ast.Expr{id: 10, location: span{from: 63, to: 67}}; {I: 10, S: span{from: 63, to: 67}}. Match(ast.Expr{id: I, location: span{from: FIdx, to: TIdx}}; {I: I}) []
  ast.Expr{id: 10, location: span{from: 63, to: 67}}; {FIdx: 63, I: 10, TIdx: 67}
from tc.parentScope to 55: tc.parentScope{id: 12, parentID: 10}; {I: 12, P: 10}. Match(tc.parentScope{id: I, parentID: P}; {I: I, P: P}) [P]
  tc.parentScope{id: 12, parentID: 10}; {I: 12, P: 10}
from tc.parentScope to 55: tc.parentScope{id: 11, parentID: 10}; {I: 11, P: 10}. Match(tc.parentScope{id: I, parentID: P}; {I: I, P: P}) [P]
  tc.parentScope{id: 11, parentID: 10}; {I: 11, P: 10}
from 9 to 11: ast.Expr{id: 10, location: span{from: 63, to: 67}}; {I: 10, S: span{from: 63, to: 67}}. Join(ast.ParentExpr, I: 10.bodyID = 9.id) []
from 12 to 14: ast.Expr{id: 10, location: span{from: 63, to: 67}}; {I: 10, S: span{from: 63, to: 67}}. Join(ast.ParentExpr, I: 13.bindingID = 12.id) []
from 15 to 17: ast.Expr{id: 10, location: span{from: 63, to: 67}}; {I: 10, S: span{from: 63, to: 67}}. Join(ast.ParentExpr, I: 16.funcID = 15.id) []
  ast.ParentExpr{id: 10, location: span{from: 63, to: 67}}; {I: 10, P: 9, S: span{from: 63, to: 67}}
from 18 to 20: ast.Expr{id: 10, location: span{from: 63, to: 67}}; {I: 10, S: span{from: 63, to: 67}}. Join(ast.ParentExpr, I: 19.argID = 18.id) []
from 21 to 23: ast.Expr{id: 10, location: span{from: 63, to: 67}}; {I: 10, S: span{from: 63, to: 67}}. Join(ast.ParentExpr, I: 22.body = 21.id) []
from 102 to 103: ast.Expr{id: 10, location: span{from: 63, to: 67}}; {UI: 10, UL: span{from: 63, to: 67}}. Join(ide.expectedTypeBinding, UL: 102.location = 101.usageLoc) [UI]
from 118 to 119: ast.Expr{id: 10, location: span{from: 63, to: 67}}; {I: 10, Idx: 63}. Join(ide.CurrentScope, Idx: 118.location.from = 117.idx) [I]
from 123 to 124: ast.Expr{id: 10, location: span{from: 63, to: 67}}; {FIdx: 63, I: 10, TIdx: 67}. Join(ide.CurrentType, ) [I]
from 55 to 57: tc.parentScope{id: 12, parentID: 10}; {I: 12, P: 10}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
  tc.ScopeItem{id: 12, parentID: 10}; {I: 12, L: "builtin", N: "intToString", P: 10, T: tapp{from: "int", to: "string"}}
  tc.ScopeItem{id: 12, parentID: 10}; {I: 12, L: "builtin", N: "plus", P: 10, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
  tc.ScopeItem{id: 12, parentID: 10}; {I: 12, L: "builtin", N: "concat", P: 10, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
  tc.ScopeItem{id: 12, parentID: 10}; {I: 12, L: span{from: 4, to: 5}, N: "x", P: 10, T: "int"}
  tc.ScopeItem{id: 12, parentID: 10}; {I: 12, L: span{from: 17, to: 18}, N: "y", P: 10, T: "int"}
  tc.ScopeItem{id: 12, parentID: 10}; {I: 12, L: span{from: 30, to: 31}, N: "z", P: 10, T: "string"}
from 55 to 57: tc.parentScope{id: 11, parentID: 10}; {I: 11, P: 10}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
  tc.ScopeItem{id: 11, parentID: 10}; {I: 11, L: "builtin", N: "intToString", P: 10, T: tapp{from: "int", to: "string"}}
  tc.ScopeItem{id: 11, parentID: 10}; {I: 11, L: "builtin", N: "plus", P: 10, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
  tc.ScopeItem{id: 11, parentID: 10}; {I: 11, L: "builtin", N: "concat", P: 10, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
  tc.ScopeItem{id: 11, parentID: 10}; {I: 11, L: span{from: 4, to: 5}, N: "x", P: 10, T: "int"}
  tc.ScopeItem{id: 11, parentID: 10}; {I: 11, L: span{from: 17, to: 18}, N: "y", P: 10, T: "int"}
  tc.ScopeItem{id: 11, parentID: 10}; {I: 11, L: span{from: 30, to: 31}, N: "z", P: 10, T: "string"}
from 17 to 8: ast.ParentExpr{id: 10, location: span{from: 63, to: 67}}; {I: 10, P: 9, S: span{from: 63, to: 67}}. Union []
  ast.ParentExpr{id: 10, location: span{from: 63, to: 67}}; {I: 10, P: 9, S: span{from: 63, to: 67}}
from 57 to 51: tc.ScopeItem{id: 12, parentID: 10}; {I: 12, L: "builtin", N: "intToString", P: 10, T: tapp{from: "int", to: "string"}}. Union []
  tc.ScopeItem{id: 12, parentID: 10}; {I: 12, L: "builtin", N: "intToString", P: 10, T: tapp{from: "int", to: "string"}}
from 57 to 51: tc.ScopeItem{id: 12, parentID: 10}; {I: 12, L: "builtin", N: "plus", P: 10, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Union []
  tc.ScopeItem{id: 12, parentID: 10}; {I: 12, L: "builtin", N: "plus", P: 10, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 57 to 51: tc.ScopeItem{id: 12, parentID: 10}; {I: 12, L: "builtin", N: "concat", P: 10, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Union []
  tc.ScopeItem{id: 12, parentID: 10}; {I: 12, L: "builtin", N: "concat", P: 10, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 57 to 51: tc.ScopeItem{id: 12, parentID: 10}; {I: 12, L: span{from: 4, to: 5}, N: "x", P: 10, T: "int"}. Union []
  tc.ScopeItem{id: 12, parentID: 10}; {I: 12, L: span{from: 4, to: 5}, N: "x", P: 10, T: "int"}
from 57 to 51: tc.ScopeItem{id: 12, parentID: 10}; {I: 12, L: span{from: 17, to: 18}, N: "y", P: 10, T: "int"}. Union []
  tc.ScopeItem{id: 12, parentID: 10}; {I: 12, L: span{from: 17, to: 18}, N: "y", P: 10, T: "int"}
from 57 to 51: tc.ScopeItem{id: 12, parentID: 10}; {I: 12, L: span{from: 30, to: 31}, N: "z", P: 10, T: "string"}. Union []
  tc.ScopeItem{id: 12, parentID: 10}; {I: 12, L: span{from: 30, to: 31}, N: "z", P: 10, T: "string"}
from 57 to 51: tc.ScopeItem{id: 11, parentID: 10}; {I: 11, L: "builtin", N: "intToString", P: 10, T: tapp{from: "int", to: "string"}}. Union []
  tc.ScopeItem{id: 11, parentID: 10}; {I: 11, L: "builtin", N: "intToString", P: 10, T: tapp{from: "int", to: "string"}}
from 57 to 51: tc.ScopeItem{id: 11, parentID: 10}; {I: 11, L: "builtin", N: "plus", P: 10, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Union []
  tc.ScopeItem{id: 11, parentID: 10}; {I: 11, L: "builtin", N: "plus", P: 10, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 57 to 51: tc.ScopeItem{id: 11, parentID: 10}; {I: 11, L: "builtin", N: "concat", P: 10, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Union []
  tc.ScopeItem{id: 11, parentID: 10}; {I: 11, L: "builtin", N: "concat", P: 10, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 57 to 51: tc.ScopeItem{id: 11, parentID: 10}; {I: 11, L: span{from: 4, to: 5}, N: "x", P: 10, T: "int"}. Union []
  tc.ScopeItem{id: 11, parentID: 10}; {I: 11, L: span{from: 4, to: 5}, N: "x", P: 10, T: "int"}
from 57 to 51: tc.ScopeItem{id: 11, parentID: 10}; {I: 11, L: span{from: 17, to: 18}, N: "y", P: 10, T: "int"}. Union []
  tc.ScopeItem{id: 11, parentID: 10}; {I: 11, L: span{from: 17, to: 18}, N: "y", P: 10, T: "int"}
from 57 to 51: tc.ScopeItem{id: 11, parentID: 10}; {I: 11, L: span{from: 30, to: 31}, N: "z", P: 10, T: "string"}. Union []
  tc.ScopeItem{id: 11, parentID: 10}; {I: 11, L: span{from: 30, to: 31}, N: "z", P: 10, T: "string"}
from 8 to ast.ParentExpr: ast.ParentExpr{id: 10, location: span{from: 63, to: 67}}; {I: 10, P: 9, S: span{from: 63, to: 67}}. Subst({id: I, parent: P, span: S}) []
  ast.ParentExpr{id: 10, parent: 9, span: span{from: 63, to: 67}}; {I: 10, P: 9, S: span{from: 63, to: 67}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 12, parentID: 10}; {I: 12, L: "builtin", N: "intToString", P: 10, T: tapp{from: "int", to: "string"}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 12, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 12, L: "builtin", N: "intToString", P: 10, T: tapp{from: "int", to: "string"}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 12, parentID: 10}; {I: 12, L: "builtin", N: "plus", P: 10, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 12, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 12, L: "builtin", N: "plus", P: 10, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 12, parentID: 10}; {I: 12, L: "builtin", N: "concat", P: 10, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 12, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 12, L: "builtin", N: "concat", P: 10, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 12, parentID: 10}; {I: 12, L: span{from: 4, to: 5}, N: "x", P: 10, T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 12, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 12, L: span{from: 4, to: 5}, N: "x", P: 10, T: "int"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 12, parentID: 10}; {I: 12, L: span{from: 17, to: 18}, N: "y", P: 10, T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 12, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 12, L: span{from: 17, to: 18}, N: "y", P: 10, T: "int"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 12, parentID: 10}; {I: 12, L: span{from: 30, to: 31}, N: "z", P: 10, T: "string"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 12, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 12, L: span{from: 30, to: 31}, N: "z", P: 10, T: "string"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 11, parentID: 10}; {I: 11, L: "builtin", N: "intToString", P: 10, T: tapp{from: "int", to: "string"}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 11, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 11, L: "builtin", N: "intToString", P: 10, T: tapp{from: "int", to: "string"}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 11, parentID: 10}; {I: 11, L: "builtin", N: "plus", P: 10, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 11, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, L: "builtin", N: "plus", P: 10, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 11, parentID: 10}; {I: 11, L: "builtin", N: "concat", P: 10, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 11, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 11, L: "builtin", N: "concat", P: 10, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 11, parentID: 10}; {I: 11, L: span{from: 4, to: 5}, N: "x", P: 10, T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 11, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 11, L: span{from: 4, to: 5}, N: "x", P: 10, T: "int"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 11, parentID: 10}; {I: 11, L: span{from: 17, to: 18}, N: "y", P: 10, T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 11, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 11, L: span{from: 17, to: 18}, N: "y", P: 10, T: "int"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 11, parentID: 10}; {I: 11, L: span{from: 30, to: 31}, N: "z", P: 10, T: "string"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 11, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 11, L: span{from: 30, to: 31}, N: "z", P: 10, T: "string"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 12, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 12, L: "builtin", N: "intToString", P: 10, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 12, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 12, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 12, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 12, L: "builtin", N: "intToString", P: 10, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 12, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 12, T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 12, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 12, L: "builtin", N: "intToString", P: 10, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 12, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 12, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 12, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 12, L: "builtin", N: "intToString", P: 10, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 12, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 12, N: "intToString", TF: "int", TT: "string"}
from tc.ScopeItem to 88: tc.ScopeItem{id: 12, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 12, L: "builtin", N: "intToString", P: 10, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 12, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 12, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 12, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 12, L: "builtin", N: "intToString", P: 10, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 12, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 12, N: "intToString"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 12, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 12, L: "builtin", N: "intToString", P: 10, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 12, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 12, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 12, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 12, L: "builtin", N: "plus", P: 10, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 12, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 12, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 12, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 12, L: "builtin", N: "plus", P: 10, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 12, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 12, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 12, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 12, L: "builtin", N: "plus", P: 10, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 12, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 12, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 12, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 12, L: "builtin", N: "plus", P: 10, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 12, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 12, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 12, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 12, L: "builtin", N: "plus", P: 10, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 12, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 12, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 12, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 12, L: "builtin", N: "plus", P: 10, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 12, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 12, N: "plus"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 12, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 12, L: "builtin", N: "plus", P: 10, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 12, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 12, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 12, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 12, L: "builtin", N: "concat", P: 10, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 12, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 12, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 12, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 12, L: "builtin", N: "concat", P: 10, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 12, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 12, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 12, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 12, L: "builtin", N: "concat", P: 10, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 12, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 12, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 12, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 12, L: "builtin", N: "concat", P: 10, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 12, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 12, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 12, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 12, L: "builtin", N: "concat", P: 10, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 12, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 12, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 12, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 12, L: "builtin", N: "concat", P: 10, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 12, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 12, N: "concat"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 12, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 12, L: "builtin", N: "concat", P: 10, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 12, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 12, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 12, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 12, L: span{from: 4, to: 5}, N: "x", P: 10, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 12, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 12, N: "x", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 12, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 12, L: span{from: 4, to: 5}, N: "x", P: 10, T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 12, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 12, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 12, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 12, L: span{from: 4, to: 5}, N: "x", P: 10, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 12, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 12, N: "x", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 12, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 12, L: span{from: 4, to: 5}, N: "x", P: 10, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 12, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 12, L: span{from: 4, to: 5}, N: "x", P: 10, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 12, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 12, N: "x", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 12, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 12, L: span{from: 4, to: 5}, N: "x", P: 10, T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 12, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 12, N: "x"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 12, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 12, L: span{from: 4, to: 5}, N: "x", P: 10, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 12, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 12, N: "x", T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 12, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 12, L: span{from: 17, to: 18}, N: "y", P: 10, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 12, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 12, N: "y", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 12, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 12, L: span{from: 17, to: 18}, N: "y", P: 10, T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 12, location: span{from: 17, to: 18}, name: "y", type: "int"}; {L: span{from: 17, to: 18}, N: "y", P: 12, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 12, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 12, L: span{from: 17, to: 18}, N: "y", P: 10, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 12, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 12, N: "y", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 12, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 12, L: span{from: 17, to: 18}, N: "y", P: 10, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 12, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 12, L: span{from: 17, to: 18}, N: "y", P: 10, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 12, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 12, N: "y", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 12, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 12, L: span{from: 17, to: 18}, N: "y", P: 10, T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 12, location: span{from: 17, to: 18}, name: "y", type: "int"}; {DL: span{from: 17, to: 18}, I: 12, N: "y"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 12, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 12, L: span{from: 17, to: 18}, N: "y", P: 10, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 12, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 12, N: "y", T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 12, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 12, L: span{from: 30, to: 31}, N: "z", P: 10, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 12, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 12, N: "z", T: "string"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 12, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 12, L: span{from: 30, to: 31}, N: "z", P: 10, T: "string"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 12, location: span{from: 30, to: 31}, name: "z", type: "string"}; {L: span{from: 30, to: 31}, N: "z", P: 12, T: "string"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 12, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 12, L: span{from: 30, to: 31}, N: "z", P: 10, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 12, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 12, N: "z", T: "string"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 12, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 12, L: span{from: 30, to: 31}, N: "z", P: 10, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 12, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 12, L: span{from: 30, to: 31}, N: "z", P: 10, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 12, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 12, N: "z", T: "string"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 12, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 12, L: span{from: 30, to: 31}, N: "z", P: 10, T: "string"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 12, location: span{from: 30, to: 31}, name: "z", type: "string"}; {DL: span{from: 30, to: 31}, I: 12, N: "z"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 12, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 12, L: span{from: 30, to: 31}, N: "z", P: 10, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 12, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 12, N: "z", T: "string"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 11, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 11, L: "builtin", N: "intToString", P: 10, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 11, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 11, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 11, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 11, L: "builtin", N: "intToString", P: 10, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 11, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 11, T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 11, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 11, L: "builtin", N: "intToString", P: 10, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 11, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 11, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 11, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 11, L: "builtin", N: "intToString", P: 10, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 11, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 11, N: "intToString", TF: "int", TT: "string"}
from tc.ScopeItem to 88: tc.ScopeItem{id: 11, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 11, L: "builtin", N: "intToString", P: 10, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 11, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 11, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 11, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 11, L: "builtin", N: "intToString", P: 10, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 11, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 11, N: "intToString"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 11, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 11, L: "builtin", N: "intToString", P: 10, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 11, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 11, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 11, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, L: "builtin", N: "plus", P: 10, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 11, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 11, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, L: "builtin", N: "plus", P: 10, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 11, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 11, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 11, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, L: "builtin", N: "plus", P: 10, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 11, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 11, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, L: "builtin", N: "plus", P: 10, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 11, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 11, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, L: "builtin", N: "plus", P: 10, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 11, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 11, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, L: "builtin", N: "plus", P: 10, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 11, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 11, N: "plus"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 11, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, L: "builtin", N: "plus", P: 10, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 11, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 11, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 11, L: "builtin", N: "concat", P: 10, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 11, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 11, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 11, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 11, L: "builtin", N: "concat", P: 10, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 11, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 11, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 11, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 11, L: "builtin", N: "concat", P: 10, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 11, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 11, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 11, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 11, L: "builtin", N: "concat", P: 10, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 11, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 11, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 11, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 11, L: "builtin", N: "concat", P: 10, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 11, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 11, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 11, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 11, L: "builtin", N: "concat", P: 10, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 11, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 11, N: "concat"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 11, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 11, L: "builtin", N: "concat", P: 10, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 11, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 11, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 11, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 11, L: span{from: 4, to: 5}, N: "x", P: 10, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 11, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 11, N: "x", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 11, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 11, L: span{from: 4, to: 5}, N: "x", P: 10, T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 11, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 11, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 11, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 11, L: span{from: 4, to: 5}, N: "x", P: 10, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 11, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 11, N: "x", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 11, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 11, L: span{from: 4, to: 5}, N: "x", P: 10, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 11, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 11, L: span{from: 4, to: 5}, N: "x", P: 10, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 11, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 11, N: "x", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 11, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 11, L: span{from: 4, to: 5}, N: "x", P: 10, T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 11, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 11, N: "x"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 11, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 11, L: span{from: 4, to: 5}, N: "x", P: 10, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 11, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 11, N: "x", T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 11, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 11, L: span{from: 17, to: 18}, N: "y", P: 10, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 11, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 11, N: "y", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 11, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 11, L: span{from: 17, to: 18}, N: "y", P: 10, T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 11, location: span{from: 17, to: 18}, name: "y", type: "int"}; {L: span{from: 17, to: 18}, N: "y", P: 11, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 11, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 11, L: span{from: 17, to: 18}, N: "y", P: 10, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 11, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 11, N: "y", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 11, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 11, L: span{from: 17, to: 18}, N: "y", P: 10, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 11, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 11, L: span{from: 17, to: 18}, N: "y", P: 10, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 11, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 11, N: "y", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 11, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 11, L: span{from: 17, to: 18}, N: "y", P: 10, T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 11, location: span{from: 17, to: 18}, name: "y", type: "int"}; {DL: span{from: 17, to: 18}, I: 11, N: "y"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 11, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 11, L: span{from: 17, to: 18}, N: "y", P: 10, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 11, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 11, N: "y", T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 11, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 11, L: span{from: 30, to: 31}, N: "z", P: 10, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 11, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 11, N: "z", T: "string"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 11, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 11, L: span{from: 30, to: 31}, N: "z", P: 10, T: "string"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 11, location: span{from: 30, to: 31}, name: "z", type: "string"}; {L: span{from: 30, to: 31}, N: "z", P: 11, T: "string"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 11, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 11, L: span{from: 30, to: 31}, N: "z", P: 10, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 11, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 11, N: "z", T: "string"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 11, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 11, L: span{from: 30, to: 31}, N: "z", P: 10, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 11, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 11, L: span{from: 30, to: 31}, N: "z", P: 10, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 11, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 11, N: "z", T: "string"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 11, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 11, L: span{from: 30, to: 31}, N: "z", P: 10, T: "string"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 11, location: span{from: 30, to: 31}, name: "z", type: "string"}; {DL: span{from: 30, to: 31}, I: 11, N: "z"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 11, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 11, L: span{from: 30, to: 31}, N: "z", P: 10, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 11, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 11, N: "z", T: "string"}
from 43 to 44: tc.ScopeItem{id: 12, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 12, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 12, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 12, T: tapp{from: "int", to: "string"}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 12, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 12, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 12, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 12, N: "intToString", TF: "int", TT: "string"}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 12, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 12, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 12, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 12, N: "intToString"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 12, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 12, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 12, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 12, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 12, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 12, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 12, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 12, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 12, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 12, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 12, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 12, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 12, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 12, N: "plus"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 12, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 12, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 12, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 12, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 12, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 12, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 12, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 12, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 12, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 12, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 12, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 12, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 12, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 12, N: "concat"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 12, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 12, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 12, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 12, N: "x", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 12, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 12, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 12, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 12, N: "x", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 12, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 12, N: "x", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 12, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 12, N: "x"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 12, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 12, N: "x", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 12, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 12, N: "y", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 12, location: span{from: 17, to: 18}, name: "y", type: "int"}; {L: span{from: 17, to: 18}, N: "y", P: 12, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 12, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 12, N: "y", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 12, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 12, N: "y", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 12, location: span{from: 17, to: 18}, name: "y", type: "int"}; {DL: span{from: 17, to: 18}, I: 12, N: "y"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 12, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 12, N: "y", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 12, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 12, N: "z", T: "string"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 12, location: span{from: 30, to: 31}, name: "z", type: "string"}; {L: span{from: 30, to: 31}, N: "z", P: 12, T: "string"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 12, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 12, N: "z", T: "string"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 12, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 12, N: "z", T: "string"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 12, location: span{from: 30, to: 31}, name: "z", type: "string"}; {DL: span{from: 30, to: 31}, I: 12, N: "z"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 12, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 12, N: "z", T: "string"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 11, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 11, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 11, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 11, T: tapp{from: "int", to: "string"}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 11, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 11, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 11, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 11, N: "intToString", TF: "int", TT: "string"}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 11, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 11, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 11, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 11, N: "intToString"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 11, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 11, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 11, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 11, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 11, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 11, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 11, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 11, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 11, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 11, N: "plus"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 11, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 11, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 11, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 11, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 11, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 11, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 11, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 11, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 11, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 11, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 11, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 11, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 11, N: "concat"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 11, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 11, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 11, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 11, N: "x", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 11, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 11, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 11, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 11, N: "x", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 11, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 11, N: "x", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 11, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 11, N: "x"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 11, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 11, N: "x", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 11, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 11, N: "y", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 11, location: span{from: 17, to: 18}, name: "y", type: "int"}; {L: span{from: 17, to: 18}, N: "y", P: 11, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 11, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 11, N: "y", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 11, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 11, N: "y", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 11, location: span{from: 17, to: 18}, name: "y", type: "int"}; {DL: span{from: 17, to: 18}, I: 11, N: "y"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 11, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 11, N: "y", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 11, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 11, N: "z", T: "string"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 11, location: span{from: 30, to: 31}, name: "z", type: "string"}; {L: span{from: 30, to: 31}, N: "z", P: 11, T: "string"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 11, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 11, N: "z", T: "string"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 11, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 11, N: "z", T: "string"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 11, location: span{from: 30, to: 31}, name: "z", type: "string"}; {DL: span{from: 30, to: 31}, I: 11, N: "z"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 11, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 11, N: "z", T: "string"}. Join(ide.CurrentScope, I: 120.id = 119.id) []

ast.Var{id: 11, location: span{from: 63, to: 67}, name: "plus"}.
----
text/emission-log
from null to ast.Var: ast.Var{id: 11, location: span{from: 63, to: 67}, name: "plus"}; {}.  []
  ast.Var{id: 11, location: span{from: 63, to: 67}, name: "plus"}; {}
from ast.Var to 3: ast.Var{id: 11, location: span{from: 63, to: 67}, name: "plus"}; {}. Match(ast.Var{id: I, location: S}; {}) []
  ast.Var{id: 11, location: span{from: 63, to: 67}, name: "plus"}; {I: 11, S: span{from: 63, to: 67}}
from ast.Var to 42: ast.Var{id: 11, location: span{from: 63, to: 67}, name: "plus"}; {}. Match(ast.Var{id: I, name: N}; {}) [I-N]
  ast.Var{id: 11, location: span{from: 63, to: 67}, name: "plus"}; {I: 11, N: "plus"}
from ast.Var to 106: ast.Var{id: 11, location: span{from: 63, to: 67}, name: "plus"}; {}. Match(ast.Var{id: I, location: UL, name: N}; {}) [I-N]
  ast.Var{id: 11, location: span{from: 63, to: 67}, name: "plus"}; {I: 11, N: "plus", UL: span{from: 63, to: 67}}
from ast.Var to 179: ast.Var{id: 11, location: span{from: 63, to: 67}, name: "plus"}; {}. Match(ast.Var{location: S}; {}) [S]
  ast.Var{id: 11, location: span{from: 63, to: 67}, name: "plus"}; {S: span{from: 63, to: 67}}
from ast.Var to 182: ast.Var{id: 11, location: span{from: 63, to: 67}, name: "plus"}; {}. Match(ast.Var{location: S}; {}) []
  ast.Var{id: 11, location: span{from: 63, to: 67}, name: "plus"}; {S: span{from: 63, to: 67}}
from ast.Var to 184: ast.Var{id: 11, location: span{from: 63, to: 67}, name: "plus"}; {}. Match(ast.Var{location: S}; {}) [S]
  ast.Var{id: 11, location: span{from: 63, to: 67}, name: "plus"}; {S: span{from: 63, to: 67}}
from 3 to 0: ast.Var{id: 11, location: span{from: 63, to: 67}, name: "plus"}; {I: 11, S: span{from: 63, to: 67}}. Union []
  ast.Var{id: 11, location: span{from: 63, to: 67}, name: "plus"}; {I: 11, S: span{from: 63, to: 67}}
from 42 to 44: ast.Var{id: 11, location: span{from: 63, to: 67}, name: "plus"}; {I: 11, N: "plus"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
  tc.typeVar{id: 11, location: span{from: 63, to: 67}, name: "plus"}; {I: 11, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 106 to 108: ast.Var{id: 11, location: span{from: 63, to: 67}, name: "plus"}; {I: 11, N: "plus", UL: span{from: 63, to: 67}}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
  ide.Usage{id: 11, location: span{from: 63, to: 67}, name: "plus"}; {DL: "builtin", I: 11, N: "plus", UL: span{from: 63, to: 67}}
from 179 to 181: ast.Var{id: 11, location: span{from: 63, to: 67}, name: "plus"}; {S: span{from: 63, to: 67}}. Join(hl.segmentUsage, S: 180.usageLoc = 179.location) []
from 182 to hl.segmentUndefinedVar: ast.Var{id: 11, location: span{from: 63, to: 67}, name: "plus"}; {S: span{from: 63, to: 67}}. Subst({highlight: false, span: S, type: "undefined-var"}) []
  hl.segmentUndefinedVar{highlight: false, span: span{from: 63, to: 67}, type: "undefined-var"}; {S: span{from: 63, to: 67}}
from 184 to 185: ast.Var{id: 11, location: span{from: 63, to: 67}, name: "plus"}; {S: span{from: 63, to: 67}}. Join(hl.segmentUsageHL, S: 184.location = 183.usageLoc) []
from 0 to ast.Expr: ast.Var{id: 11, location: span{from: 63, to: 67}, name: "plus"}; {I: 11, S: span{from: 63, to: 67}}. Subst({id: I, location: S}) []
  ast.Expr{id: 11, location: span{from: 63, to: 67}}; {I: 11, S: span{from: 63, to: 67}}
from 44 to tc.typeVar: tc.typeVar{id: 11, location: span{from: 63, to: 67}, name: "plus"}; {I: 11, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Subst({id: I, type: T}) []
  tc.typeVar{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 108 to ide.Usage: ide.Usage{id: 11, location: span{from: 63, to: 67}, name: "plus"}; {DL: "builtin", I: 11, N: "plus", UL: span{from: 63, to: 67}}. Subst({definitionLoc: DL, name: N, usageLoc: UL}) []
  ide.Usage{definitionLoc: "builtin", name: "plus", usageLoc: span{from: 63, to: 67}}; {DL: "builtin", I: 11, N: "plus", UL: span{from: 63, to: 67}}
from hl.segmentUndefinedVar to 163: hl.segmentUndefinedVar{highlight: false, span: span{from: 63, to: 67}, type: "undefined-var"}; {S: span{from: 63, to: 67}}. Match(hl.segmentUndefinedVar{highlight: H, span: S, type: T}; {S: S}) []
  hl.segmentUndefinedVar{highlight: false, span: span{from: 63, to: 67}, type: "undefined-var"}; {H: false, S: span{from: 63, to: 67}, T: "undefined-var"}
from ast.Expr to 9: ast.Expr{id: 11, location: span{from: 63, to: 67}}; {I: 11, S: span{from: 63, to: 67}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 11, location: span{from: 63, to: 67}}; {I: 11, S: span{from: 63, to: 67}}
from ast.Expr to 12: ast.Expr{id: 11, location: span{from: 63, to: 67}}; {I: 11, S: span{from: 63, to: 67}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 11, location: span{from: 63, to: 67}}; {I: 11, S: span{from: 63, to: 67}}
from ast.Expr to 15: ast.Expr{id: 11, location: span{from: 63, to: 67}}; {I: 11, S: span{from: 63, to: 67}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 11, location: span{from: 63, to: 67}}; {I: 11, S: span{from: 63, to: 67}}
from ast.Expr to 18: ast.Expr{id: 11, location: span{from: 63, to: 67}}; {I: 11, S: span{from: 63, to: 67}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 11, location: span{from: 63, to: 67}}; {I: 11, S: span{from: 63, to: 67}}
from ast.Expr to 21: ast.Expr{id: 11, location: span{from: 63, to: 67}}; {I: 11, S: span{from: 63, to: 67}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 11, location: span{from: 63, to: 67}}; {I: 11, S: span{from: 63, to: 67}}
from ast.Expr to 102: ast.Expr{id: 11, location: span{from: 63, to: 67}}; {I: 11, S: span{from: 63, to: 67}}. Match(ast.Expr{id: UI, location: UL}; {I: UI, S: UL}) [UL]
  ast.Expr{id: 11, location: span{from: 63, to: 67}}; {UI: 11, UL: span{from: 63, to: 67}}
from ast.Expr to 118: ast.Expr{id: 11, location: span{from: 63, to: 67}}; {I: 11, S: span{from: 63, to: 67}}. Match(ast.Expr{id: I, location: span{from: Idx}}; {I: I}) [Idx]
  ast.Expr{id: 11, location: span{from: 63, to: 67}}; {I: 11, Idx: 63}
from ast.Expr to 123: ast.Expr{id: 11, location: span{from: 63, to: 67}}; {I: 11, S: span{from: 63, to: 67}}. Match(ast.Expr{id: I, location: span{from: FIdx, to: TIdx}}; {I: I}) []
  ast.Expr{id: 11, location: span{from: 63, to: 67}}; {FIdx: 63, I: 11, TIdx: 67}
from tc.typeVar to 30: tc.typeVar{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.typeVar{id: I, type: T}; {I: I, T: T}) []
  tc.typeVar{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from ide.Usage to 100: ide.Usage{definitionLoc: "builtin", name: "plus", usageLoc: span{from: 63, to: 67}}; {DL: "builtin", I: 11, N: "plus", UL: span{from: 63, to: 67}}. Match(ide.Usage{definitionLoc: VL, usageLoc: UL}; {DL: VL, UL: UL}) [VL]
  ide.Usage{definitionLoc: "builtin", name: "plus", usageLoc: span{from: 63, to: 67}}; {UL: span{from: 63, to: 67}, VL: "builtin"}
from ide.Usage to 130: ide.Usage{definitionLoc: "builtin", name: "plus", usageLoc: span{from: 63, to: 67}}; {DL: "builtin", I: 11, N: "plus", UL: span{from: 63, to: 67}}. Match(ide.Usage{definitionLoc: DL, usageLoc: span{from: FIdx, to: TIdx}}; {DL: DL}) []
  ide.Usage{definitionLoc: "builtin", name: "plus", usageLoc: span{from: 63, to: 67}}; {DL: "builtin", FIdx: 63, TIdx: 67}
from ide.Usage to 135: ide.Usage{definitionLoc: "builtin", name: "plus", usageLoc: span{from: 63, to: 67}}; {DL: "builtin", I: 11, N: "plus", UL: span{from: 63, to: 67}}. Match(ide.Usage{definitionLoc: span{from: FIdx, to: TIdx}, usageLoc: UL}; {UL: UL}) []
from ide.Usage to 144: ide.Usage{definitionLoc: "builtin", name: "plus", usageLoc: span{from: 63, to: 67}}; {DL: "builtin", I: 11, N: "plus", UL: span{from: 63, to: 67}}. Match(ide.Usage{definitionLoc: span{from: FIdx, to: TIdx}, usageLoc: UL}; {UL: UL}) []
from ide.Usage to 149: ide.Usage{definitionLoc: "builtin", name: "plus", usageLoc: span{from: 63, to: 67}}; {DL: "builtin", I: 11, N: "plus", UL: span{from: 63, to: 67}}. Match(ide.Usage{definitionLoc: DL, usageLoc: span{from: FIdx, to: TIdx}}; {DL: DL}) []
  ide.Usage{definitionLoc: "builtin", name: "plus", usageLoc: span{from: 63, to: 67}}; {DL: "builtin", FIdx: 63, TIdx: 67}
from ide.Usage to 155: ide.Usage{definitionLoc: "builtin", name: "plus", usageLoc: span{from: 63, to: 67}}; {DL: "builtin", I: 11, N: "plus", UL: span{from: 63, to: 67}}. Match(ide.Usage{definitionLoc: DL, usageLoc: UL}; {DL: DL, UL: UL}) [DL]
  ide.Usage{definitionLoc: "builtin", name: "plus", usageLoc: span{from: 63, to: 67}}; {DL: "builtin", UL: span{from: 63, to: 67}}
from ide.Usage to 171: ide.Usage{definitionLoc: "builtin", name: "plus", usageLoc: span{from: 63, to: 67}}; {DL: "builtin", I: 11, N: "plus", UL: span{from: 63, to: 67}}. Match(ide.Usage{definitionLoc: S}; {DL: S}) [S]
  ide.Usage{definitionLoc: "builtin", name: "plus", usageLoc: span{from: 63, to: 67}}; {S: "builtin"}
from ide.Usage to 180: ide.Usage{definitionLoc: "builtin", name: "plus", usageLoc: span{from: 63, to: 67}}; {DL: "builtin", I: 11, N: "plus", UL: span{from: 63, to: 67}}. Match(ide.Usage{usageLoc: S}; {UL: S}) [S]
  ide.Usage{definitionLoc: "builtin", name: "plus", usageLoc: span{from: 63, to: 67}}; {S: span{from: 63, to: 67}}
from 163 to 159: hl.segmentUndefinedVar{highlight: false, span: span{from: 63, to: 67}, type: "undefined-var"}; {H: false, S: span{from: 63, to: 67}, T: "undefined-var"}. Union []
  hl.segmentUndefinedVar{highlight: false, span: span{from: 63, to: 67}, type: "undefined-var"}; {H: false, S: span{from: 63, to: 67}, T: "undefined-var"}
from 9 to 11: ast.Expr{id: 11, location: span{from: 63, to: 67}}; {I: 11, S: span{from: 63, to: 67}}. Join(ast.ParentExpr, I: 10.bodyID = 9.id) []
from 12 to 14: ast.Expr{id: 11, location: span{from: 63, to: 67}}; {I: 11, S: span{from: 63, to: 67}}. Join(ast.ParentExpr, I: 13.bindingID = 12.id) []
from 15 to 17: ast.Expr{id: 11, location: span{from: 63, to: 67}}; {I: 11, S: span{from: 63, to: 67}}. Join(ast.ParentExpr, I: 16.funcID = 15.id) []
  ast.ParentExpr{id: 11, location: span{from: 63, to: 67}}; {I: 11, P: 10, S: span{from: 63, to: 67}}
from 18 to 20: ast.Expr{id: 11, location: span{from: 63, to: 67}}; {I: 11, S: span{from: 63, to: 67}}. Join(ast.ParentExpr, I: 19.argID = 18.id) []
from 21 to 23: ast.Expr{id: 11, location: span{from: 63, to: 67}}; {I: 11, S: span{from: 63, to: 67}}. Join(ast.ParentExpr, I: 22.body = 21.id) []
from 102 to 103: ast.Expr{id: 11, location: span{from: 63, to: 67}}; {UI: 11, UL: span{from: 63, to: 67}}. Join(ide.expectedTypeBinding, UL: 102.location = 101.usageLoc) [UI]
from 118 to 119: ast.Expr{id: 11, location: span{from: 63, to: 67}}; {I: 11, Idx: 63}. Join(ide.CurrentScope, Idx: 118.location.from = 117.idx) [I]
from 123 to 124: ast.Expr{id: 11, location: span{from: 63, to: 67}}; {FIdx: 63, I: 11, TIdx: 67}. Join(ide.CurrentType, ) [I]
from 30 to 24: tc.typeVar{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Union []
  tc.typeVar{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 100 to 101: ide.Usage{definitionLoc: "builtin", name: "plus", usageLoc: span{from: 63, to: 67}}; {UL: span{from: 63, to: 67}, VL: "builtin"}. Join(ide.expectedTypeBinding, VL: 100.definitionLoc = 99.varLoc) [UL]
from 130 to 131: ide.Usage{definitionLoc: "builtin", name: "plus", usageLoc: span{from: 63, to: 67}}; {DL: "builtin", FIdx: 63, TIdx: 67}. Join(ide.DefnForCursor, ) []
from 149 to 151: ide.Usage{definitionLoc: "builtin", name: "plus", usageLoc: span{from: 63, to: 67}}; {DL: "builtin", FIdx: 63, TIdx: 67}. Join(ide.CurrentUsageUsage, ) []
from 155 to 156: ide.Usage{definitionLoc: "builtin", name: "plus", usageLoc: span{from: 63, to: 67}}; {DL: "builtin", UL: span{from: 63, to: 67}}. Join(ide.CurrentUsageUsageIndirect, DL: 155.definitionLoc = 154.defnLoc) []
from 171 to 172: ide.Usage{definitionLoc: "builtin", name: "plus", usageLoc: span{from: 63, to: 67}}; {S: "builtin"}. Join(hl.segmentDefn, S: 171.definitionLoc = 170.span) []
from 180 to 181: ide.Usage{definitionLoc: "builtin", name: "plus", usageLoc: span{from: 63, to: 67}}; {S: span{from: 63, to: 67}}. Join(hl.segmentUsage, S: 180.usageLoc = 179.location) []
  hl.segmentUsage{definitionLoc: "builtin", name: "plus", usageLoc: span{from: 63, to: 67}}; {S: span{from: 63, to: 67}}
from 159 to hl.Segment: hl.segmentUndefinedVar{highlight: false, span: span{from: 63, to: 67}, type: "undefined-var"}; {H: false, S: span{from: 63, to: 67}, T: "undefined-var"}. Subst({highlight: H, span: S, type: T}) []
  hl.Segment{highlight: false, span: span{from: 63, to: 67}, type: "undefined-var"}; {H: false, S: span{from: 63, to: 67}, T: "undefined-var"}
from 17 to 8: ast.ParentExpr{id: 11, location: span{from: 63, to: 67}}; {I: 11, P: 10, S: span{from: 63, to: 67}}. Union []
  ast.ParentExpr{id: 11, location: span{from: 63, to: 67}}; {I: 11, P: 10, S: span{from: 63, to: 67}}
from 24 to tc.Type: tc.typeVar{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Subst({id: I, type: T}) []
  tc.Type{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 181 to hl.segmentUsage: hl.segmentUsage{definitionLoc: "builtin", name: "plus", usageLoc: span{from: 63, to: 67}}; {S: span{from: 63, to: 67}}. Subst({highlight: false, span: S, type: "usage"}) []
  hl.segmentUsage{highlight: false, span: span{from: 63, to: 67}, type: "usage"}; {S: span{from: 63, to: 67}}
from 8 to ast.ParentExpr: ast.ParentExpr{id: 11, location: span{from: 63, to: 67}}; {I: 11, P: 10, S: span{from: 63, to: 67}}. Subst({id: I, parent: P, span: S}) []
  ast.ParentExpr{id: 11, parent: 10, span: span{from: 63, to: 67}}; {I: 11, P: 10, S: span{from: 63, to: 67}}
from tc.Type to 35: tc.Type{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.Type{id: FID, type: tapp{from: F, to: T}}; {I: FID}) [FID]
  tc.Type{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {F: "int", FID: 11, T: tapp{from: "int", to: "int"}}
from tc.Type to 37: tc.Type{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.Type{id: AID, type: F}; {I: AID, T: F}) [F]
  tc.Type{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {AID: 11, F: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.Type to 40: tc.Type{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.Type{id: BID, type: T}; {I: BID, T: T}) [BID]
  tc.Type{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {BID: 11, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.Type to 48: tc.Type{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.Type{id: B, type: R}; {I: B, T: R}) []
  tc.Type{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {B: 11, R: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.Type to 62: tc.Type{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.Type{id: B, type: T}; {I: B, T: T}) [B]
  tc.Type{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {B: 11, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.Type to 96: tc.Type{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.Type{id: F, type: tapp{from: T}}; {I: F}) [F]
  tc.Type{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {F: 11, T: "int"}
from tc.Type to 125: tc.Type{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.Type{id: I, type: T}; {I: I, T: T}) [I]
  tc.Type{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from hl.segmentUsage to 162: hl.segmentUsage{highlight: false, span: span{from: 63, to: 67}, type: "usage"}; {S: span{from: 63, to: 67}}. Match(hl.segmentUsage{highlight: H, span: S, type: T}; {S: S}) []
  hl.segmentUsage{highlight: false, span: span{from: 63, to: 67}, type: "usage"}; {H: false, S: span{from: 63, to: 67}, T: "usage"}
from 35 to 36: tc.Type{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {F: "int", FID: 11, T: tapp{from: "int", to: "int"}}. Join(tc.typeFC, FID: 35.id = 34.funcID) [F]
  tc.typeFC{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {AID: 12, F: "int", FID: 11, I: 10, T: tapp{from: "int", to: "int"}}
from 37 to 38: tc.Type{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {AID: 11, F: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.typeFC, F: 37.type = 36.type.from) []
from 40 to 41: tc.Type{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {BID: 11, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.typeLet, BID: 40.id = 39.bodyID) []
from 48 to 49: tc.Type{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {B: 11, R: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.typeLambda, ) []
from 62 to 63: tc.Type{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {B: 11, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.scopeLet, B: 62.id = 61.bindingID) []
from 96 to 97: tc.Type{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {F: 11, T: "int"}. Join(ide.expectedType, F: 96.id = 95.funcID) []
  ide.expectedType{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {F: 11, I: 12, T: "int"}
from 125 to 126: tc.Type{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 11, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.CurrentType, I: 125.id = 124.id) []
from 162 to 159: hl.segmentUsage{highlight: false, span: span{from: 63, to: 67}, type: "usage"}; {H: false, S: span{from: 63, to: 67}, T: "usage"}. Union []
  hl.segmentUsage{highlight: false, span: span{from: 63, to: 67}, type: "usage"}; {H: false, S: span{from: 63, to: 67}, T: "usage"}
from 36 to 38: tc.typeFC{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {AID: 12, F: "int", FID: 11, I: 10, T: tapp{from: "int", to: "int"}}. Join(tc.typeFC, F: 37.type = 36.type.from) []
from 97 to 90: ide.expectedType{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {F: 11, I: 12, T: "int"}. Union []
  ide.expectedType{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {F: 11, I: 12, T: "int"}
from 159 to hl.Segment: hl.segmentUsage{highlight: false, span: span{from: 63, to: 67}, type: "usage"}; {H: false, S: span{from: 63, to: 67}, T: "usage"}. Subst({highlight: H, span: S, type: T}) []
  hl.Segment{highlight: false, span: span{from: 63, to: 67}, type: "usage"}; {H: false, S: span{from: 63, to: 67}, T: "usage"}
from 90 to ide.expectedType: ide.expectedType{id: 11, type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {F: 11, I: 12, T: "int"}. Subst({id: I, type: T}) []
  ide.expectedType{id: 12, type: "int"}; {F: 11, I: 12, T: "int"}
from ide.expectedType to 78: ide.expectedType{id: 12, type: "int"}; {F: 11, I: 12, T: "int"}. Match(ide.expectedType{id: I, type: T}; {I: I, T: T}) [I]
  ide.expectedType{id: 12, type: "int"}; {I: 12, T: "int"}
from ide.expectedType to 83: ide.expectedType{id: 12, type: "int"}; {F: 11, I: 12, T: "int"}. Match(ide.expectedType{id: I, type: TT}; {I: I, T: TT}) [I]
  ide.expectedType{id: 12, type: "int"}; {I: 12, TT: "int"}
from ide.expectedType to 93: ide.expectedType{id: 12, type: "int"}; {F: 11, I: 12, T: "int"}. Match(ide.expectedType{id: L, type: T}; {I: L, T: T}) [L]
  ide.expectedType{id: 12, type: "int"}; {L: 12, T: "int"}
from ide.expectedType to 104: ide.expectedType{id: 12, type: "int"}; {F: 11, I: 12, T: "int"}. Match(ide.expectedType{id: UI, type: T}; {I: UI, T: T}) [UI]
  ide.expectedType{id: 12, type: "int"}; {T: "int", UI: 12}
from 78 to 79: ide.expectedType{id: 12, type: "int"}; {I: 12, T: "int"}. Join(ide.suggestionVar, I: 78.id = 77.id) [I-T]
from 83 to 84: ide.expectedType{id: 12, type: "int"}; {I: 12, TT: "int"}. Join(ide.suggestionFunc, I: 83.id = 82.id) [I-TT]
from 93 to 94: ide.expectedType{id: 12, type: "int"}; {L: 12, T: "int"}. Join(ide.expectedType, L: 93.id = 92.id) []
from 104 to 105: ide.expectedType{id: 12, type: "int"}; {T: "int", UI: 12}. Join(ide.expectedTypeBinding, UI: 104.id = 103.id) []

ast.Var{id: 12, location: span{from: 68, to: 69}, name: "x"}.
----
text/emission-log
from null to ast.Var: ast.Var{id: 12, location: span{from: 68, to: 69}, name: "x"}; {}.  []
  ast.Var{id: 12, location: span{from: 68, to: 69}, name: "x"}; {}
from ast.Var to 3: ast.Var{id: 12, location: span{from: 68, to: 69}, name: "x"}; {}. Match(ast.Var{id: I, location: S}; {}) []
  ast.Var{id: 12, location: span{from: 68, to: 69}, name: "x"}; {I: 12, S: span{from: 68, to: 69}}
from ast.Var to 42: ast.Var{id: 12, location: span{from: 68, to: 69}, name: "x"}; {}. Match(ast.Var{id: I, name: N}; {}) [I-N]
  ast.Var{id: 12, location: span{from: 68, to: 69}, name: "x"}; {I: 12, N: "x"}
from ast.Var to 106: ast.Var{id: 12, location: span{from: 68, to: 69}, name: "x"}; {}. Match(ast.Var{id: I, location: UL, name: N}; {}) [I-N]
  ast.Var{id: 12, location: span{from: 68, to: 69}, name: "x"}; {I: 12, N: "x", UL: span{from: 68, to: 69}}
from ast.Var to 179: ast.Var{id: 12, location: span{from: 68, to: 69}, name: "x"}; {}. Match(ast.Var{location: S}; {}) [S]
  ast.Var{id: 12, location: span{from: 68, to: 69}, name: "x"}; {S: span{from: 68, to: 69}}
from ast.Var to 182: ast.Var{id: 12, location: span{from: 68, to: 69}, name: "x"}; {}. Match(ast.Var{location: S}; {}) []
  ast.Var{id: 12, location: span{from: 68, to: 69}, name: "x"}; {S: span{from: 68, to: 69}}
from ast.Var to 184: ast.Var{id: 12, location: span{from: 68, to: 69}, name: "x"}; {}. Match(ast.Var{location: S}; {}) [S]
  ast.Var{id: 12, location: span{from: 68, to: 69}, name: "x"}; {S: span{from: 68, to: 69}}
from 3 to 0: ast.Var{id: 12, location: span{from: 68, to: 69}, name: "x"}; {I: 12, S: span{from: 68, to: 69}}. Union []
  ast.Var{id: 12, location: span{from: 68, to: 69}, name: "x"}; {I: 12, S: span{from: 68, to: 69}}
from 42 to 44: ast.Var{id: 12, location: span{from: 68, to: 69}, name: "x"}; {I: 12, N: "x"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
  tc.typeVar{id: 12, location: span{from: 68, to: 69}, name: "x"}; {I: 12, N: "x", T: "int"}
from 106 to 108: ast.Var{id: 12, location: span{from: 68, to: 69}, name: "x"}; {I: 12, N: "x", UL: span{from: 68, to: 69}}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
  ide.Usage{id: 12, location: span{from: 68, to: 69}, name: "x"}; {DL: span{from: 4, to: 5}, I: 12, N: "x", UL: span{from: 68, to: 69}}
from 179 to 181: ast.Var{id: 12, location: span{from: 68, to: 69}, name: "x"}; {S: span{from: 68, to: 69}}. Join(hl.segmentUsage, S: 180.usageLoc = 179.location) []
from 182 to hl.segmentUndefinedVar: ast.Var{id: 12, location: span{from: 68, to: 69}, name: "x"}; {S: span{from: 68, to: 69}}. Subst({highlight: false, span: S, type: "undefined-var"}) []
  hl.segmentUndefinedVar{highlight: false, span: span{from: 68, to: 69}, type: "undefined-var"}; {S: span{from: 68, to: 69}}
from 184 to 185: ast.Var{id: 12, location: span{from: 68, to: 69}, name: "x"}; {S: span{from: 68, to: 69}}. Join(hl.segmentUsageHL, S: 184.location = 183.usageLoc) []
from 0 to ast.Expr: ast.Var{id: 12, location: span{from: 68, to: 69}, name: "x"}; {I: 12, S: span{from: 68, to: 69}}. Subst({id: I, location: S}) []
  ast.Expr{id: 12, location: span{from: 68, to: 69}}; {I: 12, S: span{from: 68, to: 69}}
from 44 to tc.typeVar: tc.typeVar{id: 12, location: span{from: 68, to: 69}, name: "x"}; {I: 12, N: "x", T: "int"}. Subst({id: I, type: T}) []
  tc.typeVar{id: 12, type: "int"}; {I: 12, N: "x", T: "int"}
from 108 to ide.Usage: ide.Usage{id: 12, location: span{from: 68, to: 69}, name: "x"}; {DL: span{from: 4, to: 5}, I: 12, N: "x", UL: span{from: 68, to: 69}}. Subst({definitionLoc: DL, name: N, usageLoc: UL}) []
  ide.Usage{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {DL: span{from: 4, to: 5}, I: 12, N: "x", UL: span{from: 68, to: 69}}
from hl.segmentUndefinedVar to 163: hl.segmentUndefinedVar{highlight: false, span: span{from: 68, to: 69}, type: "undefined-var"}; {S: span{from: 68, to: 69}}. Match(hl.segmentUndefinedVar{highlight: H, span: S, type: T}; {S: S}) []
  hl.segmentUndefinedVar{highlight: false, span: span{from: 68, to: 69}, type: "undefined-var"}; {H: false, S: span{from: 68, to: 69}, T: "undefined-var"}
from ast.Expr to 9: ast.Expr{id: 12, location: span{from: 68, to: 69}}; {I: 12, S: span{from: 68, to: 69}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 12, location: span{from: 68, to: 69}}; {I: 12, S: span{from: 68, to: 69}}
from ast.Expr to 12: ast.Expr{id: 12, location: span{from: 68, to: 69}}; {I: 12, S: span{from: 68, to: 69}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 12, location: span{from: 68, to: 69}}; {I: 12, S: span{from: 68, to: 69}}
from ast.Expr to 15: ast.Expr{id: 12, location: span{from: 68, to: 69}}; {I: 12, S: span{from: 68, to: 69}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 12, location: span{from: 68, to: 69}}; {I: 12, S: span{from: 68, to: 69}}
from ast.Expr to 18: ast.Expr{id: 12, location: span{from: 68, to: 69}}; {I: 12, S: span{from: 68, to: 69}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 12, location: span{from: 68, to: 69}}; {I: 12, S: span{from: 68, to: 69}}
from ast.Expr to 21: ast.Expr{id: 12, location: span{from: 68, to: 69}}; {I: 12, S: span{from: 68, to: 69}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 12, location: span{from: 68, to: 69}}; {I: 12, S: span{from: 68, to: 69}}
from ast.Expr to 102: ast.Expr{id: 12, location: span{from: 68, to: 69}}; {I: 12, S: span{from: 68, to: 69}}. Match(ast.Expr{id: UI, location: UL}; {I: UI, S: UL}) [UL]
  ast.Expr{id: 12, location: span{from: 68, to: 69}}; {UI: 12, UL: span{from: 68, to: 69}}
from ast.Expr to 118: ast.Expr{id: 12, location: span{from: 68, to: 69}}; {I: 12, S: span{from: 68, to: 69}}. Match(ast.Expr{id: I, location: span{from: Idx}}; {I: I}) [Idx]
  ast.Expr{id: 12, location: span{from: 68, to: 69}}; {I: 12, Idx: 68}
from ast.Expr to 123: ast.Expr{id: 12, location: span{from: 68, to: 69}}; {I: 12, S: span{from: 68, to: 69}}. Match(ast.Expr{id: I, location: span{from: FIdx, to: TIdx}}; {I: I}) []
  ast.Expr{id: 12, location: span{from: 68, to: 69}}; {FIdx: 68, I: 12, TIdx: 69}
from tc.typeVar to 30: tc.typeVar{id: 12, type: "int"}; {I: 12, N: "x", T: "int"}. Match(tc.typeVar{id: I, type: T}; {I: I, T: T}) []
  tc.typeVar{id: 12, type: "int"}; {I: 12, T: "int"}
from ide.Usage to 100: ide.Usage{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {DL: span{from: 4, to: 5}, I: 12, N: "x", UL: span{from: 68, to: 69}}. Match(ide.Usage{definitionLoc: VL, usageLoc: UL}; {DL: VL, UL: UL}) [VL]
  ide.Usage{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {UL: span{from: 68, to: 69}, VL: span{from: 4, to: 5}}
from ide.Usage to 130: ide.Usage{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {DL: span{from: 4, to: 5}, I: 12, N: "x", UL: span{from: 68, to: 69}}. Match(ide.Usage{definitionLoc: DL, usageLoc: span{from: FIdx, to: TIdx}}; {DL: DL}) []
  ide.Usage{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {DL: span{from: 4, to: 5}, FIdx: 68, TIdx: 69}
from ide.Usage to 135: ide.Usage{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {DL: span{from: 4, to: 5}, I: 12, N: "x", UL: span{from: 68, to: 69}}. Match(ide.Usage{definitionLoc: span{from: FIdx, to: TIdx}, usageLoc: UL}; {UL: UL}) []
  ide.Usage{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {FIdx: 4, TIdx: 5, UL: span{from: 68, to: 69}}
from ide.Usage to 144: ide.Usage{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {DL: span{from: 4, to: 5}, I: 12, N: "x", UL: span{from: 68, to: 69}}. Match(ide.Usage{definitionLoc: span{from: FIdx, to: TIdx}, usageLoc: UL}; {UL: UL}) []
  ide.Usage{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {FIdx: 4, TIdx: 5, UL: span{from: 68, to: 69}}
from ide.Usage to 149: ide.Usage{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {DL: span{from: 4, to: 5}, I: 12, N: "x", UL: span{from: 68, to: 69}}. Match(ide.Usage{definitionLoc: DL, usageLoc: span{from: FIdx, to: TIdx}}; {DL: DL}) []
  ide.Usage{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {DL: span{from: 4, to: 5}, FIdx: 68, TIdx: 69}
from ide.Usage to 155: ide.Usage{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {DL: span{from: 4, to: 5}, I: 12, N: "x", UL: span{from: 68, to: 69}}. Match(ide.Usage{definitionLoc: DL, usageLoc: UL}; {DL: DL, UL: UL}) [DL]
  ide.Usage{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {DL: span{from: 4, to: 5}, UL: span{from: 68, to: 69}}
from ide.Usage to 171: ide.Usage{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {DL: span{from: 4, to: 5}, I: 12, N: "x", UL: span{from: 68, to: 69}}. Match(ide.Usage{definitionLoc: S}; {DL: S}) [S]
  ide.Usage{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {S: span{from: 4, to: 5}}
from ide.Usage to 180: ide.Usage{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {DL: span{from: 4, to: 5}, I: 12, N: "x", UL: span{from: 68, to: 69}}. Match(ide.Usage{usageLoc: S}; {UL: S}) [S]
  ide.Usage{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {S: span{from: 68, to: 69}}
from 163 to 159: hl.segmentUndefinedVar{highlight: false, span: span{from: 68, to: 69}, type: "undefined-var"}; {H: false, S: span{from: 68, to: 69}, T: "undefined-var"}. Union []
  hl.segmentUndefinedVar{highlight: false, span: span{from: 68, to: 69}, type: "undefined-var"}; {H: false, S: span{from: 68, to: 69}, T: "undefined-var"}
from 9 to 11: ast.Expr{id: 12, location: span{from: 68, to: 69}}; {I: 12, S: span{from: 68, to: 69}}. Join(ast.ParentExpr, I: 10.bodyID = 9.id) []
from 12 to 14: ast.Expr{id: 12, location: span{from: 68, to: 69}}; {I: 12, S: span{from: 68, to: 69}}. Join(ast.ParentExpr, I: 13.bindingID = 12.id) []
from 15 to 17: ast.Expr{id: 12, location: span{from: 68, to: 69}}; {I: 12, S: span{from: 68, to: 69}}. Join(ast.ParentExpr, I: 16.funcID = 15.id) []
from 18 to 20: ast.Expr{id: 12, location: span{from: 68, to: 69}}; {I: 12, S: span{from: 68, to: 69}}. Join(ast.ParentExpr, I: 19.argID = 18.id) []
  ast.ParentExpr{id: 12, location: span{from: 68, to: 69}}; {I: 12, P: 10, S: span{from: 68, to: 69}}
from 21 to 23: ast.Expr{id: 12, location: span{from: 68, to: 69}}; {I: 12, S: span{from: 68, to: 69}}. Join(ast.ParentExpr, I: 22.body = 21.id) []
from 102 to 103: ast.Expr{id: 12, location: span{from: 68, to: 69}}; {UI: 12, UL: span{from: 68, to: 69}}. Join(ide.expectedTypeBinding, UL: 102.location = 101.usageLoc) [UI]
from 118 to 119: ast.Expr{id: 12, location: span{from: 68, to: 69}}; {I: 12, Idx: 68}. Join(ide.CurrentScope, Idx: 118.location.from = 117.idx) [I]
from 123 to 124: ast.Expr{id: 12, location: span{from: 68, to: 69}}; {FIdx: 68, I: 12, TIdx: 69}. Join(ide.CurrentType, ) [I]
from 30 to 24: tc.typeVar{id: 12, type: "int"}; {I: 12, T: "int"}. Union []
  tc.typeVar{id: 12, type: "int"}; {I: 12, T: "int"}
from 100 to 101: ide.Usage{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {UL: span{from: 68, to: 69}, VL: span{from: 4, to: 5}}. Join(ide.expectedTypeBinding, VL: 100.definitionLoc = 99.varLoc) [UL]
  ide.expectedTypeBinding{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {I: 1, UL: span{from: 68, to: 69}, VL: span{from: 4, to: 5}}
from 130 to 131: ide.Usage{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {DL: span{from: 4, to: 5}, FIdx: 68, TIdx: 69}. Join(ide.DefnForCursor, ) []
from 135 to 136: ide.Usage{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {FIdx: 4, TIdx: 5, UL: span{from: 68, to: 69}}. Join(ide.UsageForCursor, ) []
from 144 to 146: ide.Usage{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {FIdx: 4, TIdx: 5, UL: span{from: 68, to: 69}}. Join(ide.CurrentUsageDefn, ) []
from 149 to 151: ide.Usage{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {DL: span{from: 4, to: 5}, FIdx: 68, TIdx: 69}. Join(ide.CurrentUsageUsage, ) []
from 155 to 156: ide.Usage{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {DL: span{from: 4, to: 5}, UL: span{from: 68, to: 69}}. Join(ide.CurrentUsageUsageIndirect, DL: 155.definitionLoc = 154.defnLoc) []
from 171 to 172: ide.Usage{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {S: span{from: 4, to: 5}}. Join(hl.segmentDefn, S: 171.definitionLoc = 170.span) []
  hl.segmentDefn{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {S: span{from: 4, to: 5}}
from 180 to 181: ide.Usage{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {S: span{from: 68, to: 69}}. Join(hl.segmentUsage, S: 180.usageLoc = 179.location) []
  hl.segmentUsage{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {S: span{from: 68, to: 69}}
from 159 to hl.Segment: hl.segmentUndefinedVar{highlight: false, span: span{from: 68, to: 69}, type: "undefined-var"}; {H: false, S: span{from: 68, to: 69}, T: "undefined-var"}. Subst({highlight: H, span: S, type: T}) []
  hl.Segment{highlight: false, span: span{from: 68, to: 69}, type: "undefined-var"}; {H: false, S: span{from: 68, to: 69}, T: "undefined-var"}
from 20 to 8: ast.ParentExpr{id: 12, location: span{from: 68, to: 69}}; {I: 12, P: 10, S: span{from: 68, to: 69}}. Union []
  ast.ParentExpr{id: 12, location: span{from: 68, to: 69}}; {I: 12, P: 10, S: span{from: 68, to: 69}}
from 24 to tc.Type: tc.typeVar{id: 12, type: "int"}; {I: 12, T: "int"}. Subst({id: I, type: T}) []
  tc.Type{id: 12, type: "int"}; {I: 12, T: "int"}
from 101 to 103: ide.expectedTypeBinding{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {I: 1, UL: span{from: 68, to: 69}, VL: span{from: 4, to: 5}}. Join(ide.expectedTypeBinding, UL: 102.location = 101.usageLoc) [UI]
  ide.expectedTypeBinding{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {I: 1, UI: 12, UL: span{from: 68, to: 69}, VL: span{from: 4, to: 5}}
from 172 to hl.segmentDefn: hl.segmentDefn{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {S: span{from: 4, to: 5}}. Subst({highlight: false, span: S, type: "defn"}) []
  hl.segmentDefn{highlight: false, span: span{from: 4, to: 5}, type: "defn"}; {S: span{from: 4, to: 5}}
from 181 to hl.segmentUsage: hl.segmentUsage{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {S: span{from: 68, to: 69}}. Subst({highlight: false, span: S, type: "usage"}) []
  hl.segmentUsage{highlight: false, span: span{from: 68, to: 69}, type: "usage"}; {S: span{from: 68, to: 69}}
from 8 to ast.ParentExpr: ast.ParentExpr{id: 12, location: span{from: 68, to: 69}}; {I: 12, P: 10, S: span{from: 68, to: 69}}. Subst({id: I, parent: P, span: S}) []
  ast.ParentExpr{id: 12, parent: 10, span: span{from: 68, to: 69}}; {I: 12, P: 10, S: span{from: 68, to: 69}}
from tc.Type to 35: tc.Type{id: 12, type: "int"}; {I: 12, T: "int"}. Match(tc.Type{id: FID, type: tapp{from: F, to: T}}; {I: FID}) [FID]
from tc.Type to 37: tc.Type{id: 12, type: "int"}; {I: 12, T: "int"}. Match(tc.Type{id: AID, type: F}; {I: AID, T: F}) [F]
  tc.Type{id: 12, type: "int"}; {AID: 12, F: "int"}
from tc.Type to 40: tc.Type{id: 12, type: "int"}; {I: 12, T: "int"}. Match(tc.Type{id: BID, type: T}; {I: BID, T: T}) [BID]
  tc.Type{id: 12, type: "int"}; {BID: 12, T: "int"}
from tc.Type to 48: tc.Type{id: 12, type: "int"}; {I: 12, T: "int"}. Match(tc.Type{id: B, type: R}; {I: B, T: R}) []
  tc.Type{id: 12, type: "int"}; {B: 12, R: "int"}
from tc.Type to 62: tc.Type{id: 12, type: "int"}; {I: 12, T: "int"}. Match(tc.Type{id: B, type: T}; {I: B, T: T}) [B]
  tc.Type{id: 12, type: "int"}; {B: 12, T: "int"}
from tc.Type to 96: tc.Type{id: 12, type: "int"}; {I: 12, T: "int"}. Match(tc.Type{id: F, type: tapp{from: T}}; {I: F}) [F]
from tc.Type to 125: tc.Type{id: 12, type: "int"}; {I: 12, T: "int"}. Match(tc.Type{id: I, type: T}; {I: I, T: T}) [I]
  tc.Type{id: 12, type: "int"}; {I: 12, T: "int"}
from 103 to 105: ide.expectedTypeBinding{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {I: 1, UI: 12, UL: span{from: 68, to: 69}, VL: span{from: 4, to: 5}}. Join(ide.expectedTypeBinding, UI: 104.id = 103.id) []
  ide.expectedTypeBinding{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {I: 1, T: "int", UI: 12, UL: span{from: 68, to: 69}, VL: span{from: 4, to: 5}}
from hl.segmentDefn to 160: hl.segmentDefn{highlight: false, span: span{from: 4, to: 5}, type: "defn"}; {S: span{from: 4, to: 5}}. Match(hl.segmentDefn{highlight: H, span: S, type: T}; {S: S}) []
  hl.segmentDefn{highlight: false, span: span{from: 4, to: 5}, type: "defn"}; {H: false, S: span{from: 4, to: 5}, T: "defn"}
from hl.segmentUsage to 162: hl.segmentUsage{highlight: false, span: span{from: 68, to: 69}, type: "usage"}; {S: span{from: 68, to: 69}}. Match(hl.segmentUsage{highlight: H, span: S, type: T}; {S: S}) []
  hl.segmentUsage{highlight: false, span: span{from: 68, to: 69}, type: "usage"}; {H: false, S: span{from: 68, to: 69}, T: "usage"}
from 37 to 38: tc.Type{id: 12, type: "int"}; {AID: 12, F: "int"}. Join(tc.typeFC, F: 37.type = 36.type.from) []
  tc.typeFC{id: 12, type: "int"}; {AID: 12, F: "int", FID: 11, I: 10, T: tapp{from: "int", to: "int"}}
from 40 to 41: tc.Type{id: 12, type: "int"}; {BID: 12, T: "int"}. Join(tc.typeLet, BID: 40.id = 39.bodyID) []
from 48 to 49: tc.Type{id: 12, type: "int"}; {B: 12, R: "int"}. Join(tc.typeLambda, ) []
from 62 to 63: tc.Type{id: 12, type: "int"}; {B: 12, T: "int"}. Join(tc.scopeLet, B: 62.id = 61.bindingID) []
from 125 to 126: tc.Type{id: 12, type: "int"}; {I: 12, T: "int"}. Join(ide.CurrentType, I: 125.id = 124.id) []
from 105 to ide.expectedTypeBinding: ide.expectedTypeBinding{definitionLoc: span{from: 4, to: 5}, name: "x", usageLoc: span{from: 68, to: 69}}; {I: 1, T: "int", UI: 12, UL: span{from: 68, to: 69}, VL: span{from: 4, to: 5}}. Subst({id: I, type: T}) []
  ide.expectedTypeBinding{id: 1, type: "int"}; {I: 1, T: "int", UI: 12, UL: span{from: 68, to: 69}, VL: span{from: 4, to: 5}}
from 160 to 159: hl.segmentDefn{highlight: false, span: span{from: 4, to: 5}, type: "defn"}; {H: false, S: span{from: 4, to: 5}, T: "defn"}. Union []
  hl.segmentDefn{highlight: false, span: span{from: 4, to: 5}, type: "defn"}; {H: false, S: span{from: 4, to: 5}, T: "defn"}
from 162 to 159: hl.segmentUsage{highlight: false, span: span{from: 68, to: 69}, type: "usage"}; {H: false, S: span{from: 68, to: 69}, T: "usage"}. Union []
  hl.segmentUsage{highlight: false, span: span{from: 68, to: 69}, type: "usage"}; {H: false, S: span{from: 68, to: 69}, T: "usage"}
from 38 to tc.typeFC: tc.typeFC{id: 12, type: "int"}; {AID: 12, F: "int", FID: 11, I: 10, T: tapp{from: "int", to: "int"}}. Subst({id: I, type: T}) []
  tc.typeFC{id: 10, type: tapp{from: "int", to: "int"}}; {AID: 12, F: "int", FID: 11, I: 10, T: tapp{from: "int", to: "int"}}
from ide.expectedTypeBinding to 98: ide.expectedTypeBinding{id: 1, type: "int"}; {I: 1, T: "int", UI: 12, UL: span{from: 68, to: 69}, VL: span{from: 4, to: 5}}. Match(ide.expectedTypeBinding{id: I, type: T}; {I: I, T: T}) []
  ide.expectedTypeBinding{id: 1, type: "int"}; {I: 1, T: "int"}
from 159 to hl.Segment: hl.segmentDefn{highlight: false, span: span{from: 4, to: 5}, type: "defn"}; {H: false, S: span{from: 4, to: 5}, T: "defn"}. Subst({highlight: H, span: S, type: T}) []
  hl.Segment{highlight: false, span: span{from: 4, to: 5}, type: "defn"}; {H: false, S: span{from: 4, to: 5}, T: "defn"}
from 159 to hl.Segment: hl.segmentUsage{highlight: false, span: span{from: 68, to: 69}, type: "usage"}; {H: false, S: span{from: 68, to: 69}, T: "usage"}. Subst({highlight: H, span: S, type: T}) []
  hl.Segment{highlight: false, span: span{from: 68, to: 69}, type: "usage"}; {H: false, S: span{from: 68, to: 69}, T: "usage"}
from tc.typeFC to 28: tc.typeFC{id: 10, type: tapp{from: "int", to: "int"}}; {AID: 12, F: "int", FID: 11, I: 10, T: tapp{from: "int", to: "int"}}. Match(tc.typeFC{id: I, type: T}; {I: I, T: T}) []
  tc.typeFC{id: 10, type: tapp{from: "int", to: "int"}}; {I: 10, T: tapp{from: "int", to: "int"}}
from 98 to 90: ide.expectedTypeBinding{id: 1, type: "int"}; {I: 1, T: "int"}. Union []
  ide.expectedTypeBinding{id: 1, type: "int"}; {I: 1, T: "int"}
from 28 to 24: tc.typeFC{id: 10, type: tapp{from: "int", to: "int"}}; {I: 10, T: tapp{from: "int", to: "int"}}. Union []
  tc.typeFC{id: 10, type: tapp{from: "int", to: "int"}}; {I: 10, T: tapp{from: "int", to: "int"}}
from 90 to ide.expectedType: ide.expectedTypeBinding{id: 1, type: "int"}; {I: 1, T: "int"}. Subst({id: I, type: T}) []
  ide.expectedType{id: 1, type: "int"}; {I: 1, T: "int"}
from 24 to tc.Type: tc.typeFC{id: 10, type: tapp{from: "int", to: "int"}}; {I: 10, T: tapp{from: "int", to: "int"}}. Subst({id: I, type: T}) []
  tc.Type{id: 10, type: tapp{from: "int", to: "int"}}; {I: 10, T: tapp{from: "int", to: "int"}}
from ide.expectedType to 78: ide.expectedType{id: 1, type: "int"}; {I: 1, T: "int"}. Match(ide.expectedType{id: I, type: T}; {I: I, T: T}) [I]
  ide.expectedType{id: 1, type: "int"}; {I: 1, T: "int"}
from ide.expectedType to 83: ide.expectedType{id: 1, type: "int"}; {I: 1, T: "int"}. Match(ide.expectedType{id: I, type: TT}; {I: I, T: TT}) [I]
  ide.expectedType{id: 1, type: "int"}; {I: 1, TT: "int"}
from ide.expectedType to 93: ide.expectedType{id: 1, type: "int"}; {I: 1, T: "int"}. Match(ide.expectedType{id: L, type: T}; {I: L, T: T}) [L]
  ide.expectedType{id: 1, type: "int"}; {L: 1, T: "int"}
from ide.expectedType to 104: ide.expectedType{id: 1, type: "int"}; {I: 1, T: "int"}. Match(ide.expectedType{id: UI, type: T}; {I: UI, T: T}) [UI]
  ide.expectedType{id: 1, type: "int"}; {T: "int", UI: 1}
from tc.Type to 35: tc.Type{id: 10, type: tapp{from: "int", to: "int"}}; {I: 10, T: tapp{from: "int", to: "int"}}. Match(tc.Type{id: FID, type: tapp{from: F, to: T}}; {I: FID}) [FID]
  tc.Type{id: 10, type: tapp{from: "int", to: "int"}}; {F: "int", FID: 10, T: "int"}
from tc.Type to 37: tc.Type{id: 10, type: tapp{from: "int", to: "int"}}; {I: 10, T: tapp{from: "int", to: "int"}}. Match(tc.Type{id: AID, type: F}; {I: AID, T: F}) [F]
  tc.Type{id: 10, type: tapp{from: "int", to: "int"}}; {AID: 10, F: tapp{from: "int", to: "int"}}
from tc.Type to 40: tc.Type{id: 10, type: tapp{from: "int", to: "int"}}; {I: 10, T: tapp{from: "int", to: "int"}}. Match(tc.Type{id: BID, type: T}; {I: BID, T: T}) [BID]
  tc.Type{id: 10, type: tapp{from: "int", to: "int"}}; {BID: 10, T: tapp{from: "int", to: "int"}}
from tc.Type to 48: tc.Type{id: 10, type: tapp{from: "int", to: "int"}}; {I: 10, T: tapp{from: "int", to: "int"}}. Match(tc.Type{id: B, type: R}; {I: B, T: R}) []
  tc.Type{id: 10, type: tapp{from: "int", to: "int"}}; {B: 10, R: tapp{from: "int", to: "int"}}
from tc.Type to 62: tc.Type{id: 10, type: tapp{from: "int", to: "int"}}; {I: 10, T: tapp{from: "int", to: "int"}}. Match(tc.Type{id: B, type: T}; {I: B, T: T}) [B]
  tc.Type{id: 10, type: tapp{from: "int", to: "int"}}; {B: 10, T: tapp{from: "int", to: "int"}}
from tc.Type to 96: tc.Type{id: 10, type: tapp{from: "int", to: "int"}}; {I: 10, T: tapp{from: "int", to: "int"}}. Match(tc.Type{id: F, type: tapp{from: T}}; {I: F}) [F]
  tc.Type{id: 10, type: tapp{from: "int", to: "int"}}; {F: 10, T: "int"}
from tc.Type to 125: tc.Type{id: 10, type: tapp{from: "int", to: "int"}}; {I: 10, T: tapp{from: "int", to: "int"}}. Match(tc.Type{id: I, type: T}; {I: I, T: T}) [I]
  tc.Type{id: 10, type: tapp{from: "int", to: "int"}}; {I: 10, T: tapp{from: "int", to: "int"}}
from 78 to 79: ide.expectedType{id: 1, type: "int"}; {I: 1, T: "int"}. Join(ide.suggestionVar, I: 78.id = 77.id) [I-T]
from 83 to 84: ide.expectedType{id: 1, type: "int"}; {I: 1, TT: "int"}. Join(ide.suggestionFunc, I: 83.id = 82.id) [I-TT]
from 93 to 94: ide.expectedType{id: 1, type: "int"}; {L: 1, T: "int"}. Join(ide.expectedType, L: 93.id = 92.id) []
from 104 to 105: ide.expectedType{id: 1, type: "int"}; {T: "int", UI: 1}. Join(ide.expectedTypeBinding, UI: 104.id = 103.id) []
from 35 to 36: tc.Type{id: 10, type: tapp{from: "int", to: "int"}}; {F: "int", FID: 10, T: "int"}. Join(tc.typeFC, FID: 35.id = 34.funcID) [F]
  tc.typeFC{id: 10, type: tapp{from: "int", to: "int"}}; {AID: 13, F: "int", FID: 10, I: 9, T: "int"}
from 37 to 38: tc.Type{id: 10, type: tapp{from: "int", to: "int"}}; {AID: 10, F: tapp{from: "int", to: "int"}}. Join(tc.typeFC, F: 37.type = 36.type.from) []
from 40 to 41: tc.Type{id: 10, type: tapp{from: "int", to: "int"}}; {BID: 10, T: tapp{from: "int", to: "int"}}. Join(tc.typeLet, BID: 40.id = 39.bodyID) []
from 48 to 49: tc.Type{id: 10, type: tapp{from: "int", to: "int"}}; {B: 10, R: tapp{from: "int", to: "int"}}. Join(tc.typeLambda, ) []
from 62 to 63: tc.Type{id: 10, type: tapp{from: "int", to: "int"}}; {B: 10, T: tapp{from: "int", to: "int"}}. Join(tc.scopeLet, B: 62.id = 61.bindingID) []
from 96 to 97: tc.Type{id: 10, type: tapp{from: "int", to: "int"}}; {F: 10, T: "int"}. Join(ide.expectedType, F: 96.id = 95.funcID) []
  ide.expectedType{id: 10, type: tapp{from: "int", to: "int"}}; {F: 10, I: 13, T: "int"}
from 125 to 126: tc.Type{id: 10, type: tapp{from: "int", to: "int"}}; {I: 10, T: tapp{from: "int", to: "int"}}. Join(ide.CurrentType, I: 125.id = 124.id) []
from 36 to 38: tc.typeFC{id: 10, type: tapp{from: "int", to: "int"}}; {AID: 13, F: "int", FID: 10, I: 9, T: "int"}. Join(tc.typeFC, F: 37.type = 36.type.from) []
from 97 to 90: ide.expectedType{id: 10, type: tapp{from: "int", to: "int"}}; {F: 10, I: 13, T: "int"}. Union []
  ide.expectedType{id: 10, type: tapp{from: "int", to: "int"}}; {F: 10, I: 13, T: "int"}
from 90 to ide.expectedType: ide.expectedType{id: 10, type: tapp{from: "int", to: "int"}}; {F: 10, I: 13, T: "int"}. Subst({id: I, type: T}) []
  ide.expectedType{id: 13, type: "int"}; {F: 10, I: 13, T: "int"}
from ide.expectedType to 78: ide.expectedType{id: 13, type: "int"}; {F: 10, I: 13, T: "int"}. Match(ide.expectedType{id: I, type: T}; {I: I, T: T}) [I]
  ide.expectedType{id: 13, type: "int"}; {I: 13, T: "int"}
from ide.expectedType to 83: ide.expectedType{id: 13, type: "int"}; {F: 10, I: 13, T: "int"}. Match(ide.expectedType{id: I, type: TT}; {I: I, T: TT}) [I]
  ide.expectedType{id: 13, type: "int"}; {I: 13, TT: "int"}
from ide.expectedType to 93: ide.expectedType{id: 13, type: "int"}; {F: 10, I: 13, T: "int"}. Match(ide.expectedType{id: L, type: T}; {I: L, T: T}) [L]
  ide.expectedType{id: 13, type: "int"}; {L: 13, T: "int"}
from ide.expectedType to 104: ide.expectedType{id: 13, type: "int"}; {F: 10, I: 13, T: "int"}. Match(ide.expectedType{id: UI, type: T}; {I: UI, T: T}) [UI]
  ide.expectedType{id: 13, type: "int"}; {T: "int", UI: 13}
from 78 to 79: ide.expectedType{id: 13, type: "int"}; {I: 13, T: "int"}. Join(ide.suggestionVar, I: 78.id = 77.id) [I-T]
from 83 to 84: ide.expectedType{id: 13, type: "int"}; {I: 13, TT: "int"}. Join(ide.suggestionFunc, I: 83.id = 82.id) [I-TT]
from 93 to 94: ide.expectedType{id: 13, type: "int"}; {L: 13, T: "int"}. Join(ide.expectedType, L: 93.id = 92.id) []
from 104 to 105: ide.expectedType{id: 13, type: "int"}; {T: "int", UI: 13}. Join(ide.expectedTypeBinding, UI: 104.id = 103.id) []

ast.Var{id: 13, location: span{from: 71, to: 72}, name: "y"}.
----
text/emission-log
from null to ast.Var: ast.Var{id: 13, location: span{from: 71, to: 72}, name: "y"}; {}.  []
  ast.Var{id: 13, location: span{from: 71, to: 72}, name: "y"}; {}
from ast.Var to 3: ast.Var{id: 13, location: span{from: 71, to: 72}, name: "y"}; {}. Match(ast.Var{id: I, location: S}; {}) []
  ast.Var{id: 13, location: span{from: 71, to: 72}, name: "y"}; {I: 13, S: span{from: 71, to: 72}}
from ast.Var to 42: ast.Var{id: 13, location: span{from: 71, to: 72}, name: "y"}; {}. Match(ast.Var{id: I, name: N}; {}) [I-N]
  ast.Var{id: 13, location: span{from: 71, to: 72}, name: "y"}; {I: 13, N: "y"}
from ast.Var to 106: ast.Var{id: 13, location: span{from: 71, to: 72}, name: "y"}; {}. Match(ast.Var{id: I, location: UL, name: N}; {}) [I-N]
  ast.Var{id: 13, location: span{from: 71, to: 72}, name: "y"}; {I: 13, N: "y", UL: span{from: 71, to: 72}}
from ast.Var to 179: ast.Var{id: 13, location: span{from: 71, to: 72}, name: "y"}; {}. Match(ast.Var{location: S}; {}) [S]
  ast.Var{id: 13, location: span{from: 71, to: 72}, name: "y"}; {S: span{from: 71, to: 72}}
from ast.Var to 182: ast.Var{id: 13, location: span{from: 71, to: 72}, name: "y"}; {}. Match(ast.Var{location: S}; {}) []
  ast.Var{id: 13, location: span{from: 71, to: 72}, name: "y"}; {S: span{from: 71, to: 72}}
from ast.Var to 184: ast.Var{id: 13, location: span{from: 71, to: 72}, name: "y"}; {}. Match(ast.Var{location: S}; {}) [S]
  ast.Var{id: 13, location: span{from: 71, to: 72}, name: "y"}; {S: span{from: 71, to: 72}}
from 3 to 0: ast.Var{id: 13, location: span{from: 71, to: 72}, name: "y"}; {I: 13, S: span{from: 71, to: 72}}. Union []
  ast.Var{id: 13, location: span{from: 71, to: 72}, name: "y"}; {I: 13, S: span{from: 71, to: 72}}
from 42 to 44: ast.Var{id: 13, location: span{from: 71, to: 72}, name: "y"}; {I: 13, N: "y"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
  tc.typeVar{id: 13, location: span{from: 71, to: 72}, name: "y"}; {I: 13, N: "y", T: "int"}
from 106 to 108: ast.Var{id: 13, location: span{from: 71, to: 72}, name: "y"}; {I: 13, N: "y", UL: span{from: 71, to: 72}}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
  ide.Usage{id: 13, location: span{from: 71, to: 72}, name: "y"}; {DL: span{from: 17, to: 18}, I: 13, N: "y", UL: span{from: 71, to: 72}}
from 179 to 181: ast.Var{id: 13, location: span{from: 71, to: 72}, name: "y"}; {S: span{from: 71, to: 72}}. Join(hl.segmentUsage, S: 180.usageLoc = 179.location) []
from 182 to hl.segmentUndefinedVar: ast.Var{id: 13, location: span{from: 71, to: 72}, name: "y"}; {S: span{from: 71, to: 72}}. Subst({highlight: false, span: S, type: "undefined-var"}) []
  hl.segmentUndefinedVar{highlight: false, span: span{from: 71, to: 72}, type: "undefined-var"}; {S: span{from: 71, to: 72}}
from 184 to 185: ast.Var{id: 13, location: span{from: 71, to: 72}, name: "y"}; {S: span{from: 71, to: 72}}. Join(hl.segmentUsageHL, S: 184.location = 183.usageLoc) []
from 0 to ast.Expr: ast.Var{id: 13, location: span{from: 71, to: 72}, name: "y"}; {I: 13, S: span{from: 71, to: 72}}. Subst({id: I, location: S}) []
  ast.Expr{id: 13, location: span{from: 71, to: 72}}; {I: 13, S: span{from: 71, to: 72}}
from 44 to tc.typeVar: tc.typeVar{id: 13, location: span{from: 71, to: 72}, name: "y"}; {I: 13, N: "y", T: "int"}. Subst({id: I, type: T}) []
  tc.typeVar{id: 13, type: "int"}; {I: 13, N: "y", T: "int"}
from 108 to ide.Usage: ide.Usage{id: 13, location: span{from: 71, to: 72}, name: "y"}; {DL: span{from: 17, to: 18}, I: 13, N: "y", UL: span{from: 71, to: 72}}. Subst({definitionLoc: DL, name: N, usageLoc: UL}) []
  ide.Usage{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {DL: span{from: 17, to: 18}, I: 13, N: "y", UL: span{from: 71, to: 72}}
from hl.segmentUndefinedVar to 163: hl.segmentUndefinedVar{highlight: false, span: span{from: 71, to: 72}, type: "undefined-var"}; {S: span{from: 71, to: 72}}. Match(hl.segmentUndefinedVar{highlight: H, span: S, type: T}; {S: S}) []
  hl.segmentUndefinedVar{highlight: false, span: span{from: 71, to: 72}, type: "undefined-var"}; {H: false, S: span{from: 71, to: 72}, T: "undefined-var"}
from ast.Expr to 9: ast.Expr{id: 13, location: span{from: 71, to: 72}}; {I: 13, S: span{from: 71, to: 72}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 13, location: span{from: 71, to: 72}}; {I: 13, S: span{from: 71, to: 72}}
from ast.Expr to 12: ast.Expr{id: 13, location: span{from: 71, to: 72}}; {I: 13, S: span{from: 71, to: 72}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 13, location: span{from: 71, to: 72}}; {I: 13, S: span{from: 71, to: 72}}
from ast.Expr to 15: ast.Expr{id: 13, location: span{from: 71, to: 72}}; {I: 13, S: span{from: 71, to: 72}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 13, location: span{from: 71, to: 72}}; {I: 13, S: span{from: 71, to: 72}}
from ast.Expr to 18: ast.Expr{id: 13, location: span{from: 71, to: 72}}; {I: 13, S: span{from: 71, to: 72}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 13, location: span{from: 71, to: 72}}; {I: 13, S: span{from: 71, to: 72}}
from ast.Expr to 21: ast.Expr{id: 13, location: span{from: 71, to: 72}}; {I: 13, S: span{from: 71, to: 72}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 13, location: span{from: 71, to: 72}}; {I: 13, S: span{from: 71, to: 72}}
from ast.Expr to 102: ast.Expr{id: 13, location: span{from: 71, to: 72}}; {I: 13, S: span{from: 71, to: 72}}. Match(ast.Expr{id: UI, location: UL}; {I: UI, S: UL}) [UL]
  ast.Expr{id: 13, location: span{from: 71, to: 72}}; {UI: 13, UL: span{from: 71, to: 72}}
from ast.Expr to 118: ast.Expr{id: 13, location: span{from: 71, to: 72}}; {I: 13, S: span{from: 71, to: 72}}. Match(ast.Expr{id: I, location: span{from: Idx}}; {I: I}) [Idx]
  ast.Expr{id: 13, location: span{from: 71, to: 72}}; {I: 13, Idx: 71}
from ast.Expr to 123: ast.Expr{id: 13, location: span{from: 71, to: 72}}; {I: 13, S: span{from: 71, to: 72}}. Match(ast.Expr{id: I, location: span{from: FIdx, to: TIdx}}; {I: I}) []
  ast.Expr{id: 13, location: span{from: 71, to: 72}}; {FIdx: 71, I: 13, TIdx: 72}
from tc.typeVar to 30: tc.typeVar{id: 13, type: "int"}; {I: 13, N: "y", T: "int"}. Match(tc.typeVar{id: I, type: T}; {I: I, T: T}) []
  tc.typeVar{id: 13, type: "int"}; {I: 13, T: "int"}
from ide.Usage to 100: ide.Usage{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {DL: span{from: 17, to: 18}, I: 13, N: "y", UL: span{from: 71, to: 72}}. Match(ide.Usage{definitionLoc: VL, usageLoc: UL}; {DL: VL, UL: UL}) [VL]
  ide.Usage{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {UL: span{from: 71, to: 72}, VL: span{from: 17, to: 18}}
from ide.Usage to 130: ide.Usage{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {DL: span{from: 17, to: 18}, I: 13, N: "y", UL: span{from: 71, to: 72}}. Match(ide.Usage{definitionLoc: DL, usageLoc: span{from: FIdx, to: TIdx}}; {DL: DL}) []
  ide.Usage{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {DL: span{from: 17, to: 18}, FIdx: 71, TIdx: 72}
from ide.Usage to 135: ide.Usage{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {DL: span{from: 17, to: 18}, I: 13, N: "y", UL: span{from: 71, to: 72}}. Match(ide.Usage{definitionLoc: span{from: FIdx, to: TIdx}, usageLoc: UL}; {UL: UL}) []
  ide.Usage{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {FIdx: 17, TIdx: 18, UL: span{from: 71, to: 72}}
from ide.Usage to 144: ide.Usage{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {DL: span{from: 17, to: 18}, I: 13, N: "y", UL: span{from: 71, to: 72}}. Match(ide.Usage{definitionLoc: span{from: FIdx, to: TIdx}, usageLoc: UL}; {UL: UL}) []
  ide.Usage{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {FIdx: 17, TIdx: 18, UL: span{from: 71, to: 72}}
from ide.Usage to 149: ide.Usage{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {DL: span{from: 17, to: 18}, I: 13, N: "y", UL: span{from: 71, to: 72}}. Match(ide.Usage{definitionLoc: DL, usageLoc: span{from: FIdx, to: TIdx}}; {DL: DL}) []
  ide.Usage{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {DL: span{from: 17, to: 18}, FIdx: 71, TIdx: 72}
from ide.Usage to 155: ide.Usage{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {DL: span{from: 17, to: 18}, I: 13, N: "y", UL: span{from: 71, to: 72}}. Match(ide.Usage{definitionLoc: DL, usageLoc: UL}; {DL: DL, UL: UL}) [DL]
  ide.Usage{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {DL: span{from: 17, to: 18}, UL: span{from: 71, to: 72}}
from ide.Usage to 171: ide.Usage{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {DL: span{from: 17, to: 18}, I: 13, N: "y", UL: span{from: 71, to: 72}}. Match(ide.Usage{definitionLoc: S}; {DL: S}) [S]
  ide.Usage{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {S: span{from: 17, to: 18}}
from ide.Usage to 180: ide.Usage{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {DL: span{from: 17, to: 18}, I: 13, N: "y", UL: span{from: 71, to: 72}}. Match(ide.Usage{usageLoc: S}; {UL: S}) [S]
  ide.Usage{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {S: span{from: 71, to: 72}}
from 163 to 159: hl.segmentUndefinedVar{highlight: false, span: span{from: 71, to: 72}, type: "undefined-var"}; {H: false, S: span{from: 71, to: 72}, T: "undefined-var"}. Union []
  hl.segmentUndefinedVar{highlight: false, span: span{from: 71, to: 72}, type: "undefined-var"}; {H: false, S: span{from: 71, to: 72}, T: "undefined-var"}
from 9 to 11: ast.Expr{id: 13, location: span{from: 71, to: 72}}; {I: 13, S: span{from: 71, to: 72}}. Join(ast.ParentExpr, I: 10.bodyID = 9.id) []
from 12 to 14: ast.Expr{id: 13, location: span{from: 71, to: 72}}; {I: 13, S: span{from: 71, to: 72}}. Join(ast.ParentExpr, I: 13.bindingID = 12.id) []
from 15 to 17: ast.Expr{id: 13, location: span{from: 71, to: 72}}; {I: 13, S: span{from: 71, to: 72}}. Join(ast.ParentExpr, I: 16.funcID = 15.id) []
from 18 to 20: ast.Expr{id: 13, location: span{from: 71, to: 72}}; {I: 13, S: span{from: 71, to: 72}}. Join(ast.ParentExpr, I: 19.argID = 18.id) []
  ast.ParentExpr{id: 13, location: span{from: 71, to: 72}}; {I: 13, P: 9, S: span{from: 71, to: 72}}
from 21 to 23: ast.Expr{id: 13, location: span{from: 71, to: 72}}; {I: 13, S: span{from: 71, to: 72}}. Join(ast.ParentExpr, I: 22.body = 21.id) []
from 102 to 103: ast.Expr{id: 13, location: span{from: 71, to: 72}}; {UI: 13, UL: span{from: 71, to: 72}}. Join(ide.expectedTypeBinding, UL: 102.location = 101.usageLoc) [UI]
from 118 to 119: ast.Expr{id: 13, location: span{from: 71, to: 72}}; {I: 13, Idx: 71}. Join(ide.CurrentScope, Idx: 118.location.from = 117.idx) [I]
from 123 to 124: ast.Expr{id: 13, location: span{from: 71, to: 72}}; {FIdx: 71, I: 13, TIdx: 72}. Join(ide.CurrentType, ) [I]
from 30 to 24: tc.typeVar{id: 13, type: "int"}; {I: 13, T: "int"}. Union []
  tc.typeVar{id: 13, type: "int"}; {I: 13, T: "int"}
from 100 to 101: ide.Usage{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {UL: span{from: 71, to: 72}, VL: span{from: 17, to: 18}}. Join(ide.expectedTypeBinding, VL: 100.definitionLoc = 99.varLoc) [UL]
  ide.expectedTypeBinding{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {I: 3, UL: span{from: 71, to: 72}, VL: span{from: 17, to: 18}}
from 130 to 131: ide.Usage{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {DL: span{from: 17, to: 18}, FIdx: 71, TIdx: 72}. Join(ide.DefnForCursor, ) []
from 135 to 136: ide.Usage{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {FIdx: 17, TIdx: 18, UL: span{from: 71, to: 72}}. Join(ide.UsageForCursor, ) []
from 144 to 146: ide.Usage{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {FIdx: 17, TIdx: 18, UL: span{from: 71, to: 72}}. Join(ide.CurrentUsageDefn, ) []
from 149 to 151: ide.Usage{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {DL: span{from: 17, to: 18}, FIdx: 71, TIdx: 72}. Join(ide.CurrentUsageUsage, ) []
from 155 to 156: ide.Usage{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {DL: span{from: 17, to: 18}, UL: span{from: 71, to: 72}}. Join(ide.CurrentUsageUsageIndirect, DL: 155.definitionLoc = 154.defnLoc) []
from 171 to 172: ide.Usage{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {S: span{from: 17, to: 18}}. Join(hl.segmentDefn, S: 171.definitionLoc = 170.span) []
  hl.segmentDefn{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {S: span{from: 17, to: 18}}
from 180 to 181: ide.Usage{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {S: span{from: 71, to: 72}}. Join(hl.segmentUsage, S: 180.usageLoc = 179.location) []
  hl.segmentUsage{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {S: span{from: 71, to: 72}}
from 159 to hl.Segment: hl.segmentUndefinedVar{highlight: false, span: span{from: 71, to: 72}, type: "undefined-var"}; {H: false, S: span{from: 71, to: 72}, T: "undefined-var"}. Subst({highlight: H, span: S, type: T}) []
  hl.Segment{highlight: false, span: span{from: 71, to: 72}, type: "undefined-var"}; {H: false, S: span{from: 71, to: 72}, T: "undefined-var"}
from 20 to 8: ast.ParentExpr{id: 13, location: span{from: 71, to: 72}}; {I: 13, P: 9, S: span{from: 71, to: 72}}. Union []
  ast.ParentExpr{id: 13, location: span{from: 71, to: 72}}; {I: 13, P: 9, S: span{from: 71, to: 72}}
from 24 to tc.Type: tc.typeVar{id: 13, type: "int"}; {I: 13, T: "int"}. Subst({id: I, type: T}) []
  tc.Type{id: 13, type: "int"}; {I: 13, T: "int"}
from 101 to 103: ide.expectedTypeBinding{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {I: 3, UL: span{from: 71, to: 72}, VL: span{from: 17, to: 18}}. Join(ide.expectedTypeBinding, UL: 102.location = 101.usageLoc) [UI]
  ide.expectedTypeBinding{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {I: 3, UI: 13, UL: span{from: 71, to: 72}, VL: span{from: 17, to: 18}}
from 172 to hl.segmentDefn: hl.segmentDefn{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {S: span{from: 17, to: 18}}. Subst({highlight: false, span: S, type: "defn"}) []
  hl.segmentDefn{highlight: false, span: span{from: 17, to: 18}, type: "defn"}; {S: span{from: 17, to: 18}}
from 181 to hl.segmentUsage: hl.segmentUsage{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {S: span{from: 71, to: 72}}. Subst({highlight: false, span: S, type: "usage"}) []
  hl.segmentUsage{highlight: false, span: span{from: 71, to: 72}, type: "usage"}; {S: span{from: 71, to: 72}}
from 8 to ast.ParentExpr: ast.ParentExpr{id: 13, location: span{from: 71, to: 72}}; {I: 13, P: 9, S: span{from: 71, to: 72}}. Subst({id: I, parent: P, span: S}) []
  ast.ParentExpr{id: 13, parent: 9, span: span{from: 71, to: 72}}; {I: 13, P: 9, S: span{from: 71, to: 72}}
from tc.Type to 35: tc.Type{id: 13, type: "int"}; {I: 13, T: "int"}. Match(tc.Type{id: FID, type: tapp{from: F, to: T}}; {I: FID}) [FID]
from tc.Type to 37: tc.Type{id: 13, type: "int"}; {I: 13, T: "int"}. Match(tc.Type{id: AID, type: F}; {I: AID, T: F}) [F]
  tc.Type{id: 13, type: "int"}; {AID: 13, F: "int"}
from tc.Type to 40: tc.Type{id: 13, type: "int"}; {I: 13, T: "int"}. Match(tc.Type{id: BID, type: T}; {I: BID, T: T}) [BID]
  tc.Type{id: 13, type: "int"}; {BID: 13, T: "int"}
from tc.Type to 48: tc.Type{id: 13, type: "int"}; {I: 13, T: "int"}. Match(tc.Type{id: B, type: R}; {I: B, T: R}) []
  tc.Type{id: 13, type: "int"}; {B: 13, R: "int"}
from tc.Type to 62: tc.Type{id: 13, type: "int"}; {I: 13, T: "int"}. Match(tc.Type{id: B, type: T}; {I: B, T: T}) [B]
  tc.Type{id: 13, type: "int"}; {B: 13, T: "int"}
from tc.Type to 96: tc.Type{id: 13, type: "int"}; {I: 13, T: "int"}. Match(tc.Type{id: F, type: tapp{from: T}}; {I: F}) [F]
from tc.Type to 125: tc.Type{id: 13, type: "int"}; {I: 13, T: "int"}. Match(tc.Type{id: I, type: T}; {I: I, T: T}) [I]
  tc.Type{id: 13, type: "int"}; {I: 13, T: "int"}
from 103 to 105: ide.expectedTypeBinding{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {I: 3, UI: 13, UL: span{from: 71, to: 72}, VL: span{from: 17, to: 18}}. Join(ide.expectedTypeBinding, UI: 104.id = 103.id) []
  ide.expectedTypeBinding{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {I: 3, T: "int", UI: 13, UL: span{from: 71, to: 72}, VL: span{from: 17, to: 18}}
from hl.segmentDefn to 160: hl.segmentDefn{highlight: false, span: span{from: 17, to: 18}, type: "defn"}; {S: span{from: 17, to: 18}}. Match(hl.segmentDefn{highlight: H, span: S, type: T}; {S: S}) []
  hl.segmentDefn{highlight: false, span: span{from: 17, to: 18}, type: "defn"}; {H: false, S: span{from: 17, to: 18}, T: "defn"}
from hl.segmentUsage to 162: hl.segmentUsage{highlight: false, span: span{from: 71, to: 72}, type: "usage"}; {S: span{from: 71, to: 72}}. Match(hl.segmentUsage{highlight: H, span: S, type: T}; {S: S}) []
  hl.segmentUsage{highlight: false, span: span{from: 71, to: 72}, type: "usage"}; {H: false, S: span{from: 71, to: 72}, T: "usage"}
from 37 to 38: tc.Type{id: 13, type: "int"}; {AID: 13, F: "int"}. Join(tc.typeFC, F: 37.type = 36.type.from) []
  tc.typeFC{id: 13, type: "int"}; {AID: 13, F: "int", FID: 10, I: 9, T: "int"}
from 40 to 41: tc.Type{id: 13, type: "int"}; {BID: 13, T: "int"}. Join(tc.typeLet, BID: 40.id = 39.bodyID) []
from 48 to 49: tc.Type{id: 13, type: "int"}; {B: 13, R: "int"}. Join(tc.typeLambda, ) []
from 62 to 63: tc.Type{id: 13, type: "int"}; {B: 13, T: "int"}. Join(tc.scopeLet, B: 62.id = 61.bindingID) []
from 125 to 126: tc.Type{id: 13, type: "int"}; {I: 13, T: "int"}. Join(ide.CurrentType, I: 125.id = 124.id) []
from 105 to ide.expectedTypeBinding: ide.expectedTypeBinding{definitionLoc: span{from: 17, to: 18}, name: "y", usageLoc: span{from: 71, to: 72}}; {I: 3, T: "int", UI: 13, UL: span{from: 71, to: 72}, VL: span{from: 17, to: 18}}. Subst({id: I, type: T}) []
  ide.expectedTypeBinding{id: 3, type: "int"}; {I: 3, T: "int", UI: 13, UL: span{from: 71, to: 72}, VL: span{from: 17, to: 18}}
from 160 to 159: hl.segmentDefn{highlight: false, span: span{from: 17, to: 18}, type: "defn"}; {H: false, S: span{from: 17, to: 18}, T: "defn"}. Union []
  hl.segmentDefn{highlight: false, span: span{from: 17, to: 18}, type: "defn"}; {H: false, S: span{from: 17, to: 18}, T: "defn"}
from 162 to 159: hl.segmentUsage{highlight: false, span: span{from: 71, to: 72}, type: "usage"}; {H: false, S: span{from: 71, to: 72}, T: "usage"}. Union []
  hl.segmentUsage{highlight: false, span: span{from: 71, to: 72}, type: "usage"}; {H: false, S: span{from: 71, to: 72}, T: "usage"}
from 38 to tc.typeFC: tc.typeFC{id: 13, type: "int"}; {AID: 13, F: "int", FID: 10, I: 9, T: "int"}. Subst({id: I, type: T}) []
  tc.typeFC{id: 9, type: "int"}; {AID: 13, F: "int", FID: 10, I: 9, T: "int"}
from ide.expectedTypeBinding to 98: ide.expectedTypeBinding{id: 3, type: "int"}; {I: 3, T: "int", UI: 13, UL: span{from: 71, to: 72}, VL: span{from: 17, to: 18}}. Match(ide.expectedTypeBinding{id: I, type: T}; {I: I, T: T}) []
  ide.expectedTypeBinding{id: 3, type: "int"}; {I: 3, T: "int"}
from 159 to hl.Segment: hl.segmentDefn{highlight: false, span: span{from: 17, to: 18}, type: "defn"}; {H: false, S: span{from: 17, to: 18}, T: "defn"}. Subst({highlight: H, span: S, type: T}) []
  hl.Segment{highlight: false, span: span{from: 17, to: 18}, type: "defn"}; {H: false, S: span{from: 17, to: 18}, T: "defn"}
from 159 to hl.Segment: hl.segmentUsage{highlight: false, span: span{from: 71, to: 72}, type: "usage"}; {H: false, S: span{from: 71, to: 72}, T: "usage"}. Subst({highlight: H, span: S, type: T}) []
  hl.Segment{highlight: false, span: span{from: 71, to: 72}, type: "usage"}; {H: false, S: span{from: 71, to: 72}, T: "usage"}
from tc.typeFC to 28: tc.typeFC{id: 9, type: "int"}; {AID: 13, F: "int", FID: 10, I: 9, T: "int"}. Match(tc.typeFC{id: I, type: T}; {I: I, T: T}) []
  tc.typeFC{id: 9, type: "int"}; {I: 9, T: "int"}
from 98 to 90: ide.expectedTypeBinding{id: 3, type: "int"}; {I: 3, T: "int"}. Union []
  ide.expectedTypeBinding{id: 3, type: "int"}; {I: 3, T: "int"}
from 28 to 24: tc.typeFC{id: 9, type: "int"}; {I: 9, T: "int"}. Union []
  tc.typeFC{id: 9, type: "int"}; {I: 9, T: "int"}
from 90 to ide.expectedType: ide.expectedTypeBinding{id: 3, type: "int"}; {I: 3, T: "int"}. Subst({id: I, type: T}) []
  ide.expectedType{id: 3, type: "int"}; {I: 3, T: "int"}
from 24 to tc.Type: tc.typeFC{id: 9, type: "int"}; {I: 9, T: "int"}. Subst({id: I, type: T}) []
  tc.Type{id: 9, type: "int"}; {I: 9, T: "int"}
from ide.expectedType to 78: ide.expectedType{id: 3, type: "int"}; {I: 3, T: "int"}. Match(ide.expectedType{id: I, type: T}; {I: I, T: T}) [I]
  ide.expectedType{id: 3, type: "int"}; {I: 3, T: "int"}
from ide.expectedType to 83: ide.expectedType{id: 3, type: "int"}; {I: 3, T: "int"}. Match(ide.expectedType{id: I, type: TT}; {I: I, T: TT}) [I]
  ide.expectedType{id: 3, type: "int"}; {I: 3, TT: "int"}
from ide.expectedType to 93: ide.expectedType{id: 3, type: "int"}; {I: 3, T: "int"}. Match(ide.expectedType{id: L, type: T}; {I: L, T: T}) [L]
  ide.expectedType{id: 3, type: "int"}; {L: 3, T: "int"}
from ide.expectedType to 104: ide.expectedType{id: 3, type: "int"}; {I: 3, T: "int"}. Match(ide.expectedType{id: UI, type: T}; {I: UI, T: T}) [UI]
  ide.expectedType{id: 3, type: "int"}; {T: "int", UI: 3}
from tc.Type to 35: tc.Type{id: 9, type: "int"}; {I: 9, T: "int"}. Match(tc.Type{id: FID, type: tapp{from: F, to: T}}; {I: FID}) [FID]
from tc.Type to 37: tc.Type{id: 9, type: "int"}; {I: 9, T: "int"}. Match(tc.Type{id: AID, type: F}; {I: AID, T: F}) [F]
  tc.Type{id: 9, type: "int"}; {AID: 9, F: "int"}
from tc.Type to 40: tc.Type{id: 9, type: "int"}; {I: 9, T: "int"}. Match(tc.Type{id: BID, type: T}; {I: BID, T: T}) [BID]
  tc.Type{id: 9, type: "int"}; {BID: 9, T: "int"}
from tc.Type to 48: tc.Type{id: 9, type: "int"}; {I: 9, T: "int"}. Match(tc.Type{id: B, type: R}; {I: B, T: R}) []
  tc.Type{id: 9, type: "int"}; {B: 9, R: "int"}
from tc.Type to 62: tc.Type{id: 9, type: "int"}; {I: 9, T: "int"}. Match(tc.Type{id: B, type: T}; {I: B, T: T}) [B]
  tc.Type{id: 9, type: "int"}; {B: 9, T: "int"}
from tc.Type to 96: tc.Type{id: 9, type: "int"}; {I: 9, T: "int"}. Match(tc.Type{id: F, type: tapp{from: T}}; {I: F}) [F]
from tc.Type to 125: tc.Type{id: 9, type: "int"}; {I: 9, T: "int"}. Match(tc.Type{id: I, type: T}; {I: I, T: T}) [I]
  tc.Type{id: 9, type: "int"}; {I: 9, T: "int"}
from 78 to 79: ide.expectedType{id: 3, type: "int"}; {I: 3, T: "int"}. Join(ide.suggestionVar, I: 78.id = 77.id) [I-T]
from 83 to 84: ide.expectedType{id: 3, type: "int"}; {I: 3, TT: "int"}. Join(ide.suggestionFunc, I: 83.id = 82.id) [I-TT]
from 93 to 94: ide.expectedType{id: 3, type: "int"}; {L: 3, T: "int"}. Join(ide.expectedType, L: 93.id = 92.id) []
from 104 to 105: ide.expectedType{id: 3, type: "int"}; {T: "int", UI: 3}. Join(ide.expectedTypeBinding, UI: 104.id = 103.id) []
from 37 to 38: tc.Type{id: 9, type: "int"}; {AID: 9, F: "int"}. Join(tc.typeFC, F: 37.type = 36.type.from) []
  tc.typeFC{id: 9, type: "int"}; {AID: 9, F: "int", FID: 8, I: 7, T: "string"}
from 40 to 41: tc.Type{id: 9, type: "int"}; {BID: 9, T: "int"}. Join(tc.typeLet, BID: 40.id = 39.bodyID) []
from 48 to 49: tc.Type{id: 9, type: "int"}; {B: 9, R: "int"}. Join(tc.typeLambda, ) []
from 62 to 63: tc.Type{id: 9, type: "int"}; {B: 9, T: "int"}. Join(tc.scopeLet, B: 62.id = 61.bindingID) []
from 125 to 126: tc.Type{id: 9, type: "int"}; {I: 9, T: "int"}. Join(ide.CurrentType, I: 125.id = 124.id) []
from 38 to tc.typeFC: tc.typeFC{id: 9, type: "int"}; {AID: 9, F: "int", FID: 8, I: 7, T: "string"}. Subst({id: I, type: T}) []
  tc.typeFC{id: 7, type: "string"}; {AID: 9, F: "int", FID: 8, I: 7, T: "string"}
from tc.typeFC to 28: tc.typeFC{id: 7, type: "string"}; {AID: 9, F: "int", FID: 8, I: 7, T: "string"}. Match(tc.typeFC{id: I, type: T}; {I: I, T: T}) []
  tc.typeFC{id: 7, type: "string"}; {I: 7, T: "string"}
from 28 to 24: tc.typeFC{id: 7, type: "string"}; {I: 7, T: "string"}. Union []
  tc.typeFC{id: 7, type: "string"}; {I: 7, T: "string"}
from 24 to tc.Type: tc.typeFC{id: 7, type: "string"}; {I: 7, T: "string"}. Subst({id: I, type: T}) []
  tc.Type{id: 7, type: "string"}; {I: 7, T: "string"}
from tc.Type to 35: tc.Type{id: 7, type: "string"}; {I: 7, T: "string"}. Match(tc.Type{id: FID, type: tapp{from: F, to: T}}; {I: FID}) [FID]
from tc.Type to 37: tc.Type{id: 7, type: "string"}; {I: 7, T: "string"}. Match(tc.Type{id: AID, type: F}; {I: AID, T: F}) [F]
  tc.Type{id: 7, type: "string"}; {AID: 7, F: "string"}
from tc.Type to 40: tc.Type{id: 7, type: "string"}; {I: 7, T: "string"}. Match(tc.Type{id: BID, type: T}; {I: BID, T: T}) [BID]
  tc.Type{id: 7, type: "string"}; {BID: 7, T: "string"}
from tc.Type to 48: tc.Type{id: 7, type: "string"}; {I: 7, T: "string"}. Match(tc.Type{id: B, type: R}; {I: B, T: R}) []
  tc.Type{id: 7, type: "string"}; {B: 7, R: "string"}
from tc.Type to 62: tc.Type{id: 7, type: "string"}; {I: 7, T: "string"}. Match(tc.Type{id: B, type: T}; {I: B, T: T}) [B]
  tc.Type{id: 7, type: "string"}; {B: 7, T: "string"}
from tc.Type to 96: tc.Type{id: 7, type: "string"}; {I: 7, T: "string"}. Match(tc.Type{id: F, type: tapp{from: T}}; {I: F}) [F]
from tc.Type to 125: tc.Type{id: 7, type: "string"}; {I: 7, T: "string"}. Match(tc.Type{id: I, type: T}; {I: I, T: T}) [I]
  tc.Type{id: 7, type: "string"}; {I: 7, T: "string"}
from 37 to 38: tc.Type{id: 7, type: "string"}; {AID: 7, F: "string"}. Join(tc.typeFC, F: 37.type = 36.type.from) []
from 40 to 41: tc.Type{id: 7, type: "string"}; {BID: 7, T: "string"}. Join(tc.typeLet, BID: 40.id = 39.bodyID) []
from 48 to 49: tc.Type{id: 7, type: "string"}; {B: 7, R: "string"}. Join(tc.typeLambda, ) []
from 62 to 63: tc.Type{id: 7, type: "string"}; {B: 7, T: "string"}. Join(tc.scopeLet, B: 62.id = 61.bindingID) []
  tc.scopeLet{id: 7, type: "string"}; {B: 7, I: 14, L: span{from: 47, to: 48}, N: "a", T: "string"}
from 125 to 126: tc.Type{id: 7, type: "string"}; {I: 7, T: "string"}. Join(ide.CurrentType, I: 125.id = 124.id) []
from 63 to tc.scopeLet: tc.scopeLet{id: 7, type: "string"}; {B: 7, I: 14, L: span{from: 47, to: 48}, N: "a", T: "string"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.scopeLet{id: 14, location: span{from: 47, to: 48}, name: "a", type: "string"}; {B: 7, I: 14, L: span{from: 47, to: 48}, N: "a", T: "string"}
from tc.scopeLet to 53: tc.scopeLet{id: 14, location: span{from: 47, to: 48}, name: "a", type: "string"}; {B: 7, I: 14, L: span{from: 47, to: 48}, N: "a", T: "string"}. Match(tc.scopeLet{id: I, location: L, name: N, type: T}; {I: I, L: L, N: N, T: T}) []
  tc.scopeLet{id: 14, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 14, L: span{from: 47, to: 48}, N: "a", T: "string"}
from 53 to 51: tc.scopeLet{id: 14, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 14, L: span{from: 47, to: 48}, N: "a", T: "string"}. Union []
  tc.scopeLet{id: 14, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 14, L: span{from: 47, to: 48}, N: "a", T: "string"}
from 51 to tc.ScopeItem: tc.scopeLet{id: 14, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 14, L: span{from: 47, to: 48}, N: "a", T: "string"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 14, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 14, L: span{from: 47, to: 48}, N: "a", T: "string"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 14, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 14, L: span{from: 47, to: 48}, N: "a", T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 14, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 14, N: "a", T: "string"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 14, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 14, L: span{from: 47, to: 48}, N: "a", T: "string"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 14, location: span{from: 47, to: 48}, name: "a", type: "string"}; {L: span{from: 47, to: 48}, N: "a", P: 14, T: "string"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 14, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 14, L: span{from: 47, to: 48}, N: "a", T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 14, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 14, N: "a", T: "string"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 14, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 14, L: span{from: 47, to: 48}, N: "a", T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 14, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 14, L: span{from: 47, to: 48}, N: "a", T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 14, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 14, N: "a", T: "string"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 14, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 14, L: span{from: 47, to: 48}, N: "a", T: "string"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 14, location: span{from: 47, to: 48}, name: "a", type: "string"}; {DL: span{from: 47, to: 48}, I: 14, N: "a"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 14, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 14, L: span{from: 47, to: 48}, N: "a", T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 14, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 14, N: "a", T: "string"}
from 43 to 44: tc.ScopeItem{id: 14, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 14, N: "a", T: "string"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 14, location: span{from: 47, to: 48}, name: "a", type: "string"}; {L: span{from: 47, to: 48}, N: "a", P: 14, T: "string"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 14, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 14, N: "a", T: "string"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 14, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 14, N: "a", T: "string"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 14, location: span{from: 47, to: 48}, name: "a", type: "string"}; {DL: span{from: 47, to: 48}, I: 14, N: "a"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 14, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 14, N: "a", T: "string"}. Join(ide.CurrentScope, I: 120.id = 119.id) []

ast.FuncCall{argID: 18, funcID: 15, id: 14, location: span{from: 78, to: 90}}.
----
text/emission-log
from null to ast.FuncCall: ast.FuncCall{argID: 18, funcID: 15, id: 14, location: span{from: 78, to: 90}}; {}.  []
  ast.FuncCall{argID: 18, funcID: 15, id: 14, location: span{from: 78, to: 90}}; {}
from ast.FuncCall to 5: ast.FuncCall{argID: 18, funcID: 15, id: 14, location: span{from: 78, to: 90}}; {}. Match(ast.FuncCall{id: I, location: S}; {}) []
  ast.FuncCall{argID: 18, funcID: 15, id: 14, location: span{from: 78, to: 90}}; {I: 14, S: span{from: 78, to: 90}}
from ast.FuncCall to 16: ast.FuncCall{argID: 18, funcID: 15, id: 14, location: span{from: 78, to: 90}}; {}. Match(ast.FuncCall{funcID: I, id: P}; {}) [I]
  ast.FuncCall{argID: 18, funcID: 15, id: 14, location: span{from: 78, to: 90}}; {I: 15, P: 14}
from ast.FuncCall to 19: ast.FuncCall{argID: 18, funcID: 15, id: 14, location: span{from: 78, to: 90}}; {}. Match(ast.FuncCall{argID: I, id: P}; {}) [I]
  ast.FuncCall{argID: 18, funcID: 15, id: 14, location: span{from: 78, to: 90}}; {I: 18, P: 14}
from ast.FuncCall to 34: ast.FuncCall{argID: 18, funcID: 15, id: 14, location: span{from: 78, to: 90}}; {}. Match(ast.FuncCall{argID: AID, funcID: FID, id: I}; {}) [FID]
  ast.FuncCall{argID: 18, funcID: 15, id: 14, location: span{from: 78, to: 90}}; {AID: 18, FID: 15, I: 14}
from ast.FuncCall to 70: ast.FuncCall{argID: 18, funcID: 15, id: 14, location: span{from: 78, to: 90}}; {}. Match(ast.FuncCall{argID: I, id: P}; {}) []
  ast.FuncCall{argID: 18, funcID: 15, id: 14, location: span{from: 78, to: 90}}; {I: 18, P: 14}
from ast.FuncCall to 71: ast.FuncCall{argID: 18, funcID: 15, id: 14, location: span{from: 78, to: 90}}; {}. Match(ast.FuncCall{funcID: I, id: P}; {}) []
  ast.FuncCall{argID: 18, funcID: 15, id: 14, location: span{from: 78, to: 90}}; {I: 15, P: 14}
from ast.FuncCall to 95: ast.FuncCall{argID: 18, funcID: 15, id: 14, location: span{from: 78, to: 90}}; {}. Match(ast.FuncCall{argID: I, funcID: F}; {}) [F]
  ast.FuncCall{argID: 18, funcID: 15, id: 14, location: span{from: 78, to: 90}}; {F: 15, I: 18}
from 5 to 0: ast.FuncCall{argID: 18, funcID: 15, id: 14, location: span{from: 78, to: 90}}; {I: 14, S: span{from: 78, to: 90}}. Union []
  ast.FuncCall{argID: 18, funcID: 15, id: 14, location: span{from: 78, to: 90}}; {I: 14, S: span{from: 78, to: 90}}
from 16 to 17: ast.FuncCall{argID: 18, funcID: 15, id: 14, location: span{from: 78, to: 90}}; {I: 15, P: 14}. Join(ast.ParentExpr, I: 16.funcID = 15.id) []
from 19 to 20: ast.FuncCall{argID: 18, funcID: 15, id: 14, location: span{from: 78, to: 90}}; {I: 18, P: 14}. Join(ast.ParentExpr, I: 19.argID = 18.id) []
from 34 to 36: ast.FuncCall{argID: 18, funcID: 15, id: 14, location: span{from: 78, to: 90}}; {AID: 18, FID: 15, I: 14}. Join(tc.typeFC, FID: 35.id = 34.funcID) [F]
from 70 to 67: ast.FuncCall{argID: 18, funcID: 15, id: 14, location: span{from: 78, to: 90}}; {I: 18, P: 14}. Union []
  ast.FuncCall{argID: 18, funcID: 15, id: 14, location: span{from: 78, to: 90}}; {I: 18, P: 14}
from 71 to 67: ast.FuncCall{argID: 18, funcID: 15, id: 14, location: span{from: 78, to: 90}}; {I: 15, P: 14}. Union []
  ast.FuncCall{argID: 18, funcID: 15, id: 14, location: span{from: 78, to: 90}}; {I: 15, P: 14}
from 95 to 97: ast.FuncCall{argID: 18, funcID: 15, id: 14, location: span{from: 78, to: 90}}; {F: 15, I: 18}. Join(ide.expectedType, F: 96.id = 95.funcID) []
from 0 to ast.Expr: ast.FuncCall{argID: 18, funcID: 15, id: 14, location: span{from: 78, to: 90}}; {I: 14, S: span{from: 78, to: 90}}. Subst({id: I, location: S}) []
  ast.Expr{id: 14, location: span{from: 78, to: 90}}; {I: 14, S: span{from: 78, to: 90}}
from 67 to tc.parentScope: ast.FuncCall{argID: 18, funcID: 15, id: 14, location: span{from: 78, to: 90}}; {I: 18, P: 14}. Subst({id: I, parentID: P}) []
  tc.parentScope{id: 18, parentID: 14}; {I: 18, P: 14}
from 67 to tc.parentScope: ast.FuncCall{argID: 18, funcID: 15, id: 14, location: span{from: 78, to: 90}}; {I: 15, P: 14}. Subst({id: I, parentID: P}) []
  tc.parentScope{id: 15, parentID: 14}; {I: 15, P: 14}
from ast.Expr to 9: ast.Expr{id: 14, location: span{from: 78, to: 90}}; {I: 14, S: span{from: 78, to: 90}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 14, location: span{from: 78, to: 90}}; {I: 14, S: span{from: 78, to: 90}}
from ast.Expr to 12: ast.Expr{id: 14, location: span{from: 78, to: 90}}; {I: 14, S: span{from: 78, to: 90}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 14, location: span{from: 78, to: 90}}; {I: 14, S: span{from: 78, to: 90}}
from ast.Expr to 15: ast.Expr{id: 14, location: span{from: 78, to: 90}}; {I: 14, S: span{from: 78, to: 90}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 14, location: span{from: 78, to: 90}}; {I: 14, S: span{from: 78, to: 90}}
from ast.Expr to 18: ast.Expr{id: 14, location: span{from: 78, to: 90}}; {I: 14, S: span{from: 78, to: 90}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 14, location: span{from: 78, to: 90}}; {I: 14, S: span{from: 78, to: 90}}
from ast.Expr to 21: ast.Expr{id: 14, location: span{from: 78, to: 90}}; {I: 14, S: span{from: 78, to: 90}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 14, location: span{from: 78, to: 90}}; {I: 14, S: span{from: 78, to: 90}}
from ast.Expr to 102: ast.Expr{id: 14, location: span{from: 78, to: 90}}; {I: 14, S: span{from: 78, to: 90}}. Match(ast.Expr{id: UI, location: UL}; {I: UI, S: UL}) [UL]
  ast.Expr{id: 14, location: span{from: 78, to: 90}}; {UI: 14, UL: span{from: 78, to: 90}}
from ast.Expr to 118: ast.Expr{id: 14, location: span{from: 78, to: 90}}; {I: 14, S: span{from: 78, to: 90}}. Match(ast.Expr{id: I, location: span{from: Idx}}; {I: I}) [Idx]
  ast.Expr{id: 14, location: span{from: 78, to: 90}}; {I: 14, Idx: 78}
from ast.Expr to 123: ast.Expr{id: 14, location: span{from: 78, to: 90}}; {I: 14, S: span{from: 78, to: 90}}. Match(ast.Expr{id: I, location: span{from: FIdx, to: TIdx}}; {I: I}) []
  ast.Expr{id: 14, location: span{from: 78, to: 90}}; {FIdx: 78, I: 14, TIdx: 90}
from tc.parentScope to 55: tc.parentScope{id: 18, parentID: 14}; {I: 18, P: 14}. Match(tc.parentScope{id: I, parentID: P}; {I: I, P: P}) [P]
  tc.parentScope{id: 18, parentID: 14}; {I: 18, P: 14}
from tc.parentScope to 55: tc.parentScope{id: 15, parentID: 14}; {I: 15, P: 14}. Match(tc.parentScope{id: I, parentID: P}; {I: I, P: P}) [P]
  tc.parentScope{id: 15, parentID: 14}; {I: 15, P: 14}
from 9 to 11: ast.Expr{id: 14, location: span{from: 78, to: 90}}; {I: 14, S: span{from: 78, to: 90}}. Join(ast.ParentExpr, I: 10.bodyID = 9.id) []
  ast.ParentExpr{id: 14, location: span{from: 78, to: 90}}; {I: 14, P: 6, S: span{from: 78, to: 90}}
from 12 to 14: ast.Expr{id: 14, location: span{from: 78, to: 90}}; {I: 14, S: span{from: 78, to: 90}}. Join(ast.ParentExpr, I: 13.bindingID = 12.id) []
from 15 to 17: ast.Expr{id: 14, location: span{from: 78, to: 90}}; {I: 14, S: span{from: 78, to: 90}}. Join(ast.ParentExpr, I: 16.funcID = 15.id) []
from 18 to 20: ast.Expr{id: 14, location: span{from: 78, to: 90}}; {I: 14, S: span{from: 78, to: 90}}. Join(ast.ParentExpr, I: 19.argID = 18.id) []
from 21 to 23: ast.Expr{id: 14, location: span{from: 78, to: 90}}; {I: 14, S: span{from: 78, to: 90}}. Join(ast.ParentExpr, I: 22.body = 21.id) []
from 102 to 103: ast.Expr{id: 14, location: span{from: 78, to: 90}}; {UI: 14, UL: span{from: 78, to: 90}}. Join(ide.expectedTypeBinding, UL: 102.location = 101.usageLoc) [UI]
from 118 to 119: ast.Expr{id: 14, location: span{from: 78, to: 90}}; {I: 14, Idx: 78}. Join(ide.CurrentScope, Idx: 118.location.from = 117.idx) [I]
from 123 to 124: ast.Expr{id: 14, location: span{from: 78, to: 90}}; {FIdx: 78, I: 14, TIdx: 90}. Join(ide.CurrentType, ) [I]
from 55 to 57: tc.parentScope{id: 18, parentID: 14}; {I: 18, P: 14}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
  tc.ScopeItem{id: 18, parentID: 14}; {I: 18, L: "builtin", N: "intToString", P: 14, T: tapp{from: "int", to: "string"}}
  tc.ScopeItem{id: 18, parentID: 14}; {I: 18, L: "builtin", N: "plus", P: 14, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
  tc.ScopeItem{id: 18, parentID: 14}; {I: 18, L: "builtin", N: "concat", P: 14, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
  tc.ScopeItem{id: 18, parentID: 14}; {I: 18, L: span{from: 4, to: 5}, N: "x", P: 14, T: "int"}
  tc.ScopeItem{id: 18, parentID: 14}; {I: 18, L: span{from: 17, to: 18}, N: "y", P: 14, T: "int"}
  tc.ScopeItem{id: 18, parentID: 14}; {I: 18, L: span{from: 30, to: 31}, N: "z", P: 14, T: "string"}
  tc.ScopeItem{id: 18, parentID: 14}; {I: 18, L: span{from: 47, to: 48}, N: "a", P: 14, T: "string"}
from 55 to 57: tc.parentScope{id: 15, parentID: 14}; {I: 15, P: 14}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
  tc.ScopeItem{id: 15, parentID: 14}; {I: 15, L: "builtin", N: "intToString", P: 14, T: tapp{from: "int", to: "string"}}
  tc.ScopeItem{id: 15, parentID: 14}; {I: 15, L: "builtin", N: "plus", P: 14, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
  tc.ScopeItem{id: 15, parentID: 14}; {I: 15, L: "builtin", N: "concat", P: 14, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
  tc.ScopeItem{id: 15, parentID: 14}; {I: 15, L: span{from: 4, to: 5}, N: "x", P: 14, T: "int"}
  tc.ScopeItem{id: 15, parentID: 14}; {I: 15, L: span{from: 17, to: 18}, N: "y", P: 14, T: "int"}
  tc.ScopeItem{id: 15, parentID: 14}; {I: 15, L: span{from: 30, to: 31}, N: "z", P: 14, T: "string"}
  tc.ScopeItem{id: 15, parentID: 14}; {I: 15, L: span{from: 47, to: 48}, N: "a", P: 14, T: "string"}
from 11 to 8: ast.ParentExpr{id: 14, location: span{from: 78, to: 90}}; {I: 14, P: 6, S: span{from: 78, to: 90}}. Union []
  ast.ParentExpr{id: 14, location: span{from: 78, to: 90}}; {I: 14, P: 6, S: span{from: 78, to: 90}}
from 57 to 51: tc.ScopeItem{id: 18, parentID: 14}; {I: 18, L: "builtin", N: "intToString", P: 14, T: tapp{from: "int", to: "string"}}. Union []
  tc.ScopeItem{id: 18, parentID: 14}; {I: 18, L: "builtin", N: "intToString", P: 14, T: tapp{from: "int", to: "string"}}
from 57 to 51: tc.ScopeItem{id: 18, parentID: 14}; {I: 18, L: "builtin", N: "plus", P: 14, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Union []
  tc.ScopeItem{id: 18, parentID: 14}; {I: 18, L: "builtin", N: "plus", P: 14, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 57 to 51: tc.ScopeItem{id: 18, parentID: 14}; {I: 18, L: "builtin", N: "concat", P: 14, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Union []
  tc.ScopeItem{id: 18, parentID: 14}; {I: 18, L: "builtin", N: "concat", P: 14, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 57 to 51: tc.ScopeItem{id: 18, parentID: 14}; {I: 18, L: span{from: 4, to: 5}, N: "x", P: 14, T: "int"}. Union []
  tc.ScopeItem{id: 18, parentID: 14}; {I: 18, L: span{from: 4, to: 5}, N: "x", P: 14, T: "int"}
from 57 to 51: tc.ScopeItem{id: 18, parentID: 14}; {I: 18, L: span{from: 17, to: 18}, N: "y", P: 14, T: "int"}. Union []
  tc.ScopeItem{id: 18, parentID: 14}; {I: 18, L: span{from: 17, to: 18}, N: "y", P: 14, T: "int"}
from 57 to 51: tc.ScopeItem{id: 18, parentID: 14}; {I: 18, L: span{from: 30, to: 31}, N: "z", P: 14, T: "string"}. Union []
  tc.ScopeItem{id: 18, parentID: 14}; {I: 18, L: span{from: 30, to: 31}, N: "z", P: 14, T: "string"}
from 57 to 51: tc.ScopeItem{id: 18, parentID: 14}; {I: 18, L: span{from: 47, to: 48}, N: "a", P: 14, T: "string"}. Union []
  tc.ScopeItem{id: 18, parentID: 14}; {I: 18, L: span{from: 47, to: 48}, N: "a", P: 14, T: "string"}
from 57 to 51: tc.ScopeItem{id: 15, parentID: 14}; {I: 15, L: "builtin", N: "intToString", P: 14, T: tapp{from: "int", to: "string"}}. Union []
  tc.ScopeItem{id: 15, parentID: 14}; {I: 15, L: "builtin", N: "intToString", P: 14, T: tapp{from: "int", to: "string"}}
from 57 to 51: tc.ScopeItem{id: 15, parentID: 14}; {I: 15, L: "builtin", N: "plus", P: 14, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Union []
  tc.ScopeItem{id: 15, parentID: 14}; {I: 15, L: "builtin", N: "plus", P: 14, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 57 to 51: tc.ScopeItem{id: 15, parentID: 14}; {I: 15, L: "builtin", N: "concat", P: 14, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Union []
  tc.ScopeItem{id: 15, parentID: 14}; {I: 15, L: "builtin", N: "concat", P: 14, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 57 to 51: tc.ScopeItem{id: 15, parentID: 14}; {I: 15, L: span{from: 4, to: 5}, N: "x", P: 14, T: "int"}. Union []
  tc.ScopeItem{id: 15, parentID: 14}; {I: 15, L: span{from: 4, to: 5}, N: "x", P: 14, T: "int"}
from 57 to 51: tc.ScopeItem{id: 15, parentID: 14}; {I: 15, L: span{from: 17, to: 18}, N: "y", P: 14, T: "int"}. Union []
  tc.ScopeItem{id: 15, parentID: 14}; {I: 15, L: span{from: 17, to: 18}, N: "y", P: 14, T: "int"}
from 57 to 51: tc.ScopeItem{id: 15, parentID: 14}; {I: 15, L: span{from: 30, to: 31}, N: "z", P: 14, T: "string"}. Union []
  tc.ScopeItem{id: 15, parentID: 14}; {I: 15, L: span{from: 30, to: 31}, N: "z", P: 14, T: "string"}
from 57 to 51: tc.ScopeItem{id: 15, parentID: 14}; {I: 15, L: span{from: 47, to: 48}, N: "a", P: 14, T: "string"}. Union []
  tc.ScopeItem{id: 15, parentID: 14}; {I: 15, L: span{from: 47, to: 48}, N: "a", P: 14, T: "string"}
from 8 to ast.ParentExpr: ast.ParentExpr{id: 14, location: span{from: 78, to: 90}}; {I: 14, P: 6, S: span{from: 78, to: 90}}. Subst({id: I, parent: P, span: S}) []
  ast.ParentExpr{id: 14, parent: 6, span: span{from: 78, to: 90}}; {I: 14, P: 6, S: span{from: 78, to: 90}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 18, parentID: 14}; {I: 18, L: "builtin", N: "intToString", P: 14, T: tapp{from: "int", to: "string"}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 18, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 18, L: "builtin", N: "intToString", P: 14, T: tapp{from: "int", to: "string"}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 18, parentID: 14}; {I: 18, L: "builtin", N: "plus", P: 14, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 18, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 18, L: "builtin", N: "plus", P: 14, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 18, parentID: 14}; {I: 18, L: "builtin", N: "concat", P: 14, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 18, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 18, L: "builtin", N: "concat", P: 14, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 18, parentID: 14}; {I: 18, L: span{from: 4, to: 5}, N: "x", P: 14, T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 18, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 18, L: span{from: 4, to: 5}, N: "x", P: 14, T: "int"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 18, parentID: 14}; {I: 18, L: span{from: 17, to: 18}, N: "y", P: 14, T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 18, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 18, L: span{from: 17, to: 18}, N: "y", P: 14, T: "int"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 18, parentID: 14}; {I: 18, L: span{from: 30, to: 31}, N: "z", P: 14, T: "string"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 18, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 18, L: span{from: 30, to: 31}, N: "z", P: 14, T: "string"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 18, parentID: 14}; {I: 18, L: span{from: 47, to: 48}, N: "a", P: 14, T: "string"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 18, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 18, L: span{from: 47, to: 48}, N: "a", P: 14, T: "string"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 15, parentID: 14}; {I: 15, L: "builtin", N: "intToString", P: 14, T: tapp{from: "int", to: "string"}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 15, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 15, L: "builtin", N: "intToString", P: 14, T: tapp{from: "int", to: "string"}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 15, parentID: 14}; {I: 15, L: "builtin", N: "plus", P: 14, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 15, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 15, L: "builtin", N: "plus", P: 14, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 15, parentID: 14}; {I: 15, L: "builtin", N: "concat", P: 14, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 15, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 15, L: "builtin", N: "concat", P: 14, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 15, parentID: 14}; {I: 15, L: span{from: 4, to: 5}, N: "x", P: 14, T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 15, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 15, L: span{from: 4, to: 5}, N: "x", P: 14, T: "int"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 15, parentID: 14}; {I: 15, L: span{from: 17, to: 18}, N: "y", P: 14, T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 15, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 15, L: span{from: 17, to: 18}, N: "y", P: 14, T: "int"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 15, parentID: 14}; {I: 15, L: span{from: 30, to: 31}, N: "z", P: 14, T: "string"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 15, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 15, L: span{from: 30, to: 31}, N: "z", P: 14, T: "string"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 15, parentID: 14}; {I: 15, L: span{from: 47, to: 48}, N: "a", P: 14, T: "string"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 15, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 15, L: span{from: 47, to: 48}, N: "a", P: 14, T: "string"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 18, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 18, L: "builtin", N: "intToString", P: 14, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 18, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 18, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 18, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 18, L: "builtin", N: "intToString", P: 14, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 18, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 18, T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 18, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 18, L: "builtin", N: "intToString", P: 14, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 18, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 18, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 18, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 18, L: "builtin", N: "intToString", P: 14, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 18, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 18, N: "intToString", TF: "int", TT: "string"}
from tc.ScopeItem to 88: tc.ScopeItem{id: 18, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 18, L: "builtin", N: "intToString", P: 14, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 18, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 18, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 18, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 18, L: "builtin", N: "intToString", P: 14, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 18, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 18, N: "intToString"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 18, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 18, L: "builtin", N: "intToString", P: 14, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 18, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 18, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 18, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 18, L: "builtin", N: "plus", P: 14, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 18, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 18, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 18, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 18, L: "builtin", N: "plus", P: 14, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 18, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 18, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 18, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 18, L: "builtin", N: "plus", P: 14, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 18, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 18, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 18, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 18, L: "builtin", N: "plus", P: 14, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 18, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 18, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 18, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 18, L: "builtin", N: "plus", P: 14, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 18, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 18, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 18, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 18, L: "builtin", N: "plus", P: 14, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 18, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 18, N: "plus"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 18, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 18, L: "builtin", N: "plus", P: 14, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 18, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 18, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 18, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 18, L: "builtin", N: "concat", P: 14, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 18, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 18, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 18, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 18, L: "builtin", N: "concat", P: 14, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 18, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 18, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 18, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 18, L: "builtin", N: "concat", P: 14, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 18, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 18, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 18, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 18, L: "builtin", N: "concat", P: 14, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 18, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 18, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 18, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 18, L: "builtin", N: "concat", P: 14, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 18, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 18, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 18, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 18, L: "builtin", N: "concat", P: 14, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 18, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 18, N: "concat"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 18, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 18, L: "builtin", N: "concat", P: 14, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 18, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 18, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 18, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 18, L: span{from: 4, to: 5}, N: "x", P: 14, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 18, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 18, N: "x", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 18, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 18, L: span{from: 4, to: 5}, N: "x", P: 14, T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 18, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 18, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 18, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 18, L: span{from: 4, to: 5}, N: "x", P: 14, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 18, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 18, N: "x", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 18, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 18, L: span{from: 4, to: 5}, N: "x", P: 14, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 18, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 18, L: span{from: 4, to: 5}, N: "x", P: 14, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 18, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 18, N: "x", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 18, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 18, L: span{from: 4, to: 5}, N: "x", P: 14, T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 18, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 18, N: "x"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 18, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 18, L: span{from: 4, to: 5}, N: "x", P: 14, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 18, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 18, N: "x", T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 18, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 18, L: span{from: 17, to: 18}, N: "y", P: 14, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 18, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 18, N: "y", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 18, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 18, L: span{from: 17, to: 18}, N: "y", P: 14, T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 18, location: span{from: 17, to: 18}, name: "y", type: "int"}; {L: span{from: 17, to: 18}, N: "y", P: 18, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 18, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 18, L: span{from: 17, to: 18}, N: "y", P: 14, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 18, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 18, N: "y", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 18, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 18, L: span{from: 17, to: 18}, N: "y", P: 14, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 18, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 18, L: span{from: 17, to: 18}, N: "y", P: 14, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 18, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 18, N: "y", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 18, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 18, L: span{from: 17, to: 18}, N: "y", P: 14, T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 18, location: span{from: 17, to: 18}, name: "y", type: "int"}; {DL: span{from: 17, to: 18}, I: 18, N: "y"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 18, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 18, L: span{from: 17, to: 18}, N: "y", P: 14, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 18, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 18, N: "y", T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 18, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 18, L: span{from: 30, to: 31}, N: "z", P: 14, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 18, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 18, N: "z", T: "string"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 18, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 18, L: span{from: 30, to: 31}, N: "z", P: 14, T: "string"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 18, location: span{from: 30, to: 31}, name: "z", type: "string"}; {L: span{from: 30, to: 31}, N: "z", P: 18, T: "string"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 18, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 18, L: span{from: 30, to: 31}, N: "z", P: 14, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 18, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 18, N: "z", T: "string"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 18, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 18, L: span{from: 30, to: 31}, N: "z", P: 14, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 18, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 18, L: span{from: 30, to: 31}, N: "z", P: 14, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 18, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 18, N: "z", T: "string"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 18, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 18, L: span{from: 30, to: 31}, N: "z", P: 14, T: "string"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 18, location: span{from: 30, to: 31}, name: "z", type: "string"}; {DL: span{from: 30, to: 31}, I: 18, N: "z"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 18, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 18, L: span{from: 30, to: 31}, N: "z", P: 14, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 18, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 18, N: "z", T: "string"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 18, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 18, L: span{from: 47, to: 48}, N: "a", P: 14, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 18, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 18, N: "a", T: "string"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 18, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 18, L: span{from: 47, to: 48}, N: "a", P: 14, T: "string"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 18, location: span{from: 47, to: 48}, name: "a", type: "string"}; {L: span{from: 47, to: 48}, N: "a", P: 18, T: "string"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 18, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 18, L: span{from: 47, to: 48}, N: "a", P: 14, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 18, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 18, N: "a", T: "string"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 18, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 18, L: span{from: 47, to: 48}, N: "a", P: 14, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 18, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 18, L: span{from: 47, to: 48}, N: "a", P: 14, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 18, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 18, N: "a", T: "string"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 18, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 18, L: span{from: 47, to: 48}, N: "a", P: 14, T: "string"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 18, location: span{from: 47, to: 48}, name: "a", type: "string"}; {DL: span{from: 47, to: 48}, I: 18, N: "a"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 18, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 18, L: span{from: 47, to: 48}, N: "a", P: 14, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 18, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 18, N: "a", T: "string"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 15, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 15, L: "builtin", N: "intToString", P: 14, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 15, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 15, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 15, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 15, L: "builtin", N: "intToString", P: 14, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 15, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 15, T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 15, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 15, L: "builtin", N: "intToString", P: 14, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 15, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 15, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 15, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 15, L: "builtin", N: "intToString", P: 14, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 15, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 15, N: "intToString", TF: "int", TT: "string"}
from tc.ScopeItem to 88: tc.ScopeItem{id: 15, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 15, L: "builtin", N: "intToString", P: 14, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 15, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 15, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 15, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 15, L: "builtin", N: "intToString", P: 14, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 15, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 15, N: "intToString"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 15, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 15, L: "builtin", N: "intToString", P: 14, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 15, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 15, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 15, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 15, L: "builtin", N: "plus", P: 14, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 15, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 15, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 15, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 15, L: "builtin", N: "plus", P: 14, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 15, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 15, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 15, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 15, L: "builtin", N: "plus", P: 14, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 15, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 15, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 15, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 15, L: "builtin", N: "plus", P: 14, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 15, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 15, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 15, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 15, L: "builtin", N: "plus", P: 14, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 15, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 15, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 15, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 15, L: "builtin", N: "plus", P: 14, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 15, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 15, N: "plus"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 15, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 15, L: "builtin", N: "plus", P: 14, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 15, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 15, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 15, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 15, L: "builtin", N: "concat", P: 14, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 15, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 15, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 15, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 15, L: "builtin", N: "concat", P: 14, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 15, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 15, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 15, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 15, L: "builtin", N: "concat", P: 14, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 15, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 15, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 15, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 15, L: "builtin", N: "concat", P: 14, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 15, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 15, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 15, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 15, L: "builtin", N: "concat", P: 14, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 15, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 15, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 15, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 15, L: "builtin", N: "concat", P: 14, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 15, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 15, N: "concat"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 15, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 15, L: "builtin", N: "concat", P: 14, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 15, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 15, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 15, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 15, L: span{from: 4, to: 5}, N: "x", P: 14, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 15, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 15, N: "x", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 15, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 15, L: span{from: 4, to: 5}, N: "x", P: 14, T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 15, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 15, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 15, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 15, L: span{from: 4, to: 5}, N: "x", P: 14, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 15, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 15, N: "x", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 15, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 15, L: span{from: 4, to: 5}, N: "x", P: 14, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 15, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 15, L: span{from: 4, to: 5}, N: "x", P: 14, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 15, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 15, N: "x", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 15, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 15, L: span{from: 4, to: 5}, N: "x", P: 14, T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 15, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 15, N: "x"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 15, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 15, L: span{from: 4, to: 5}, N: "x", P: 14, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 15, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 15, N: "x", T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 15, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 15, L: span{from: 17, to: 18}, N: "y", P: 14, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 15, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 15, N: "y", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 15, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 15, L: span{from: 17, to: 18}, N: "y", P: 14, T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 15, location: span{from: 17, to: 18}, name: "y", type: "int"}; {L: span{from: 17, to: 18}, N: "y", P: 15, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 15, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 15, L: span{from: 17, to: 18}, N: "y", P: 14, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 15, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 15, N: "y", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 15, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 15, L: span{from: 17, to: 18}, N: "y", P: 14, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 15, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 15, L: span{from: 17, to: 18}, N: "y", P: 14, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 15, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 15, N: "y", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 15, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 15, L: span{from: 17, to: 18}, N: "y", P: 14, T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 15, location: span{from: 17, to: 18}, name: "y", type: "int"}; {DL: span{from: 17, to: 18}, I: 15, N: "y"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 15, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 15, L: span{from: 17, to: 18}, N: "y", P: 14, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 15, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 15, N: "y", T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 15, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 15, L: span{from: 30, to: 31}, N: "z", P: 14, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 15, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 15, N: "z", T: "string"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 15, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 15, L: span{from: 30, to: 31}, N: "z", P: 14, T: "string"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 15, location: span{from: 30, to: 31}, name: "z", type: "string"}; {L: span{from: 30, to: 31}, N: "z", P: 15, T: "string"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 15, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 15, L: span{from: 30, to: 31}, N: "z", P: 14, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 15, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 15, N: "z", T: "string"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 15, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 15, L: span{from: 30, to: 31}, N: "z", P: 14, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 15, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 15, L: span{from: 30, to: 31}, N: "z", P: 14, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 15, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 15, N: "z", T: "string"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 15, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 15, L: span{from: 30, to: 31}, N: "z", P: 14, T: "string"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 15, location: span{from: 30, to: 31}, name: "z", type: "string"}; {DL: span{from: 30, to: 31}, I: 15, N: "z"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 15, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 15, L: span{from: 30, to: 31}, N: "z", P: 14, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 15, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 15, N: "z", T: "string"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 15, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 15, L: span{from: 47, to: 48}, N: "a", P: 14, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 15, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 15, N: "a", T: "string"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 15, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 15, L: span{from: 47, to: 48}, N: "a", P: 14, T: "string"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 15, location: span{from: 47, to: 48}, name: "a", type: "string"}; {L: span{from: 47, to: 48}, N: "a", P: 15, T: "string"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 15, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 15, L: span{from: 47, to: 48}, N: "a", P: 14, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 15, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 15, N: "a", T: "string"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 15, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 15, L: span{from: 47, to: 48}, N: "a", P: 14, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 15, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 15, L: span{from: 47, to: 48}, N: "a", P: 14, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 15, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 15, N: "a", T: "string"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 15, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 15, L: span{from: 47, to: 48}, N: "a", P: 14, T: "string"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 15, location: span{from: 47, to: 48}, name: "a", type: "string"}; {DL: span{from: 47, to: 48}, I: 15, N: "a"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 15, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 15, L: span{from: 47, to: 48}, N: "a", P: 14, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 15, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 15, N: "a", T: "string"}
from 43 to 44: tc.ScopeItem{id: 18, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 18, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 18, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 18, T: tapp{from: "int", to: "string"}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 18, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 18, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 18, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 18, N: "intToString", TF: "int", TT: "string"}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 18, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 18, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 18, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 18, N: "intToString"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 18, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 18, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 18, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 18, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 18, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 18, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 18, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 18, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 18, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 18, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 18, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 18, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 18, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 18, N: "plus"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 18, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 18, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 18, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 18, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 18, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 18, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 18, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 18, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 18, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 18, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 18, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 18, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 18, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 18, N: "concat"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 18, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 18, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 18, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 18, N: "x", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 18, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 18, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 18, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 18, N: "x", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 18, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 18, N: "x", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 18, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 18, N: "x"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 18, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 18, N: "x", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 18, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 18, N: "y", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 18, location: span{from: 17, to: 18}, name: "y", type: "int"}; {L: span{from: 17, to: 18}, N: "y", P: 18, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 18, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 18, N: "y", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 18, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 18, N: "y", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 18, location: span{from: 17, to: 18}, name: "y", type: "int"}; {DL: span{from: 17, to: 18}, I: 18, N: "y"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 18, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 18, N: "y", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 18, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 18, N: "z", T: "string"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 18, location: span{from: 30, to: 31}, name: "z", type: "string"}; {L: span{from: 30, to: 31}, N: "z", P: 18, T: "string"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 18, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 18, N: "z", T: "string"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 18, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 18, N: "z", T: "string"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 18, location: span{from: 30, to: 31}, name: "z", type: "string"}; {DL: span{from: 30, to: 31}, I: 18, N: "z"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 18, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 18, N: "z", T: "string"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 18, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 18, N: "a", T: "string"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 18, location: span{from: 47, to: 48}, name: "a", type: "string"}; {L: span{from: 47, to: 48}, N: "a", P: 18, T: "string"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 18, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 18, N: "a", T: "string"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 18, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 18, N: "a", T: "string"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 18, location: span{from: 47, to: 48}, name: "a", type: "string"}; {DL: span{from: 47, to: 48}, I: 18, N: "a"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 18, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 18, N: "a", T: "string"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 15, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 15, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 15, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 15, T: tapp{from: "int", to: "string"}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 15, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 15, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 15, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 15, N: "intToString", TF: "int", TT: "string"}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 15, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 15, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 15, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 15, N: "intToString"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 15, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 15, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 15, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 15, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 15, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 15, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 15, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 15, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 15, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 15, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 15, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 15, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 15, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 15, N: "plus"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 15, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 15, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 15, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 15, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 15, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 15, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 15, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 15, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 15, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 15, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 15, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 15, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 15, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 15, N: "concat"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 15, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 15, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 15, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 15, N: "x", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 15, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 15, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 15, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 15, N: "x", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 15, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 15, N: "x", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 15, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 15, N: "x"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 15, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 15, N: "x", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 15, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 15, N: "y", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 15, location: span{from: 17, to: 18}, name: "y", type: "int"}; {L: span{from: 17, to: 18}, N: "y", P: 15, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 15, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 15, N: "y", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 15, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 15, N: "y", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 15, location: span{from: 17, to: 18}, name: "y", type: "int"}; {DL: span{from: 17, to: 18}, I: 15, N: "y"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 15, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 15, N: "y", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 15, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 15, N: "z", T: "string"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 15, location: span{from: 30, to: 31}, name: "z", type: "string"}; {L: span{from: 30, to: 31}, N: "z", P: 15, T: "string"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 15, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 15, N: "z", T: "string"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 15, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 15, N: "z", T: "string"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 15, location: span{from: 30, to: 31}, name: "z", type: "string"}; {DL: span{from: 30, to: 31}, I: 15, N: "z"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 15, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 15, N: "z", T: "string"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 15, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 15, N: "a", T: "string"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 15, location: span{from: 47, to: 48}, name: "a", type: "string"}; {L: span{from: 47, to: 48}, N: "a", P: 15, T: "string"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 15, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 15, N: "a", T: "string"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 15, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 15, N: "a", T: "string"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 15, location: span{from: 47, to: 48}, name: "a", type: "string"}; {DL: span{from: 47, to: 48}, I: 15, N: "a"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 15, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 15, N: "a", T: "string"}. Join(ide.CurrentScope, I: 120.id = 119.id) []

ast.FuncCall{argID: 17, funcID: 16, id: 15, location: span{from: 78, to: 84}}.
----
text/emission-log
from null to ast.FuncCall: ast.FuncCall{argID: 17, funcID: 16, id: 15, location: span{from: 78, to: 84}}; {}.  []
  ast.FuncCall{argID: 17, funcID: 16, id: 15, location: span{from: 78, to: 84}}; {}
from ast.FuncCall to 5: ast.FuncCall{argID: 17, funcID: 16, id: 15, location: span{from: 78, to: 84}}; {}. Match(ast.FuncCall{id: I, location: S}; {}) []
  ast.FuncCall{argID: 17, funcID: 16, id: 15, location: span{from: 78, to: 84}}; {I: 15, S: span{from: 78, to: 84}}
from ast.FuncCall to 16: ast.FuncCall{argID: 17, funcID: 16, id: 15, location: span{from: 78, to: 84}}; {}. Match(ast.FuncCall{funcID: I, id: P}; {}) [I]
  ast.FuncCall{argID: 17, funcID: 16, id: 15, location: span{from: 78, to: 84}}; {I: 16, P: 15}
from ast.FuncCall to 19: ast.FuncCall{argID: 17, funcID: 16, id: 15, location: span{from: 78, to: 84}}; {}. Match(ast.FuncCall{argID: I, id: P}; {}) [I]
  ast.FuncCall{argID: 17, funcID: 16, id: 15, location: span{from: 78, to: 84}}; {I: 17, P: 15}
from ast.FuncCall to 34: ast.FuncCall{argID: 17, funcID: 16, id: 15, location: span{from: 78, to: 84}}; {}. Match(ast.FuncCall{argID: AID, funcID: FID, id: I}; {}) [FID]
  ast.FuncCall{argID: 17, funcID: 16, id: 15, location: span{from: 78, to: 84}}; {AID: 17, FID: 16, I: 15}
from ast.FuncCall to 70: ast.FuncCall{argID: 17, funcID: 16, id: 15, location: span{from: 78, to: 84}}; {}. Match(ast.FuncCall{argID: I, id: P}; {}) []
  ast.FuncCall{argID: 17, funcID: 16, id: 15, location: span{from: 78, to: 84}}; {I: 17, P: 15}
from ast.FuncCall to 71: ast.FuncCall{argID: 17, funcID: 16, id: 15, location: span{from: 78, to: 84}}; {}. Match(ast.FuncCall{funcID: I, id: P}; {}) []
  ast.FuncCall{argID: 17, funcID: 16, id: 15, location: span{from: 78, to: 84}}; {I: 16, P: 15}
from ast.FuncCall to 95: ast.FuncCall{argID: 17, funcID: 16, id: 15, location: span{from: 78, to: 84}}; {}. Match(ast.FuncCall{argID: I, funcID: F}; {}) [F]
  ast.FuncCall{argID: 17, funcID: 16, id: 15, location: span{from: 78, to: 84}}; {F: 16, I: 17}
from 5 to 0: ast.FuncCall{argID: 17, funcID: 16, id: 15, location: span{from: 78, to: 84}}; {I: 15, S: span{from: 78, to: 84}}. Union []
  ast.FuncCall{argID: 17, funcID: 16, id: 15, location: span{from: 78, to: 84}}; {I: 15, S: span{from: 78, to: 84}}
from 16 to 17: ast.FuncCall{argID: 17, funcID: 16, id: 15, location: span{from: 78, to: 84}}; {I: 16, P: 15}. Join(ast.ParentExpr, I: 16.funcID = 15.id) []
from 19 to 20: ast.FuncCall{argID: 17, funcID: 16, id: 15, location: span{from: 78, to: 84}}; {I: 17, P: 15}. Join(ast.ParentExpr, I: 19.argID = 18.id) []
from 34 to 36: ast.FuncCall{argID: 17, funcID: 16, id: 15, location: span{from: 78, to: 84}}; {AID: 17, FID: 16, I: 15}. Join(tc.typeFC, FID: 35.id = 34.funcID) [F]
from 70 to 67: ast.FuncCall{argID: 17, funcID: 16, id: 15, location: span{from: 78, to: 84}}; {I: 17, P: 15}. Union []
  ast.FuncCall{argID: 17, funcID: 16, id: 15, location: span{from: 78, to: 84}}; {I: 17, P: 15}
from 71 to 67: ast.FuncCall{argID: 17, funcID: 16, id: 15, location: span{from: 78, to: 84}}; {I: 16, P: 15}. Union []
  ast.FuncCall{argID: 17, funcID: 16, id: 15, location: span{from: 78, to: 84}}; {I: 16, P: 15}
from 95 to 97: ast.FuncCall{argID: 17, funcID: 16, id: 15, location: span{from: 78, to: 84}}; {F: 16, I: 17}. Join(ide.expectedType, F: 96.id = 95.funcID) []
from 0 to ast.Expr: ast.FuncCall{argID: 17, funcID: 16, id: 15, location: span{from: 78, to: 84}}; {I: 15, S: span{from: 78, to: 84}}. Subst({id: I, location: S}) []
  ast.Expr{id: 15, location: span{from: 78, to: 84}}; {I: 15, S: span{from: 78, to: 84}}
from 67 to tc.parentScope: ast.FuncCall{argID: 17, funcID: 16, id: 15, location: span{from: 78, to: 84}}; {I: 17, P: 15}. Subst({id: I, parentID: P}) []
  tc.parentScope{id: 17, parentID: 15}; {I: 17, P: 15}
from 67 to tc.parentScope: ast.FuncCall{argID: 17, funcID: 16, id: 15, location: span{from: 78, to: 84}}; {I: 16, P: 15}. Subst({id: I, parentID: P}) []
  tc.parentScope{id: 16, parentID: 15}; {I: 16, P: 15}
from ast.Expr to 9: ast.Expr{id: 15, location: span{from: 78, to: 84}}; {I: 15, S: span{from: 78, to: 84}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 15, location: span{from: 78, to: 84}}; {I: 15, S: span{from: 78, to: 84}}
from ast.Expr to 12: ast.Expr{id: 15, location: span{from: 78, to: 84}}; {I: 15, S: span{from: 78, to: 84}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 15, location: span{from: 78, to: 84}}; {I: 15, S: span{from: 78, to: 84}}
from ast.Expr to 15: ast.Expr{id: 15, location: span{from: 78, to: 84}}; {I: 15, S: span{from: 78, to: 84}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 15, location: span{from: 78, to: 84}}; {I: 15, S: span{from: 78, to: 84}}
from ast.Expr to 18: ast.Expr{id: 15, location: span{from: 78, to: 84}}; {I: 15, S: span{from: 78, to: 84}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 15, location: span{from: 78, to: 84}}; {I: 15, S: span{from: 78, to: 84}}
from ast.Expr to 21: ast.Expr{id: 15, location: span{from: 78, to: 84}}; {I: 15, S: span{from: 78, to: 84}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 15, location: span{from: 78, to: 84}}; {I: 15, S: span{from: 78, to: 84}}
from ast.Expr to 102: ast.Expr{id: 15, location: span{from: 78, to: 84}}; {I: 15, S: span{from: 78, to: 84}}. Match(ast.Expr{id: UI, location: UL}; {I: UI, S: UL}) [UL]
  ast.Expr{id: 15, location: span{from: 78, to: 84}}; {UI: 15, UL: span{from: 78, to: 84}}
from ast.Expr to 118: ast.Expr{id: 15, location: span{from: 78, to: 84}}; {I: 15, S: span{from: 78, to: 84}}. Match(ast.Expr{id: I, location: span{from: Idx}}; {I: I}) [Idx]
  ast.Expr{id: 15, location: span{from: 78, to: 84}}; {I: 15, Idx: 78}
from ast.Expr to 123: ast.Expr{id: 15, location: span{from: 78, to: 84}}; {I: 15, S: span{from: 78, to: 84}}. Match(ast.Expr{id: I, location: span{from: FIdx, to: TIdx}}; {I: I}) []
  ast.Expr{id: 15, location: span{from: 78, to: 84}}; {FIdx: 78, I: 15, TIdx: 84}
from tc.parentScope to 55: tc.parentScope{id: 17, parentID: 15}; {I: 17, P: 15}. Match(tc.parentScope{id: I, parentID: P}; {I: I, P: P}) [P]
  tc.parentScope{id: 17, parentID: 15}; {I: 17, P: 15}
from tc.parentScope to 55: tc.parentScope{id: 16, parentID: 15}; {I: 16, P: 15}. Match(tc.parentScope{id: I, parentID: P}; {I: I, P: P}) [P]
  tc.parentScope{id: 16, parentID: 15}; {I: 16, P: 15}
from 9 to 11: ast.Expr{id: 15, location: span{from: 78, to: 84}}; {I: 15, S: span{from: 78, to: 84}}. Join(ast.ParentExpr, I: 10.bodyID = 9.id) []
from 12 to 14: ast.Expr{id: 15, location: span{from: 78, to: 84}}; {I: 15, S: span{from: 78, to: 84}}. Join(ast.ParentExpr, I: 13.bindingID = 12.id) []
from 15 to 17: ast.Expr{id: 15, location: span{from: 78, to: 84}}; {I: 15, S: span{from: 78, to: 84}}. Join(ast.ParentExpr, I: 16.funcID = 15.id) []
  ast.ParentExpr{id: 15, location: span{from: 78, to: 84}}; {I: 15, P: 14, S: span{from: 78, to: 84}}
from 18 to 20: ast.Expr{id: 15, location: span{from: 78, to: 84}}; {I: 15, S: span{from: 78, to: 84}}. Join(ast.ParentExpr, I: 19.argID = 18.id) []
from 21 to 23: ast.Expr{id: 15, location: span{from: 78, to: 84}}; {I: 15, S: span{from: 78, to: 84}}. Join(ast.ParentExpr, I: 22.body = 21.id) []
from 102 to 103: ast.Expr{id: 15, location: span{from: 78, to: 84}}; {UI: 15, UL: span{from: 78, to: 84}}. Join(ide.expectedTypeBinding, UL: 102.location = 101.usageLoc) [UI]
from 118 to 119: ast.Expr{id: 15, location: span{from: 78, to: 84}}; {I: 15, Idx: 78}. Join(ide.CurrentScope, Idx: 118.location.from = 117.idx) [I]
from 123 to 124: ast.Expr{id: 15, location: span{from: 78, to: 84}}; {FIdx: 78, I: 15, TIdx: 84}. Join(ide.CurrentType, ) [I]
from 55 to 57: tc.parentScope{id: 17, parentID: 15}; {I: 17, P: 15}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
  tc.ScopeItem{id: 17, parentID: 15}; {I: 17, L: "builtin", N: "intToString", P: 15, T: tapp{from: "int", to: "string"}}
  tc.ScopeItem{id: 17, parentID: 15}; {I: 17, L: "builtin", N: "plus", P: 15, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
  tc.ScopeItem{id: 17, parentID: 15}; {I: 17, L: "builtin", N: "concat", P: 15, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
  tc.ScopeItem{id: 17, parentID: 15}; {I: 17, L: span{from: 4, to: 5}, N: "x", P: 15, T: "int"}
  tc.ScopeItem{id: 17, parentID: 15}; {I: 17, L: span{from: 17, to: 18}, N: "y", P: 15, T: "int"}
  tc.ScopeItem{id: 17, parentID: 15}; {I: 17, L: span{from: 30, to: 31}, N: "z", P: 15, T: "string"}
  tc.ScopeItem{id: 17, parentID: 15}; {I: 17, L: span{from: 47, to: 48}, N: "a", P: 15, T: "string"}
from 55 to 57: tc.parentScope{id: 16, parentID: 15}; {I: 16, P: 15}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
  tc.ScopeItem{id: 16, parentID: 15}; {I: 16, L: "builtin", N: "intToString", P: 15, T: tapp{from: "int", to: "string"}}
  tc.ScopeItem{id: 16, parentID: 15}; {I: 16, L: "builtin", N: "plus", P: 15, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
  tc.ScopeItem{id: 16, parentID: 15}; {I: 16, L: "builtin", N: "concat", P: 15, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
  tc.ScopeItem{id: 16, parentID: 15}; {I: 16, L: span{from: 4, to: 5}, N: "x", P: 15, T: "int"}
  tc.ScopeItem{id: 16, parentID: 15}; {I: 16, L: span{from: 17, to: 18}, N: "y", P: 15, T: "int"}
  tc.ScopeItem{id: 16, parentID: 15}; {I: 16, L: span{from: 30, to: 31}, N: "z", P: 15, T: "string"}
  tc.ScopeItem{id: 16, parentID: 15}; {I: 16, L: span{from: 47, to: 48}, N: "a", P: 15, T: "string"}
from 17 to 8: ast.ParentExpr{id: 15, location: span{from: 78, to: 84}}; {I: 15, P: 14, S: span{from: 78, to: 84}}. Union []
  ast.ParentExpr{id: 15, location: span{from: 78, to: 84}}; {I: 15, P: 14, S: span{from: 78, to: 84}}
from 57 to 51: tc.ScopeItem{id: 17, parentID: 15}; {I: 17, L: "builtin", N: "intToString", P: 15, T: tapp{from: "int", to: "string"}}. Union []
  tc.ScopeItem{id: 17, parentID: 15}; {I: 17, L: "builtin", N: "intToString", P: 15, T: tapp{from: "int", to: "string"}}
from 57 to 51: tc.ScopeItem{id: 17, parentID: 15}; {I: 17, L: "builtin", N: "plus", P: 15, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Union []
  tc.ScopeItem{id: 17, parentID: 15}; {I: 17, L: "builtin", N: "plus", P: 15, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 57 to 51: tc.ScopeItem{id: 17, parentID: 15}; {I: 17, L: "builtin", N: "concat", P: 15, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Union []
  tc.ScopeItem{id: 17, parentID: 15}; {I: 17, L: "builtin", N: "concat", P: 15, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 57 to 51: tc.ScopeItem{id: 17, parentID: 15}; {I: 17, L: span{from: 4, to: 5}, N: "x", P: 15, T: "int"}. Union []
  tc.ScopeItem{id: 17, parentID: 15}; {I: 17, L: span{from: 4, to: 5}, N: "x", P: 15, T: "int"}
from 57 to 51: tc.ScopeItem{id: 17, parentID: 15}; {I: 17, L: span{from: 17, to: 18}, N: "y", P: 15, T: "int"}. Union []
  tc.ScopeItem{id: 17, parentID: 15}; {I: 17, L: span{from: 17, to: 18}, N: "y", P: 15, T: "int"}
from 57 to 51: tc.ScopeItem{id: 17, parentID: 15}; {I: 17, L: span{from: 30, to: 31}, N: "z", P: 15, T: "string"}. Union []
  tc.ScopeItem{id: 17, parentID: 15}; {I: 17, L: span{from: 30, to: 31}, N: "z", P: 15, T: "string"}
from 57 to 51: tc.ScopeItem{id: 17, parentID: 15}; {I: 17, L: span{from: 47, to: 48}, N: "a", P: 15, T: "string"}. Union []
  tc.ScopeItem{id: 17, parentID: 15}; {I: 17, L: span{from: 47, to: 48}, N: "a", P: 15, T: "string"}
from 57 to 51: tc.ScopeItem{id: 16, parentID: 15}; {I: 16, L: "builtin", N: "intToString", P: 15, T: tapp{from: "int", to: "string"}}. Union []
  tc.ScopeItem{id: 16, parentID: 15}; {I: 16, L: "builtin", N: "intToString", P: 15, T: tapp{from: "int", to: "string"}}
from 57 to 51: tc.ScopeItem{id: 16, parentID: 15}; {I: 16, L: "builtin", N: "plus", P: 15, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Union []
  tc.ScopeItem{id: 16, parentID: 15}; {I: 16, L: "builtin", N: "plus", P: 15, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 57 to 51: tc.ScopeItem{id: 16, parentID: 15}; {I: 16, L: "builtin", N: "concat", P: 15, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Union []
  tc.ScopeItem{id: 16, parentID: 15}; {I: 16, L: "builtin", N: "concat", P: 15, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 57 to 51: tc.ScopeItem{id: 16, parentID: 15}; {I: 16, L: span{from: 4, to: 5}, N: "x", P: 15, T: "int"}. Union []
  tc.ScopeItem{id: 16, parentID: 15}; {I: 16, L: span{from: 4, to: 5}, N: "x", P: 15, T: "int"}
from 57 to 51: tc.ScopeItem{id: 16, parentID: 15}; {I: 16, L: span{from: 17, to: 18}, N: "y", P: 15, T: "int"}. Union []
  tc.ScopeItem{id: 16, parentID: 15}; {I: 16, L: span{from: 17, to: 18}, N: "y", P: 15, T: "int"}
from 57 to 51: tc.ScopeItem{id: 16, parentID: 15}; {I: 16, L: span{from: 30, to: 31}, N: "z", P: 15, T: "string"}. Union []
  tc.ScopeItem{id: 16, parentID: 15}; {I: 16, L: span{from: 30, to: 31}, N: "z", P: 15, T: "string"}
from 57 to 51: tc.ScopeItem{id: 16, parentID: 15}; {I: 16, L: span{from: 47, to: 48}, N: "a", P: 15, T: "string"}. Union []
  tc.ScopeItem{id: 16, parentID: 15}; {I: 16, L: span{from: 47, to: 48}, N: "a", P: 15, T: "string"}
from 8 to ast.ParentExpr: ast.ParentExpr{id: 15, location: span{from: 78, to: 84}}; {I: 15, P: 14, S: span{from: 78, to: 84}}. Subst({id: I, parent: P, span: S}) []
  ast.ParentExpr{id: 15, parent: 14, span: span{from: 78, to: 84}}; {I: 15, P: 14, S: span{from: 78, to: 84}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 17, parentID: 15}; {I: 17, L: "builtin", N: "intToString", P: 15, T: tapp{from: "int", to: "string"}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 17, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 17, L: "builtin", N: "intToString", P: 15, T: tapp{from: "int", to: "string"}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 17, parentID: 15}; {I: 17, L: "builtin", N: "plus", P: 15, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 17, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 17, L: "builtin", N: "plus", P: 15, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 17, parentID: 15}; {I: 17, L: "builtin", N: "concat", P: 15, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 17, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 17, L: "builtin", N: "concat", P: 15, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 17, parentID: 15}; {I: 17, L: span{from: 4, to: 5}, N: "x", P: 15, T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 17, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 17, L: span{from: 4, to: 5}, N: "x", P: 15, T: "int"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 17, parentID: 15}; {I: 17, L: span{from: 17, to: 18}, N: "y", P: 15, T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 17, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 17, L: span{from: 17, to: 18}, N: "y", P: 15, T: "int"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 17, parentID: 15}; {I: 17, L: span{from: 30, to: 31}, N: "z", P: 15, T: "string"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 17, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 17, L: span{from: 30, to: 31}, N: "z", P: 15, T: "string"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 17, parentID: 15}; {I: 17, L: span{from: 47, to: 48}, N: "a", P: 15, T: "string"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 17, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 17, L: span{from: 47, to: 48}, N: "a", P: 15, T: "string"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 16, parentID: 15}; {I: 16, L: "builtin", N: "intToString", P: 15, T: tapp{from: "int", to: "string"}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 16, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 16, L: "builtin", N: "intToString", P: 15, T: tapp{from: "int", to: "string"}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 16, parentID: 15}; {I: 16, L: "builtin", N: "plus", P: 15, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 16, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 16, L: "builtin", N: "plus", P: 15, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 16, parentID: 15}; {I: 16, L: "builtin", N: "concat", P: 15, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 16, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, L: "builtin", N: "concat", P: 15, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 16, parentID: 15}; {I: 16, L: span{from: 4, to: 5}, N: "x", P: 15, T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 16, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 16, L: span{from: 4, to: 5}, N: "x", P: 15, T: "int"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 16, parentID: 15}; {I: 16, L: span{from: 17, to: 18}, N: "y", P: 15, T: "int"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 16, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 16, L: span{from: 17, to: 18}, N: "y", P: 15, T: "int"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 16, parentID: 15}; {I: 16, L: span{from: 30, to: 31}, N: "z", P: 15, T: "string"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 16, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 16, L: span{from: 30, to: 31}, N: "z", P: 15, T: "string"}
from 51 to tc.ScopeItem: tc.ScopeItem{id: 16, parentID: 15}; {I: 16, L: span{from: 47, to: 48}, N: "a", P: 15, T: "string"}. Subst({id: I, location: L, name: N, type: T}) []
  tc.ScopeItem{id: 16, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 16, L: span{from: 47, to: 48}, N: "a", P: 15, T: "string"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 17, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 17, L: "builtin", N: "intToString", P: 15, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 17, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 17, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 17, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 17, L: "builtin", N: "intToString", P: 15, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 17, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 17, T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 17, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 17, L: "builtin", N: "intToString", P: 15, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 17, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 17, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 17, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 17, L: "builtin", N: "intToString", P: 15, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 17, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 17, N: "intToString", TF: "int", TT: "string"}
from tc.ScopeItem to 88: tc.ScopeItem{id: 17, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 17, L: "builtin", N: "intToString", P: 15, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 17, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 17, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 17, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 17, L: "builtin", N: "intToString", P: 15, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 17, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 17, N: "intToString"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 17, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 17, L: "builtin", N: "intToString", P: 15, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 17, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 17, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 17, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 17, L: "builtin", N: "plus", P: 15, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 17, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 17, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 17, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 17, L: "builtin", N: "plus", P: 15, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 17, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 17, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 17, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 17, L: "builtin", N: "plus", P: 15, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 17, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 17, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 17, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 17, L: "builtin", N: "plus", P: 15, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 17, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 17, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 17, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 17, L: "builtin", N: "plus", P: 15, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 17, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 17, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 17, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 17, L: "builtin", N: "plus", P: 15, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 17, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 17, N: "plus"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 17, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 17, L: "builtin", N: "plus", P: 15, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 17, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 17, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 17, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 17, L: "builtin", N: "concat", P: 15, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 17, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 17, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 17, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 17, L: "builtin", N: "concat", P: 15, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 17, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 17, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 17, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 17, L: "builtin", N: "concat", P: 15, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 17, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 17, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 17, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 17, L: "builtin", N: "concat", P: 15, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 17, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 17, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 17, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 17, L: "builtin", N: "concat", P: 15, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 17, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 17, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 17, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 17, L: "builtin", N: "concat", P: 15, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 17, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 17, N: "concat"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 17, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 17, L: "builtin", N: "concat", P: 15, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 17, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 17, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 17, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 17, L: span{from: 4, to: 5}, N: "x", P: 15, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 17, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 17, N: "x", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 17, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 17, L: span{from: 4, to: 5}, N: "x", P: 15, T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 17, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 17, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 17, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 17, L: span{from: 4, to: 5}, N: "x", P: 15, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 17, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 17, N: "x", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 17, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 17, L: span{from: 4, to: 5}, N: "x", P: 15, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 17, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 17, L: span{from: 4, to: 5}, N: "x", P: 15, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 17, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 17, N: "x", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 17, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 17, L: span{from: 4, to: 5}, N: "x", P: 15, T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 17, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 17, N: "x"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 17, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 17, L: span{from: 4, to: 5}, N: "x", P: 15, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 17, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 17, N: "x", T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 17, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 17, L: span{from: 17, to: 18}, N: "y", P: 15, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 17, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 17, N: "y", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 17, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 17, L: span{from: 17, to: 18}, N: "y", P: 15, T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 17, location: span{from: 17, to: 18}, name: "y", type: "int"}; {L: span{from: 17, to: 18}, N: "y", P: 17, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 17, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 17, L: span{from: 17, to: 18}, N: "y", P: 15, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 17, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 17, N: "y", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 17, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 17, L: span{from: 17, to: 18}, N: "y", P: 15, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 17, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 17, L: span{from: 17, to: 18}, N: "y", P: 15, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 17, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 17, N: "y", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 17, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 17, L: span{from: 17, to: 18}, N: "y", P: 15, T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 17, location: span{from: 17, to: 18}, name: "y", type: "int"}; {DL: span{from: 17, to: 18}, I: 17, N: "y"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 17, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 17, L: span{from: 17, to: 18}, N: "y", P: 15, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 17, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 17, N: "y", T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 17, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 17, L: span{from: 30, to: 31}, N: "z", P: 15, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 17, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 17, N: "z", T: "string"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 17, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 17, L: span{from: 30, to: 31}, N: "z", P: 15, T: "string"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 17, location: span{from: 30, to: 31}, name: "z", type: "string"}; {L: span{from: 30, to: 31}, N: "z", P: 17, T: "string"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 17, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 17, L: span{from: 30, to: 31}, N: "z", P: 15, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 17, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 17, N: "z", T: "string"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 17, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 17, L: span{from: 30, to: 31}, N: "z", P: 15, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 17, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 17, L: span{from: 30, to: 31}, N: "z", P: 15, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 17, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 17, N: "z", T: "string"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 17, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 17, L: span{from: 30, to: 31}, N: "z", P: 15, T: "string"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 17, location: span{from: 30, to: 31}, name: "z", type: "string"}; {DL: span{from: 30, to: 31}, I: 17, N: "z"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 17, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 17, L: span{from: 30, to: 31}, N: "z", P: 15, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 17, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 17, N: "z", T: "string"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 17, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 17, L: span{from: 47, to: 48}, N: "a", P: 15, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 17, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 17, N: "a", T: "string"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 17, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 17, L: span{from: 47, to: 48}, N: "a", P: 15, T: "string"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 17, location: span{from: 47, to: 48}, name: "a", type: "string"}; {L: span{from: 47, to: 48}, N: "a", P: 17, T: "string"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 17, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 17, L: span{from: 47, to: 48}, N: "a", P: 15, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 17, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 17, N: "a", T: "string"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 17, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 17, L: span{from: 47, to: 48}, N: "a", P: 15, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 17, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 17, L: span{from: 47, to: 48}, N: "a", P: 15, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 17, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 17, N: "a", T: "string"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 17, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 17, L: span{from: 47, to: 48}, N: "a", P: 15, T: "string"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 17, location: span{from: 47, to: 48}, name: "a", type: "string"}; {DL: span{from: 47, to: 48}, I: 17, N: "a"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 17, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 17, L: span{from: 47, to: 48}, N: "a", P: 15, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 17, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 17, N: "a", T: "string"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 16, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 16, L: "builtin", N: "intToString", P: 15, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 16, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 16, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 16, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 16, L: "builtin", N: "intToString", P: 15, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 16, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 16, T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 16, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 16, L: "builtin", N: "intToString", P: 15, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 16, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 16, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 16, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 16, L: "builtin", N: "intToString", P: 15, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 16, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 16, N: "intToString", TF: "int", TT: "string"}
from tc.ScopeItem to 88: tc.ScopeItem{id: 16, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 16, L: "builtin", N: "intToString", P: 15, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 16, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 16, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 16, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 16, L: "builtin", N: "intToString", P: 15, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 16, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 16, N: "intToString"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 16, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 16, L: "builtin", N: "intToString", P: 15, T: tapp{from: "int", to: "string"}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 16, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 16, N: "intToString", T: tapp{from: "int", to: "string"}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 16, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 16, L: "builtin", N: "plus", P: 15, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 16, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 16, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 16, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 16, L: "builtin", N: "plus", P: 15, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 16, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 16, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 16, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 16, L: "builtin", N: "plus", P: 15, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 16, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 16, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 16, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 16, L: "builtin", N: "plus", P: 15, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 16, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 16, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 16, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 16, L: "builtin", N: "plus", P: 15, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 16, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 16, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 16, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 16, L: "builtin", N: "plus", P: 15, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 16, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 16, N: "plus"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 16, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 16, L: "builtin", N: "plus", P: 15, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 16, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 16, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 16, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, L: "builtin", N: "concat", P: 15, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 16, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 56: tc.ScopeItem{id: 16, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, L: "builtin", N: "concat", P: 15, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 16, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 16, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 80: tc.ScopeItem{id: 16, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, L: "builtin", N: "concat", P: 15, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 16, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 85: tc.ScopeItem{id: 16, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, L: "builtin", N: "concat", P: 15, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
  tc.ScopeItem{id: 16, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}
from tc.ScopeItem to 88: tc.ScopeItem{id: 16, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, L: "builtin", N: "concat", P: 15, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 16, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 107: tc.ScopeItem{id: 16, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, L: "builtin", N: "concat", P: 15, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 16, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 16, N: "concat"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 16, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, L: "builtin", N: "concat", P: 15, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 16, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.ScopeItem to 43: tc.ScopeItem{id: 16, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 16, L: span{from: 4, to: 5}, N: "x", P: 15, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 16, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 16, N: "x", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 16, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 16, L: span{from: 4, to: 5}, N: "x", P: 15, T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 16, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 16, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 16, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 16, L: span{from: 4, to: 5}, N: "x", P: 15, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 16, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 16, N: "x", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 16, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 16, L: span{from: 4, to: 5}, N: "x", P: 15, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 16, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 16, L: span{from: 4, to: 5}, N: "x", P: 15, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 16, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 16, N: "x", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 16, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 16, L: span{from: 4, to: 5}, N: "x", P: 15, T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 16, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 16, N: "x"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 16, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 16, L: span{from: 4, to: 5}, N: "x", P: 15, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 16, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 16, N: "x", T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 16, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 16, L: span{from: 17, to: 18}, N: "y", P: 15, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 16, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 16, N: "y", T: "int"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 16, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 16, L: span{from: 17, to: 18}, N: "y", P: 15, T: "int"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 16, location: span{from: 17, to: 18}, name: "y", type: "int"}; {L: span{from: 17, to: 18}, N: "y", P: 16, T: "int"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 16, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 16, L: span{from: 17, to: 18}, N: "y", P: 15, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 16, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 16, N: "y", T: "int"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 16, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 16, L: span{from: 17, to: 18}, N: "y", P: 15, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 16, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 16, L: span{from: 17, to: 18}, N: "y", P: 15, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 16, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 16, N: "y", T: "int"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 16, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 16, L: span{from: 17, to: 18}, N: "y", P: 15, T: "int"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 16, location: span{from: 17, to: 18}, name: "y", type: "int"}; {DL: span{from: 17, to: 18}, I: 16, N: "y"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 16, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 16, L: span{from: 17, to: 18}, N: "y", P: 15, T: "int"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 16, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 16, N: "y", T: "int"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 16, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 16, L: span{from: 30, to: 31}, N: "z", P: 15, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 16, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 16, N: "z", T: "string"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 16, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 16, L: span{from: 30, to: 31}, N: "z", P: 15, T: "string"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 16, location: span{from: 30, to: 31}, name: "z", type: "string"}; {L: span{from: 30, to: 31}, N: "z", P: 16, T: "string"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 16, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 16, L: span{from: 30, to: 31}, N: "z", P: 15, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 16, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 16, N: "z", T: "string"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 16, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 16, L: span{from: 30, to: 31}, N: "z", P: 15, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 16, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 16, L: span{from: 30, to: 31}, N: "z", P: 15, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 16, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 16, N: "z", T: "string"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 16, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 16, L: span{from: 30, to: 31}, N: "z", P: 15, T: "string"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 16, location: span{from: 30, to: 31}, name: "z", type: "string"}; {DL: span{from: 30, to: 31}, I: 16, N: "z"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 16, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 16, L: span{from: 30, to: 31}, N: "z", P: 15, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 16, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 16, N: "z", T: "string"}
from tc.ScopeItem to 43: tc.ScopeItem{id: 16, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 16, L: span{from: 47, to: 48}, N: "a", P: 15, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-N]
  tc.ScopeItem{id: 16, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 16, N: "a", T: "string"}
from tc.ScopeItem to 56: tc.ScopeItem{id: 16, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 16, L: span{from: 47, to: 48}, N: "a", P: 15, T: "string"}. Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T}) [P]
  tc.ScopeItem{id: 16, location: span{from: 47, to: 48}, name: "a", type: "string"}; {L: span{from: 47, to: 48}, N: "a", P: 16, T: "string"}
from tc.ScopeItem to 80: tc.ScopeItem{id: 16, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 16, L: span{from: 47, to: 48}, N: "a", P: 15, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I-T]
  tc.ScopeItem{id: 16, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 16, N: "a", T: "string"}
from tc.ScopeItem to 85: tc.ScopeItem{id: 16, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 16, L: span{from: 47, to: 48}, N: "a", P: 15, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N}) [I-TT]
from tc.ScopeItem to 88: tc.ScopeItem{id: 16, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 16, L: span{from: 47, to: 48}, N: "a", P: 15, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 16, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 16, N: "a", T: "string"}
from tc.ScopeItem to 107: tc.ScopeItem{id: 16, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 16, L: span{from: 47, to: 48}, N: "a", P: 15, T: "string"}. Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N}) [I-N]
  tc.ScopeItem{id: 16, location: span{from: 47, to: 48}, name: "a", type: "string"}; {DL: span{from: 47, to: 48}, I: 16, N: "a"}
from tc.ScopeItem to 120: tc.ScopeItem{id: 16, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 16, L: span{from: 47, to: 48}, N: "a", P: 15, T: "string"}. Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T}) [I]
  tc.ScopeItem{id: 16, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 16, N: "a", T: "string"}
from 43 to 44: tc.ScopeItem{id: 17, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 17, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 17, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 17, T: tapp{from: "int", to: "string"}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 17, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 17, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 17, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 17, N: "intToString", TF: "int", TT: "string"}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 17, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 17, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 17, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 17, N: "intToString"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 17, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 17, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 17, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 17, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 17, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 17, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 17, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 17, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 17, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 17, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 17, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 17, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 17, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 17, N: "plus"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 17, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 17, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 17, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 17, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 17, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 17, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 17, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 17, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 17, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 17, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 17, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 17, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 17, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 17, N: "concat"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 17, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 17, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 17, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 17, N: "x", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 17, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 17, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 17, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 17, N: "x", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 17, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 17, N: "x", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 17, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 17, N: "x"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 17, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 17, N: "x", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 17, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 17, N: "y", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 17, location: span{from: 17, to: 18}, name: "y", type: "int"}; {L: span{from: 17, to: 18}, N: "y", P: 17, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 17, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 17, N: "y", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 17, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 17, N: "y", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 17, location: span{from: 17, to: 18}, name: "y", type: "int"}; {DL: span{from: 17, to: 18}, I: 17, N: "y"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 17, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 17, N: "y", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 17, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 17, N: "z", T: "string"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 17, location: span{from: 30, to: 31}, name: "z", type: "string"}; {L: span{from: 30, to: 31}, N: "z", P: 17, T: "string"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 17, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 17, N: "z", T: "string"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 17, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 17, N: "z", T: "string"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 17, location: span{from: 30, to: 31}, name: "z", type: "string"}; {DL: span{from: 30, to: 31}, I: 17, N: "z"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 17, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 17, N: "z", T: "string"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 17, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 17, N: "a", T: "string"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 17, location: span{from: 47, to: 48}, name: "a", type: "string"}; {L: span{from: 47, to: 48}, N: "a", P: 17, T: "string"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 17, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 17, N: "a", T: "string"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 17, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 17, N: "a", T: "string"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 17, location: span{from: 47, to: 48}, name: "a", type: "string"}; {DL: span{from: 47, to: 48}, I: 17, N: "a"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 17, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 17, N: "a", T: "string"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 16, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 16, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 16, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {L: "builtin", N: "intToString", P: 16, T: tapp{from: "int", to: "string"}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 16, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 16, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 16, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 16, N: "intToString", TF: "int", TT: "string"}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 16, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 16, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 16, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {DL: "builtin", I: 16, N: "intToString"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 16, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 16, N: "intToString", T: tapp{from: "int", to: "string"}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 16, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 16, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 16, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {L: "builtin", N: "plus", P: 16, T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 16, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 16, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 16, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 16, N: "plus", TF: "int", TT: tapp{from: "int", to: "int"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 16, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 16, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 16, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {DL: "builtin", I: 16, N: "plus"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 16, location: "builtin", name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {I: 16, N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 16, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 16, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {L: "builtin", N: "concat", P: 16, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 16, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 85 to 86: tc.ScopeItem{id: 16, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, N: "concat", TF: "string", TT: tapp{from: "string", to: "string"}}. Join(ide.suggestionFunc, I: 85.id = 84.id & TT: 85.type.to = 84.type) []
from 88 to 89: tc.ScopeItem{id: 16, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 16, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {DL: "builtin", I: 16, N: "concat"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 16, location: "builtin", name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 16, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 16, N: "x", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 16, location: span{from: 4, to: 5}, name: "x", type: "int"}; {L: span{from: 4, to: 5}, N: "x", P: 16, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 16, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 16, N: "x", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 16, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 16, N: "x", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 16, location: span{from: 4, to: 5}, name: "x", type: "int"}; {DL: span{from: 4, to: 5}, I: 16, N: "x"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 16, location: span{from: 4, to: 5}, name: "x", type: "int"}; {I: 16, N: "x", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 16, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 16, N: "y", T: "int"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 16, location: span{from: 17, to: 18}, name: "y", type: "int"}; {L: span{from: 17, to: 18}, N: "y", P: 16, T: "int"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 16, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 16, N: "y", T: "int"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 16, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 16, N: "y", T: "int"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 16, location: span{from: 17, to: 18}, name: "y", type: "int"}; {DL: span{from: 17, to: 18}, I: 16, N: "y"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 16, location: span{from: 17, to: 18}, name: "y", type: "int"}; {I: 16, N: "y", T: "int"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 16, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 16, N: "z", T: "string"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 16, location: span{from: 30, to: 31}, name: "z", type: "string"}; {L: span{from: 30, to: 31}, N: "z", P: 16, T: "string"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 16, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 16, N: "z", T: "string"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 16, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 16, N: "z", T: "string"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 16, location: span{from: 30, to: 31}, name: "z", type: "string"}; {DL: span{from: 30, to: 31}, I: 16, N: "z"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 16, location: span{from: 30, to: 31}, name: "z", type: "string"}; {I: 16, N: "z", T: "string"}. Join(ide.CurrentScope, I: 120.id = 119.id) []
from 43 to 44: tc.ScopeItem{id: 16, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 16, N: "a", T: "string"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
from 56 to 57: tc.ScopeItem{id: 16, location: span{from: 47, to: 48}, name: "a", type: "string"}; {L: span{from: 47, to: 48}, N: "a", P: 16, T: "string"}. Join(tc.ScopeItem, P: 56.id = 55.parentID) []
from 80 to 81: tc.ScopeItem{id: 16, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 16, N: "a", T: "string"}. Join(ide.suggestionVar, I: 80.id = 79.id & T: 80.type = 79.type) []
from 88 to 89: tc.ScopeItem{id: 16, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 16, N: "a", T: "string"}. Join(ide.suggestionScope, I: 88.id = 87.id) []
from 107 to 108: tc.ScopeItem{id: 16, location: span{from: 47, to: 48}, name: "a", type: "string"}; {DL: span{from: 47, to: 48}, I: 16, N: "a"}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
from 120 to 121: tc.ScopeItem{id: 16, location: span{from: 47, to: 48}, name: "a", type: "string"}; {I: 16, N: "a", T: "string"}. Join(ide.CurrentScope, I: 120.id = 119.id) []

ast.Var{id: 16, location: span{from: 78, to: 84}, name: "concat"}.
----
text/emission-log
from null to ast.Var: ast.Var{id: 16, location: span{from: 78, to: 84}, name: "concat"}; {}.  []
  ast.Var{id: 16, location: span{from: 78, to: 84}, name: "concat"}; {}
from ast.Var to 3: ast.Var{id: 16, location: span{from: 78, to: 84}, name: "concat"}; {}. Match(ast.Var{id: I, location: S}; {}) []
  ast.Var{id: 16, location: span{from: 78, to: 84}, name: "concat"}; {I: 16, S: span{from: 78, to: 84}}
from ast.Var to 42: ast.Var{id: 16, location: span{from: 78, to: 84}, name: "concat"}; {}. Match(ast.Var{id: I, name: N}; {}) [I-N]
  ast.Var{id: 16, location: span{from: 78, to: 84}, name: "concat"}; {I: 16, N: "concat"}
from ast.Var to 106: ast.Var{id: 16, location: span{from: 78, to: 84}, name: "concat"}; {}. Match(ast.Var{id: I, location: UL, name: N}; {}) [I-N]
  ast.Var{id: 16, location: span{from: 78, to: 84}, name: "concat"}; {I: 16, N: "concat", UL: span{from: 78, to: 84}}
from ast.Var to 179: ast.Var{id: 16, location: span{from: 78, to: 84}, name: "concat"}; {}. Match(ast.Var{location: S}; {}) [S]
  ast.Var{id: 16, location: span{from: 78, to: 84}, name: "concat"}; {S: span{from: 78, to: 84}}
from ast.Var to 182: ast.Var{id: 16, location: span{from: 78, to: 84}, name: "concat"}; {}. Match(ast.Var{location: S}; {}) []
  ast.Var{id: 16, location: span{from: 78, to: 84}, name: "concat"}; {S: span{from: 78, to: 84}}
from ast.Var to 184: ast.Var{id: 16, location: span{from: 78, to: 84}, name: "concat"}; {}. Match(ast.Var{location: S}; {}) [S]
  ast.Var{id: 16, location: span{from: 78, to: 84}, name: "concat"}; {S: span{from: 78, to: 84}}
from 3 to 0: ast.Var{id: 16, location: span{from: 78, to: 84}, name: "concat"}; {I: 16, S: span{from: 78, to: 84}}. Union []
  ast.Var{id: 16, location: span{from: 78, to: 84}, name: "concat"}; {I: 16, S: span{from: 78, to: 84}}
from 42 to 44: ast.Var{id: 16, location: span{from: 78, to: 84}, name: "concat"}; {I: 16, N: "concat"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
  tc.typeVar{id: 16, location: span{from: 78, to: 84}, name: "concat"}; {I: 16, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 106 to 108: ast.Var{id: 16, location: span{from: 78, to: 84}, name: "concat"}; {I: 16, N: "concat", UL: span{from: 78, to: 84}}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
  ide.Usage{id: 16, location: span{from: 78, to: 84}, name: "concat"}; {DL: "builtin", I: 16, N: "concat", UL: span{from: 78, to: 84}}
from 179 to 181: ast.Var{id: 16, location: span{from: 78, to: 84}, name: "concat"}; {S: span{from: 78, to: 84}}. Join(hl.segmentUsage, S: 180.usageLoc = 179.location) []
from 182 to hl.segmentUndefinedVar: ast.Var{id: 16, location: span{from: 78, to: 84}, name: "concat"}; {S: span{from: 78, to: 84}}. Subst({highlight: false, span: S, type: "undefined-var"}) []
  hl.segmentUndefinedVar{highlight: false, span: span{from: 78, to: 84}, type: "undefined-var"}; {S: span{from: 78, to: 84}}
from 184 to 185: ast.Var{id: 16, location: span{from: 78, to: 84}, name: "concat"}; {S: span{from: 78, to: 84}}. Join(hl.segmentUsageHL, S: 184.location = 183.usageLoc) []
from 0 to ast.Expr: ast.Var{id: 16, location: span{from: 78, to: 84}, name: "concat"}; {I: 16, S: span{from: 78, to: 84}}. Subst({id: I, location: S}) []
  ast.Expr{id: 16, location: span{from: 78, to: 84}}; {I: 16, S: span{from: 78, to: 84}}
from 44 to tc.typeVar: tc.typeVar{id: 16, location: span{from: 78, to: 84}, name: "concat"}; {I: 16, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Subst({id: I, type: T}) []
  tc.typeVar{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 108 to ide.Usage: ide.Usage{id: 16, location: span{from: 78, to: 84}, name: "concat"}; {DL: "builtin", I: 16, N: "concat", UL: span{from: 78, to: 84}}. Subst({definitionLoc: DL, name: N, usageLoc: UL}) []
  ide.Usage{definitionLoc: "builtin", name: "concat", usageLoc: span{from: 78, to: 84}}; {DL: "builtin", I: 16, N: "concat", UL: span{from: 78, to: 84}}
from hl.segmentUndefinedVar to 163: hl.segmentUndefinedVar{highlight: false, span: span{from: 78, to: 84}, type: "undefined-var"}; {S: span{from: 78, to: 84}}. Match(hl.segmentUndefinedVar{highlight: H, span: S, type: T}; {S: S}) []
  hl.segmentUndefinedVar{highlight: false, span: span{from: 78, to: 84}, type: "undefined-var"}; {H: false, S: span{from: 78, to: 84}, T: "undefined-var"}
from ast.Expr to 9: ast.Expr{id: 16, location: span{from: 78, to: 84}}; {I: 16, S: span{from: 78, to: 84}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 16, location: span{from: 78, to: 84}}; {I: 16, S: span{from: 78, to: 84}}
from ast.Expr to 12: ast.Expr{id: 16, location: span{from: 78, to: 84}}; {I: 16, S: span{from: 78, to: 84}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 16, location: span{from: 78, to: 84}}; {I: 16, S: span{from: 78, to: 84}}
from ast.Expr to 15: ast.Expr{id: 16, location: span{from: 78, to: 84}}; {I: 16, S: span{from: 78, to: 84}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 16, location: span{from: 78, to: 84}}; {I: 16, S: span{from: 78, to: 84}}
from ast.Expr to 18: ast.Expr{id: 16, location: span{from: 78, to: 84}}; {I: 16, S: span{from: 78, to: 84}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 16, location: span{from: 78, to: 84}}; {I: 16, S: span{from: 78, to: 84}}
from ast.Expr to 21: ast.Expr{id: 16, location: span{from: 78, to: 84}}; {I: 16, S: span{from: 78, to: 84}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 16, location: span{from: 78, to: 84}}; {I: 16, S: span{from: 78, to: 84}}
from ast.Expr to 102: ast.Expr{id: 16, location: span{from: 78, to: 84}}; {I: 16, S: span{from: 78, to: 84}}. Match(ast.Expr{id: UI, location: UL}; {I: UI, S: UL}) [UL]
  ast.Expr{id: 16, location: span{from: 78, to: 84}}; {UI: 16, UL: span{from: 78, to: 84}}
from ast.Expr to 118: ast.Expr{id: 16, location: span{from: 78, to: 84}}; {I: 16, S: span{from: 78, to: 84}}. Match(ast.Expr{id: I, location: span{from: Idx}}; {I: I}) [Idx]
  ast.Expr{id: 16, location: span{from: 78, to: 84}}; {I: 16, Idx: 78}
from ast.Expr to 123: ast.Expr{id: 16, location: span{from: 78, to: 84}}; {I: 16, S: span{from: 78, to: 84}}. Match(ast.Expr{id: I, location: span{from: FIdx, to: TIdx}}; {I: I}) []
  ast.Expr{id: 16, location: span{from: 78, to: 84}}; {FIdx: 78, I: 16, TIdx: 84}
from tc.typeVar to 30: tc.typeVar{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.typeVar{id: I, type: T}; {I: I, T: T}) []
  tc.typeVar{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from ide.Usage to 100: ide.Usage{definitionLoc: "builtin", name: "concat", usageLoc: span{from: 78, to: 84}}; {DL: "builtin", I: 16, N: "concat", UL: span{from: 78, to: 84}}. Match(ide.Usage{definitionLoc: VL, usageLoc: UL}; {DL: VL, UL: UL}) [VL]
  ide.Usage{definitionLoc: "builtin", name: "concat", usageLoc: span{from: 78, to: 84}}; {UL: span{from: 78, to: 84}, VL: "builtin"}
from ide.Usage to 130: ide.Usage{definitionLoc: "builtin", name: "concat", usageLoc: span{from: 78, to: 84}}; {DL: "builtin", I: 16, N: "concat", UL: span{from: 78, to: 84}}. Match(ide.Usage{definitionLoc: DL, usageLoc: span{from: FIdx, to: TIdx}}; {DL: DL}) []
  ide.Usage{definitionLoc: "builtin", name: "concat", usageLoc: span{from: 78, to: 84}}; {DL: "builtin", FIdx: 78, TIdx: 84}
from ide.Usage to 135: ide.Usage{definitionLoc: "builtin", name: "concat", usageLoc: span{from: 78, to: 84}}; {DL: "builtin", I: 16, N: "concat", UL: span{from: 78, to: 84}}. Match(ide.Usage{definitionLoc: span{from: FIdx, to: TIdx}, usageLoc: UL}; {UL: UL}) []
from ide.Usage to 144: ide.Usage{definitionLoc: "builtin", name: "concat", usageLoc: span{from: 78, to: 84}}; {DL: "builtin", I: 16, N: "concat", UL: span{from: 78, to: 84}}. Match(ide.Usage{definitionLoc: span{from: FIdx, to: TIdx}, usageLoc: UL}; {UL: UL}) []
from ide.Usage to 149: ide.Usage{definitionLoc: "builtin", name: "concat", usageLoc: span{from: 78, to: 84}}; {DL: "builtin", I: 16, N: "concat", UL: span{from: 78, to: 84}}. Match(ide.Usage{definitionLoc: DL, usageLoc: span{from: FIdx, to: TIdx}}; {DL: DL}) []
  ide.Usage{definitionLoc: "builtin", name: "concat", usageLoc: span{from: 78, to: 84}}; {DL: "builtin", FIdx: 78, TIdx: 84}
from ide.Usage to 155: ide.Usage{definitionLoc: "builtin", name: "concat", usageLoc: span{from: 78, to: 84}}; {DL: "builtin", I: 16, N: "concat", UL: span{from: 78, to: 84}}. Match(ide.Usage{definitionLoc: DL, usageLoc: UL}; {DL: DL, UL: UL}) [DL]
  ide.Usage{definitionLoc: "builtin", name: "concat", usageLoc: span{from: 78, to: 84}}; {DL: "builtin", UL: span{from: 78, to: 84}}
from ide.Usage to 171: ide.Usage{definitionLoc: "builtin", name: "concat", usageLoc: span{from: 78, to: 84}}; {DL: "builtin", I: 16, N: "concat", UL: span{from: 78, to: 84}}. Match(ide.Usage{definitionLoc: S}; {DL: S}) [S]
  ide.Usage{definitionLoc: "builtin", name: "concat", usageLoc: span{from: 78, to: 84}}; {S: "builtin"}
from ide.Usage to 180: ide.Usage{definitionLoc: "builtin", name: "concat", usageLoc: span{from: 78, to: 84}}; {DL: "builtin", I: 16, N: "concat", UL: span{from: 78, to: 84}}. Match(ide.Usage{usageLoc: S}; {UL: S}) [S]
  ide.Usage{definitionLoc: "builtin", name: "concat", usageLoc: span{from: 78, to: 84}}; {S: span{from: 78, to: 84}}
from 163 to 159: hl.segmentUndefinedVar{highlight: false, span: span{from: 78, to: 84}, type: "undefined-var"}; {H: false, S: span{from: 78, to: 84}, T: "undefined-var"}. Union []
  hl.segmentUndefinedVar{highlight: false, span: span{from: 78, to: 84}, type: "undefined-var"}; {H: false, S: span{from: 78, to: 84}, T: "undefined-var"}
from 9 to 11: ast.Expr{id: 16, location: span{from: 78, to: 84}}; {I: 16, S: span{from: 78, to: 84}}. Join(ast.ParentExpr, I: 10.bodyID = 9.id) []
from 12 to 14: ast.Expr{id: 16, location: span{from: 78, to: 84}}; {I: 16, S: span{from: 78, to: 84}}. Join(ast.ParentExpr, I: 13.bindingID = 12.id) []
from 15 to 17: ast.Expr{id: 16, location: span{from: 78, to: 84}}; {I: 16, S: span{from: 78, to: 84}}. Join(ast.ParentExpr, I: 16.funcID = 15.id) []
  ast.ParentExpr{id: 16, location: span{from: 78, to: 84}}; {I: 16, P: 15, S: span{from: 78, to: 84}}
from 18 to 20: ast.Expr{id: 16, location: span{from: 78, to: 84}}; {I: 16, S: span{from: 78, to: 84}}. Join(ast.ParentExpr, I: 19.argID = 18.id) []
from 21 to 23: ast.Expr{id: 16, location: span{from: 78, to: 84}}; {I: 16, S: span{from: 78, to: 84}}. Join(ast.ParentExpr, I: 22.body = 21.id) []
from 102 to 103: ast.Expr{id: 16, location: span{from: 78, to: 84}}; {UI: 16, UL: span{from: 78, to: 84}}. Join(ide.expectedTypeBinding, UL: 102.location = 101.usageLoc) [UI]
from 118 to 119: ast.Expr{id: 16, location: span{from: 78, to: 84}}; {I: 16, Idx: 78}. Join(ide.CurrentScope, Idx: 118.location.from = 117.idx) [I]
from 123 to 124: ast.Expr{id: 16, location: span{from: 78, to: 84}}; {FIdx: 78, I: 16, TIdx: 84}. Join(ide.CurrentType, ) [I]
from 30 to 24: tc.typeVar{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Union []
  tc.typeVar{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 100 to 101: ide.Usage{definitionLoc: "builtin", name: "concat", usageLoc: span{from: 78, to: 84}}; {UL: span{from: 78, to: 84}, VL: "builtin"}. Join(ide.expectedTypeBinding, VL: 100.definitionLoc = 99.varLoc) [UL]
from 130 to 131: ide.Usage{definitionLoc: "builtin", name: "concat", usageLoc: span{from: 78, to: 84}}; {DL: "builtin", FIdx: 78, TIdx: 84}. Join(ide.DefnForCursor, ) []
from 149 to 151: ide.Usage{definitionLoc: "builtin", name: "concat", usageLoc: span{from: 78, to: 84}}; {DL: "builtin", FIdx: 78, TIdx: 84}. Join(ide.CurrentUsageUsage, ) []
from 155 to 156: ide.Usage{definitionLoc: "builtin", name: "concat", usageLoc: span{from: 78, to: 84}}; {DL: "builtin", UL: span{from: 78, to: 84}}. Join(ide.CurrentUsageUsageIndirect, DL: 155.definitionLoc = 154.defnLoc) []
from 171 to 172: ide.Usage{definitionLoc: "builtin", name: "concat", usageLoc: span{from: 78, to: 84}}; {S: "builtin"}. Join(hl.segmentDefn, S: 171.definitionLoc = 170.span) []
from 180 to 181: ide.Usage{definitionLoc: "builtin", name: "concat", usageLoc: span{from: 78, to: 84}}; {S: span{from: 78, to: 84}}. Join(hl.segmentUsage, S: 180.usageLoc = 179.location) []
  hl.segmentUsage{definitionLoc: "builtin", name: "concat", usageLoc: span{from: 78, to: 84}}; {S: span{from: 78, to: 84}}
from 159 to hl.Segment: hl.segmentUndefinedVar{highlight: false, span: span{from: 78, to: 84}, type: "undefined-var"}; {H: false, S: span{from: 78, to: 84}, T: "undefined-var"}. Subst({highlight: H, span: S, type: T}) []
  hl.Segment{highlight: false, span: span{from: 78, to: 84}, type: "undefined-var"}; {H: false, S: span{from: 78, to: 84}, T: "undefined-var"}
from 17 to 8: ast.ParentExpr{id: 16, location: span{from: 78, to: 84}}; {I: 16, P: 15, S: span{from: 78, to: 84}}. Union []
  ast.ParentExpr{id: 16, location: span{from: 78, to: 84}}; {I: 16, P: 15, S: span{from: 78, to: 84}}
from 24 to tc.Type: tc.typeVar{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Subst({id: I, type: T}) []
  tc.Type{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from 181 to hl.segmentUsage: hl.segmentUsage{definitionLoc: "builtin", name: "concat", usageLoc: span{from: 78, to: 84}}; {S: span{from: 78, to: 84}}. Subst({highlight: false, span: S, type: "usage"}) []
  hl.segmentUsage{highlight: false, span: span{from: 78, to: 84}, type: "usage"}; {S: span{from: 78, to: 84}}
from 8 to ast.ParentExpr: ast.ParentExpr{id: 16, location: span{from: 78, to: 84}}; {I: 16, P: 15, S: span{from: 78, to: 84}}. Subst({id: I, parent: P, span: S}) []
  ast.ParentExpr{id: 16, parent: 15, span: span{from: 78, to: 84}}; {I: 16, P: 15, S: span{from: 78, to: 84}}
from tc.Type to 35: tc.Type{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.Type{id: FID, type: tapp{from: F, to: T}}; {I: FID}) [FID]
  tc.Type{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {F: "string", FID: 16, T: tapp{from: "string", to: "string"}}
from tc.Type to 37: tc.Type{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.Type{id: AID, type: F}; {I: AID, T: F}) [F]
  tc.Type{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {AID: 16, F: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.Type to 40: tc.Type{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.Type{id: BID, type: T}; {I: BID, T: T}) [BID]
  tc.Type{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {BID: 16, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.Type to 48: tc.Type{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.Type{id: B, type: R}; {I: B, T: R}) []
  tc.Type{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {B: 16, R: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.Type to 62: tc.Type{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.Type{id: B, type: T}; {I: B, T: T}) [B]
  tc.Type{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {B: 16, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from tc.Type to 96: tc.Type{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.Type{id: F, type: tapp{from: T}}; {I: F}) [F]
  tc.Type{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {F: 16, T: "string"}
from tc.Type to 125: tc.Type{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Match(tc.Type{id: I, type: T}; {I: I, T: T}) [I]
  tc.Type{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}
from hl.segmentUsage to 162: hl.segmentUsage{highlight: false, span: span{from: 78, to: 84}, type: "usage"}; {S: span{from: 78, to: 84}}. Match(hl.segmentUsage{highlight: H, span: S, type: T}; {S: S}) []
  hl.segmentUsage{highlight: false, span: span{from: 78, to: 84}, type: "usage"}; {H: false, S: span{from: 78, to: 84}, T: "usage"}
from 35 to 36: tc.Type{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {F: "string", FID: 16, T: tapp{from: "string", to: "string"}}. Join(tc.typeFC, FID: 35.id = 34.funcID) [F]
  tc.typeFC{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {AID: 17, F: "string", FID: 16, I: 15, T: tapp{from: "string", to: "string"}}
from 37 to 38: tc.Type{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {AID: 16, F: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.typeFC, F: 37.type = 36.type.from) []
from 40 to 41: tc.Type{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {BID: 16, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.typeLet, BID: 40.id = 39.bodyID) []
from 48 to 49: tc.Type{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {B: 16, R: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.typeLambda, ) []
from 62 to 63: tc.Type{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {B: 16, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(tc.scopeLet, B: 62.id = 61.bindingID) []
from 96 to 97: tc.Type{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {F: 16, T: "string"}. Join(ide.expectedType, F: 96.id = 95.funcID) []
  ide.expectedType{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {F: 16, I: 17, T: "string"}
from 125 to 126: tc.Type{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {I: 16, T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}. Join(ide.CurrentType, I: 125.id = 124.id) []
from 162 to 159: hl.segmentUsage{highlight: false, span: span{from: 78, to: 84}, type: "usage"}; {H: false, S: span{from: 78, to: 84}, T: "usage"}. Union []
  hl.segmentUsage{highlight: false, span: span{from: 78, to: 84}, type: "usage"}; {H: false, S: span{from: 78, to: 84}, T: "usage"}
from 36 to 38: tc.typeFC{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {AID: 17, F: "string", FID: 16, I: 15, T: tapp{from: "string", to: "string"}}. Join(tc.typeFC, F: 37.type = 36.type.from) []
from 97 to 90: ide.expectedType{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {F: 16, I: 17, T: "string"}. Union []
  ide.expectedType{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {F: 16, I: 17, T: "string"}
from 159 to hl.Segment: hl.segmentUsage{highlight: false, span: span{from: 78, to: 84}, type: "usage"}; {H: false, S: span{from: 78, to: 84}, T: "usage"}. Subst({highlight: H, span: S, type: T}) []
  hl.Segment{highlight: false, span: span{from: 78, to: 84}, type: "usage"}; {H: false, S: span{from: 78, to: 84}, T: "usage"}
from 90 to ide.expectedType: ide.expectedType{id: 16, type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {F: 16, I: 17, T: "string"}. Subst({id: I, type: T}) []
  ide.expectedType{id: 17, type: "string"}; {F: 16, I: 17, T: "string"}
from ide.expectedType to 78: ide.expectedType{id: 17, type: "string"}; {F: 16, I: 17, T: "string"}. Match(ide.expectedType{id: I, type: T}; {I: I, T: T}) [I]
  ide.expectedType{id: 17, type: "string"}; {I: 17, T: "string"}
from ide.expectedType to 83: ide.expectedType{id: 17, type: "string"}; {F: 16, I: 17, T: "string"}. Match(ide.expectedType{id: I, type: TT}; {I: I, T: TT}) [I]
  ide.expectedType{id: 17, type: "string"}; {I: 17, TT: "string"}
from ide.expectedType to 93: ide.expectedType{id: 17, type: "string"}; {F: 16, I: 17, T: "string"}. Match(ide.expectedType{id: L, type: T}; {I: L, T: T}) [L]
  ide.expectedType{id: 17, type: "string"}; {L: 17, T: "string"}
from ide.expectedType to 104: ide.expectedType{id: 17, type: "string"}; {F: 16, I: 17, T: "string"}. Match(ide.expectedType{id: UI, type: T}; {I: UI, T: T}) [UI]
  ide.expectedType{id: 17, type: "string"}; {T: "string", UI: 17}
from 78 to 79: ide.expectedType{id: 17, type: "string"}; {I: 17, T: "string"}. Join(ide.suggestionVar, I: 78.id = 77.id) [I-T]
from 83 to 84: ide.expectedType{id: 17, type: "string"}; {I: 17, TT: "string"}. Join(ide.suggestionFunc, I: 83.id = 82.id) [I-TT]
from 93 to 94: ide.expectedType{id: 17, type: "string"}; {L: 17, T: "string"}. Join(ide.expectedType, L: 93.id = 92.id) []
from 104 to 105: ide.expectedType{id: 17, type: "string"}; {T: "string", UI: 17}. Join(ide.expectedTypeBinding, UI: 104.id = 103.id) []

ast.Var{id: 17, location: span{from: 85, to: 86}, name: "a"}.
----
text/emission-log
from null to ast.Var: ast.Var{id: 17, location: span{from: 85, to: 86}, name: "a"}; {}.  []
  ast.Var{id: 17, location: span{from: 85, to: 86}, name: "a"}; {}
from ast.Var to 3: ast.Var{id: 17, location: span{from: 85, to: 86}, name: "a"}; {}. Match(ast.Var{id: I, location: S}; {}) []
  ast.Var{id: 17, location: span{from: 85, to: 86}, name: "a"}; {I: 17, S: span{from: 85, to: 86}}
from ast.Var to 42: ast.Var{id: 17, location: span{from: 85, to: 86}, name: "a"}; {}. Match(ast.Var{id: I, name: N}; {}) [I-N]
  ast.Var{id: 17, location: span{from: 85, to: 86}, name: "a"}; {I: 17, N: "a"}
from ast.Var to 106: ast.Var{id: 17, location: span{from: 85, to: 86}, name: "a"}; {}. Match(ast.Var{id: I, location: UL, name: N}; {}) [I-N]
  ast.Var{id: 17, location: span{from: 85, to: 86}, name: "a"}; {I: 17, N: "a", UL: span{from: 85, to: 86}}
from ast.Var to 179: ast.Var{id: 17, location: span{from: 85, to: 86}, name: "a"}; {}. Match(ast.Var{location: S}; {}) [S]
  ast.Var{id: 17, location: span{from: 85, to: 86}, name: "a"}; {S: span{from: 85, to: 86}}
from ast.Var to 182: ast.Var{id: 17, location: span{from: 85, to: 86}, name: "a"}; {}. Match(ast.Var{location: S}; {}) []
  ast.Var{id: 17, location: span{from: 85, to: 86}, name: "a"}; {S: span{from: 85, to: 86}}
from ast.Var to 184: ast.Var{id: 17, location: span{from: 85, to: 86}, name: "a"}; {}. Match(ast.Var{location: S}; {}) [S]
  ast.Var{id: 17, location: span{from: 85, to: 86}, name: "a"}; {S: span{from: 85, to: 86}}
from 3 to 0: ast.Var{id: 17, location: span{from: 85, to: 86}, name: "a"}; {I: 17, S: span{from: 85, to: 86}}. Union []
  ast.Var{id: 17, location: span{from: 85, to: 86}, name: "a"}; {I: 17, S: span{from: 85, to: 86}}
from 42 to 44: ast.Var{id: 17, location: span{from: 85, to: 86}, name: "a"}; {I: 17, N: "a"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
  tc.typeVar{id: 17, location: span{from: 85, to: 86}, name: "a"}; {I: 17, N: "a", T: "string"}
from 106 to 108: ast.Var{id: 17, location: span{from: 85, to: 86}, name: "a"}; {I: 17, N: "a", UL: span{from: 85, to: 86}}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
  ide.Usage{id: 17, location: span{from: 85, to: 86}, name: "a"}; {DL: span{from: 47, to: 48}, I: 17, N: "a", UL: span{from: 85, to: 86}}
from 179 to 181: ast.Var{id: 17, location: span{from: 85, to: 86}, name: "a"}; {S: span{from: 85, to: 86}}. Join(hl.segmentUsage, S: 180.usageLoc = 179.location) []
from 182 to hl.segmentUndefinedVar: ast.Var{id: 17, location: span{from: 85, to: 86}, name: "a"}; {S: span{from: 85, to: 86}}. Subst({highlight: false, span: S, type: "undefined-var"}) []
  hl.segmentUndefinedVar{highlight: false, span: span{from: 85, to: 86}, type: "undefined-var"}; {S: span{from: 85, to: 86}}
from 184 to 185: ast.Var{id: 17, location: span{from: 85, to: 86}, name: "a"}; {S: span{from: 85, to: 86}}. Join(hl.segmentUsageHL, S: 184.location = 183.usageLoc) []
from 0 to ast.Expr: ast.Var{id: 17, location: span{from: 85, to: 86}, name: "a"}; {I: 17, S: span{from: 85, to: 86}}. Subst({id: I, location: S}) []
  ast.Expr{id: 17, location: span{from: 85, to: 86}}; {I: 17, S: span{from: 85, to: 86}}
from 44 to tc.typeVar: tc.typeVar{id: 17, location: span{from: 85, to: 86}, name: "a"}; {I: 17, N: "a", T: "string"}. Subst({id: I, type: T}) []
  tc.typeVar{id: 17, type: "string"}; {I: 17, N: "a", T: "string"}
from 108 to ide.Usage: ide.Usage{id: 17, location: span{from: 85, to: 86}, name: "a"}; {DL: span{from: 47, to: 48}, I: 17, N: "a", UL: span{from: 85, to: 86}}. Subst({definitionLoc: DL, name: N, usageLoc: UL}) []
  ide.Usage{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {DL: span{from: 47, to: 48}, I: 17, N: "a", UL: span{from: 85, to: 86}}
from hl.segmentUndefinedVar to 163: hl.segmentUndefinedVar{highlight: false, span: span{from: 85, to: 86}, type: "undefined-var"}; {S: span{from: 85, to: 86}}. Match(hl.segmentUndefinedVar{highlight: H, span: S, type: T}; {S: S}) []
  hl.segmentUndefinedVar{highlight: false, span: span{from: 85, to: 86}, type: "undefined-var"}; {H: false, S: span{from: 85, to: 86}, T: "undefined-var"}
from ast.Expr to 9: ast.Expr{id: 17, location: span{from: 85, to: 86}}; {I: 17, S: span{from: 85, to: 86}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 17, location: span{from: 85, to: 86}}; {I: 17, S: span{from: 85, to: 86}}
from ast.Expr to 12: ast.Expr{id: 17, location: span{from: 85, to: 86}}; {I: 17, S: span{from: 85, to: 86}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 17, location: span{from: 85, to: 86}}; {I: 17, S: span{from: 85, to: 86}}
from ast.Expr to 15: ast.Expr{id: 17, location: span{from: 85, to: 86}}; {I: 17, S: span{from: 85, to: 86}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 17, location: span{from: 85, to: 86}}; {I: 17, S: span{from: 85, to: 86}}
from ast.Expr to 18: ast.Expr{id: 17, location: span{from: 85, to: 86}}; {I: 17, S: span{from: 85, to: 86}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 17, location: span{from: 85, to: 86}}; {I: 17, S: span{from: 85, to: 86}}
from ast.Expr to 21: ast.Expr{id: 17, location: span{from: 85, to: 86}}; {I: 17, S: span{from: 85, to: 86}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 17, location: span{from: 85, to: 86}}; {I: 17, S: span{from: 85, to: 86}}
from ast.Expr to 102: ast.Expr{id: 17, location: span{from: 85, to: 86}}; {I: 17, S: span{from: 85, to: 86}}. Match(ast.Expr{id: UI, location: UL}; {I: UI, S: UL}) [UL]
  ast.Expr{id: 17, location: span{from: 85, to: 86}}; {UI: 17, UL: span{from: 85, to: 86}}
from ast.Expr to 118: ast.Expr{id: 17, location: span{from: 85, to: 86}}; {I: 17, S: span{from: 85, to: 86}}. Match(ast.Expr{id: I, location: span{from: Idx}}; {I: I}) [Idx]
  ast.Expr{id: 17, location: span{from: 85, to: 86}}; {I: 17, Idx: 85}
from ast.Expr to 123: ast.Expr{id: 17, location: span{from: 85, to: 86}}; {I: 17, S: span{from: 85, to: 86}}. Match(ast.Expr{id: I, location: span{from: FIdx, to: TIdx}}; {I: I}) []
  ast.Expr{id: 17, location: span{from: 85, to: 86}}; {FIdx: 85, I: 17, TIdx: 86}
from tc.typeVar to 30: tc.typeVar{id: 17, type: "string"}; {I: 17, N: "a", T: "string"}. Match(tc.typeVar{id: I, type: T}; {I: I, T: T}) []
  tc.typeVar{id: 17, type: "string"}; {I: 17, T: "string"}
from ide.Usage to 100: ide.Usage{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {DL: span{from: 47, to: 48}, I: 17, N: "a", UL: span{from: 85, to: 86}}. Match(ide.Usage{definitionLoc: VL, usageLoc: UL}; {DL: VL, UL: UL}) [VL]
  ide.Usage{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {UL: span{from: 85, to: 86}, VL: span{from: 47, to: 48}}
from ide.Usage to 130: ide.Usage{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {DL: span{from: 47, to: 48}, I: 17, N: "a", UL: span{from: 85, to: 86}}. Match(ide.Usage{definitionLoc: DL, usageLoc: span{from: FIdx, to: TIdx}}; {DL: DL}) []
  ide.Usage{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {DL: span{from: 47, to: 48}, FIdx: 85, TIdx: 86}
from ide.Usage to 135: ide.Usage{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {DL: span{from: 47, to: 48}, I: 17, N: "a", UL: span{from: 85, to: 86}}. Match(ide.Usage{definitionLoc: span{from: FIdx, to: TIdx}, usageLoc: UL}; {UL: UL}) []
  ide.Usage{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {FIdx: 47, TIdx: 48, UL: span{from: 85, to: 86}}
from ide.Usage to 144: ide.Usage{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {DL: span{from: 47, to: 48}, I: 17, N: "a", UL: span{from: 85, to: 86}}. Match(ide.Usage{definitionLoc: span{from: FIdx, to: TIdx}, usageLoc: UL}; {UL: UL}) []
  ide.Usage{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {FIdx: 47, TIdx: 48, UL: span{from: 85, to: 86}}
from ide.Usage to 149: ide.Usage{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {DL: span{from: 47, to: 48}, I: 17, N: "a", UL: span{from: 85, to: 86}}. Match(ide.Usage{definitionLoc: DL, usageLoc: span{from: FIdx, to: TIdx}}; {DL: DL}) []
  ide.Usage{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {DL: span{from: 47, to: 48}, FIdx: 85, TIdx: 86}
from ide.Usage to 155: ide.Usage{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {DL: span{from: 47, to: 48}, I: 17, N: "a", UL: span{from: 85, to: 86}}. Match(ide.Usage{definitionLoc: DL, usageLoc: UL}; {DL: DL, UL: UL}) [DL]
  ide.Usage{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {DL: span{from: 47, to: 48}, UL: span{from: 85, to: 86}}
from ide.Usage to 171: ide.Usage{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {DL: span{from: 47, to: 48}, I: 17, N: "a", UL: span{from: 85, to: 86}}. Match(ide.Usage{definitionLoc: S}; {DL: S}) [S]
  ide.Usage{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {S: span{from: 47, to: 48}}
from ide.Usage to 180: ide.Usage{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {DL: span{from: 47, to: 48}, I: 17, N: "a", UL: span{from: 85, to: 86}}. Match(ide.Usage{usageLoc: S}; {UL: S}) [S]
  ide.Usage{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {S: span{from: 85, to: 86}}
from 163 to 159: hl.segmentUndefinedVar{highlight: false, span: span{from: 85, to: 86}, type: "undefined-var"}; {H: false, S: span{from: 85, to: 86}, T: "undefined-var"}. Union []
  hl.segmentUndefinedVar{highlight: false, span: span{from: 85, to: 86}, type: "undefined-var"}; {H: false, S: span{from: 85, to: 86}, T: "undefined-var"}
from 9 to 11: ast.Expr{id: 17, location: span{from: 85, to: 86}}; {I: 17, S: span{from: 85, to: 86}}. Join(ast.ParentExpr, I: 10.bodyID = 9.id) []
from 12 to 14: ast.Expr{id: 17, location: span{from: 85, to: 86}}; {I: 17, S: span{from: 85, to: 86}}. Join(ast.ParentExpr, I: 13.bindingID = 12.id) []
from 15 to 17: ast.Expr{id: 17, location: span{from: 85, to: 86}}; {I: 17, S: span{from: 85, to: 86}}. Join(ast.ParentExpr, I: 16.funcID = 15.id) []
from 18 to 20: ast.Expr{id: 17, location: span{from: 85, to: 86}}; {I: 17, S: span{from: 85, to: 86}}. Join(ast.ParentExpr, I: 19.argID = 18.id) []
  ast.ParentExpr{id: 17, location: span{from: 85, to: 86}}; {I: 17, P: 15, S: span{from: 85, to: 86}}
from 21 to 23: ast.Expr{id: 17, location: span{from: 85, to: 86}}; {I: 17, S: span{from: 85, to: 86}}. Join(ast.ParentExpr, I: 22.body = 21.id) []
from 102 to 103: ast.Expr{id: 17, location: span{from: 85, to: 86}}; {UI: 17, UL: span{from: 85, to: 86}}. Join(ide.expectedTypeBinding, UL: 102.location = 101.usageLoc) [UI]
from 118 to 119: ast.Expr{id: 17, location: span{from: 85, to: 86}}; {I: 17, Idx: 85}. Join(ide.CurrentScope, Idx: 118.location.from = 117.idx) [I]
from 123 to 124: ast.Expr{id: 17, location: span{from: 85, to: 86}}; {FIdx: 85, I: 17, TIdx: 86}. Join(ide.CurrentType, ) [I]
from 30 to 24: tc.typeVar{id: 17, type: "string"}; {I: 17, T: "string"}. Union []
  tc.typeVar{id: 17, type: "string"}; {I: 17, T: "string"}
from 100 to 101: ide.Usage{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {UL: span{from: 85, to: 86}, VL: span{from: 47, to: 48}}. Join(ide.expectedTypeBinding, VL: 100.definitionLoc = 99.varLoc) [UL]
  ide.expectedTypeBinding{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {I: 7, UL: span{from: 85, to: 86}, VL: span{from: 47, to: 48}}
from 130 to 131: ide.Usage{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {DL: span{from: 47, to: 48}, FIdx: 85, TIdx: 86}. Join(ide.DefnForCursor, ) []
from 135 to 136: ide.Usage{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {FIdx: 47, TIdx: 48, UL: span{from: 85, to: 86}}. Join(ide.UsageForCursor, ) []
from 144 to 146: ide.Usage{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {FIdx: 47, TIdx: 48, UL: span{from: 85, to: 86}}. Join(ide.CurrentUsageDefn, ) []
from 149 to 151: ide.Usage{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {DL: span{from: 47, to: 48}, FIdx: 85, TIdx: 86}. Join(ide.CurrentUsageUsage, ) []
from 155 to 156: ide.Usage{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {DL: span{from: 47, to: 48}, UL: span{from: 85, to: 86}}. Join(ide.CurrentUsageUsageIndirect, DL: 155.definitionLoc = 154.defnLoc) []
from 171 to 172: ide.Usage{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {S: span{from: 47, to: 48}}. Join(hl.segmentDefn, S: 171.definitionLoc = 170.span) []
  hl.segmentDefn{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {S: span{from: 47, to: 48}}
from 180 to 181: ide.Usage{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {S: span{from: 85, to: 86}}. Join(hl.segmentUsage, S: 180.usageLoc = 179.location) []
  hl.segmentUsage{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {S: span{from: 85, to: 86}}
from 159 to hl.Segment: hl.segmentUndefinedVar{highlight: false, span: span{from: 85, to: 86}, type: "undefined-var"}; {H: false, S: span{from: 85, to: 86}, T: "undefined-var"}. Subst({highlight: H, span: S, type: T}) []
  hl.Segment{highlight: false, span: span{from: 85, to: 86}, type: "undefined-var"}; {H: false, S: span{from: 85, to: 86}, T: "undefined-var"}
from 20 to 8: ast.ParentExpr{id: 17, location: span{from: 85, to: 86}}; {I: 17, P: 15, S: span{from: 85, to: 86}}. Union []
  ast.ParentExpr{id: 17, location: span{from: 85, to: 86}}; {I: 17, P: 15, S: span{from: 85, to: 86}}
from 24 to tc.Type: tc.typeVar{id: 17, type: "string"}; {I: 17, T: "string"}. Subst({id: I, type: T}) []
  tc.Type{id: 17, type: "string"}; {I: 17, T: "string"}
from 101 to 103: ide.expectedTypeBinding{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {I: 7, UL: span{from: 85, to: 86}, VL: span{from: 47, to: 48}}. Join(ide.expectedTypeBinding, UL: 102.location = 101.usageLoc) [UI]
  ide.expectedTypeBinding{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {I: 7, UI: 17, UL: span{from: 85, to: 86}, VL: span{from: 47, to: 48}}
from 172 to hl.segmentDefn: hl.segmentDefn{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {S: span{from: 47, to: 48}}. Subst({highlight: false, span: S, type: "defn"}) []
  hl.segmentDefn{highlight: false, span: span{from: 47, to: 48}, type: "defn"}; {S: span{from: 47, to: 48}}
from 181 to hl.segmentUsage: hl.segmentUsage{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {S: span{from: 85, to: 86}}. Subst({highlight: false, span: S, type: "usage"}) []
  hl.segmentUsage{highlight: false, span: span{from: 85, to: 86}, type: "usage"}; {S: span{from: 85, to: 86}}
from 8 to ast.ParentExpr: ast.ParentExpr{id: 17, location: span{from: 85, to: 86}}; {I: 17, P: 15, S: span{from: 85, to: 86}}. Subst({id: I, parent: P, span: S}) []
  ast.ParentExpr{id: 17, parent: 15, span: span{from: 85, to: 86}}; {I: 17, P: 15, S: span{from: 85, to: 86}}
from tc.Type to 35: tc.Type{id: 17, type: "string"}; {I: 17, T: "string"}. Match(tc.Type{id: FID, type: tapp{from: F, to: T}}; {I: FID}) [FID]
from tc.Type to 37: tc.Type{id: 17, type: "string"}; {I: 17, T: "string"}. Match(tc.Type{id: AID, type: F}; {I: AID, T: F}) [F]
  tc.Type{id: 17, type: "string"}; {AID: 17, F: "string"}
from tc.Type to 40: tc.Type{id: 17, type: "string"}; {I: 17, T: "string"}. Match(tc.Type{id: BID, type: T}; {I: BID, T: T}) [BID]
  tc.Type{id: 17, type: "string"}; {BID: 17, T: "string"}
from tc.Type to 48: tc.Type{id: 17, type: "string"}; {I: 17, T: "string"}. Match(tc.Type{id: B, type: R}; {I: B, T: R}) []
  tc.Type{id: 17, type: "string"}; {B: 17, R: "string"}
from tc.Type to 62: tc.Type{id: 17, type: "string"}; {I: 17, T: "string"}. Match(tc.Type{id: B, type: T}; {I: B, T: T}) [B]
  tc.Type{id: 17, type: "string"}; {B: 17, T: "string"}
from tc.Type to 96: tc.Type{id: 17, type: "string"}; {I: 17, T: "string"}. Match(tc.Type{id: F, type: tapp{from: T}}; {I: F}) [F]
from tc.Type to 125: tc.Type{id: 17, type: "string"}; {I: 17, T: "string"}. Match(tc.Type{id: I, type: T}; {I: I, T: T}) [I]
  tc.Type{id: 17, type: "string"}; {I: 17, T: "string"}
from 103 to 105: ide.expectedTypeBinding{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {I: 7, UI: 17, UL: span{from: 85, to: 86}, VL: span{from: 47, to: 48}}. Join(ide.expectedTypeBinding, UI: 104.id = 103.id) []
  ide.expectedTypeBinding{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {I: 7, T: "string", UI: 17, UL: span{from: 85, to: 86}, VL: span{from: 47, to: 48}}
from hl.segmentDefn to 160: hl.segmentDefn{highlight: false, span: span{from: 47, to: 48}, type: "defn"}; {S: span{from: 47, to: 48}}. Match(hl.segmentDefn{highlight: H, span: S, type: T}; {S: S}) []
  hl.segmentDefn{highlight: false, span: span{from: 47, to: 48}, type: "defn"}; {H: false, S: span{from: 47, to: 48}, T: "defn"}
from hl.segmentUsage to 162: hl.segmentUsage{highlight: false, span: span{from: 85, to: 86}, type: "usage"}; {S: span{from: 85, to: 86}}. Match(hl.segmentUsage{highlight: H, span: S, type: T}; {S: S}) []
  hl.segmentUsage{highlight: false, span: span{from: 85, to: 86}, type: "usage"}; {H: false, S: span{from: 85, to: 86}, T: "usage"}
from 37 to 38: tc.Type{id: 17, type: "string"}; {AID: 17, F: "string"}. Join(tc.typeFC, F: 37.type = 36.type.from) []
  tc.typeFC{id: 17, type: "string"}; {AID: 17, F: "string", FID: 16, I: 15, T: tapp{from: "string", to: "string"}}
from 40 to 41: tc.Type{id: 17, type: "string"}; {BID: 17, T: "string"}. Join(tc.typeLet, BID: 40.id = 39.bodyID) []
from 48 to 49: tc.Type{id: 17, type: "string"}; {B: 17, R: "string"}. Join(tc.typeLambda, ) []
from 62 to 63: tc.Type{id: 17, type: "string"}; {B: 17, T: "string"}. Join(tc.scopeLet, B: 62.id = 61.bindingID) []
from 125 to 126: tc.Type{id: 17, type: "string"}; {I: 17, T: "string"}. Join(ide.CurrentType, I: 125.id = 124.id) []
from 105 to ide.expectedTypeBinding: ide.expectedTypeBinding{definitionLoc: span{from: 47, to: 48}, name: "a", usageLoc: span{from: 85, to: 86}}; {I: 7, T: "string", UI: 17, UL: span{from: 85, to: 86}, VL: span{from: 47, to: 48}}. Subst({id: I, type: T}) []
  ide.expectedTypeBinding{id: 7, type: "string"}; {I: 7, T: "string", UI: 17, UL: span{from: 85, to: 86}, VL: span{from: 47, to: 48}}
from 160 to 159: hl.segmentDefn{highlight: false, span: span{from: 47, to: 48}, type: "defn"}; {H: false, S: span{from: 47, to: 48}, T: "defn"}. Union []
  hl.segmentDefn{highlight: false, span: span{from: 47, to: 48}, type: "defn"}; {H: false, S: span{from: 47, to: 48}, T: "defn"}
from 162 to 159: hl.segmentUsage{highlight: false, span: span{from: 85, to: 86}, type: "usage"}; {H: false, S: span{from: 85, to: 86}, T: "usage"}. Union []
  hl.segmentUsage{highlight: false, span: span{from: 85, to: 86}, type: "usage"}; {H: false, S: span{from: 85, to: 86}, T: "usage"}
from 38 to tc.typeFC: tc.typeFC{id: 17, type: "string"}; {AID: 17, F: "string", FID: 16, I: 15, T: tapp{from: "string", to: "string"}}. Subst({id: I, type: T}) []
  tc.typeFC{id: 15, type: tapp{from: "string", to: "string"}}; {AID: 17, F: "string", FID: 16, I: 15, T: tapp{from: "string", to: "string"}}
from ide.expectedTypeBinding to 98: ide.expectedTypeBinding{id: 7, type: "string"}; {I: 7, T: "string", UI: 17, UL: span{from: 85, to: 86}, VL: span{from: 47, to: 48}}. Match(ide.expectedTypeBinding{id: I, type: T}; {I: I, T: T}) []
  ide.expectedTypeBinding{id: 7, type: "string"}; {I: 7, T: "string"}
from 159 to hl.Segment: hl.segmentDefn{highlight: false, span: span{from: 47, to: 48}, type: "defn"}; {H: false, S: span{from: 47, to: 48}, T: "defn"}. Subst({highlight: H, span: S, type: T}) []
  hl.Segment{highlight: false, span: span{from: 47, to: 48}, type: "defn"}; {H: false, S: span{from: 47, to: 48}, T: "defn"}
from 159 to hl.Segment: hl.segmentUsage{highlight: false, span: span{from: 85, to: 86}, type: "usage"}; {H: false, S: span{from: 85, to: 86}, T: "usage"}. Subst({highlight: H, span: S, type: T}) []
  hl.Segment{highlight: false, span: span{from: 85, to: 86}, type: "usage"}; {H: false, S: span{from: 85, to: 86}, T: "usage"}
from tc.typeFC to 28: tc.typeFC{id: 15, type: tapp{from: "string", to: "string"}}; {AID: 17, F: "string", FID: 16, I: 15, T: tapp{from: "string", to: "string"}}. Match(tc.typeFC{id: I, type: T}; {I: I, T: T}) []
  tc.typeFC{id: 15, type: tapp{from: "string", to: "string"}}; {I: 15, T: tapp{from: "string", to: "string"}}
from 98 to 90: ide.expectedTypeBinding{id: 7, type: "string"}; {I: 7, T: "string"}. Union []
  ide.expectedTypeBinding{id: 7, type: "string"}; {I: 7, T: "string"}
from 28 to 24: tc.typeFC{id: 15, type: tapp{from: "string", to: "string"}}; {I: 15, T: tapp{from: "string", to: "string"}}. Union []
  tc.typeFC{id: 15, type: tapp{from: "string", to: "string"}}; {I: 15, T: tapp{from: "string", to: "string"}}
from 90 to ide.expectedType: ide.expectedTypeBinding{id: 7, type: "string"}; {I: 7, T: "string"}. Subst({id: I, type: T}) []
  ide.expectedType{id: 7, type: "string"}; {I: 7, T: "string"}
from 24 to tc.Type: tc.typeFC{id: 15, type: tapp{from: "string", to: "string"}}; {I: 15, T: tapp{from: "string", to: "string"}}. Subst({id: I, type: T}) []
  tc.Type{id: 15, type: tapp{from: "string", to: "string"}}; {I: 15, T: tapp{from: "string", to: "string"}}
from ide.expectedType to 78: ide.expectedType{id: 7, type: "string"}; {I: 7, T: "string"}. Match(ide.expectedType{id: I, type: T}; {I: I, T: T}) [I]
  ide.expectedType{id: 7, type: "string"}; {I: 7, T: "string"}
from ide.expectedType to 83: ide.expectedType{id: 7, type: "string"}; {I: 7, T: "string"}. Match(ide.expectedType{id: I, type: TT}; {I: I, T: TT}) [I]
  ide.expectedType{id: 7, type: "string"}; {I: 7, TT: "string"}
from ide.expectedType to 93: ide.expectedType{id: 7, type: "string"}; {I: 7, T: "string"}. Match(ide.expectedType{id: L, type: T}; {I: L, T: T}) [L]
  ide.expectedType{id: 7, type: "string"}; {L: 7, T: "string"}
from ide.expectedType to 104: ide.expectedType{id: 7, type: "string"}; {I: 7, T: "string"}. Match(ide.expectedType{id: UI, type: T}; {I: UI, T: T}) [UI]
  ide.expectedType{id: 7, type: "string"}; {T: "string", UI: 7}
from tc.Type to 35: tc.Type{id: 15, type: tapp{from: "string", to: "string"}}; {I: 15, T: tapp{from: "string", to: "string"}}. Match(tc.Type{id: FID, type: tapp{from: F, to: T}}; {I: FID}) [FID]
  tc.Type{id: 15, type: tapp{from: "string", to: "string"}}; {F: "string", FID: 15, T: "string"}
from tc.Type to 37: tc.Type{id: 15, type: tapp{from: "string", to: "string"}}; {I: 15, T: tapp{from: "string", to: "string"}}. Match(tc.Type{id: AID, type: F}; {I: AID, T: F}) [F]
  tc.Type{id: 15, type: tapp{from: "string", to: "string"}}; {AID: 15, F: tapp{from: "string", to: "string"}}
from tc.Type to 40: tc.Type{id: 15, type: tapp{from: "string", to: "string"}}; {I: 15, T: tapp{from: "string", to: "string"}}. Match(tc.Type{id: BID, type: T}; {I: BID, T: T}) [BID]
  tc.Type{id: 15, type: tapp{from: "string", to: "string"}}; {BID: 15, T: tapp{from: "string", to: "string"}}
from tc.Type to 48: tc.Type{id: 15, type: tapp{from: "string", to: "string"}}; {I: 15, T: tapp{from: "string", to: "string"}}. Match(tc.Type{id: B, type: R}; {I: B, T: R}) []
  tc.Type{id: 15, type: tapp{from: "string", to: "string"}}; {B: 15, R: tapp{from: "string", to: "string"}}
from tc.Type to 62: tc.Type{id: 15, type: tapp{from: "string", to: "string"}}; {I: 15, T: tapp{from: "string", to: "string"}}. Match(tc.Type{id: B, type: T}; {I: B, T: T}) [B]
  tc.Type{id: 15, type: tapp{from: "string", to: "string"}}; {B: 15, T: tapp{from: "string", to: "string"}}
from tc.Type to 96: tc.Type{id: 15, type: tapp{from: "string", to: "string"}}; {I: 15, T: tapp{from: "string", to: "string"}}. Match(tc.Type{id: F, type: tapp{from: T}}; {I: F}) [F]
  tc.Type{id: 15, type: tapp{from: "string", to: "string"}}; {F: 15, T: "string"}
from tc.Type to 125: tc.Type{id: 15, type: tapp{from: "string", to: "string"}}; {I: 15, T: tapp{from: "string", to: "string"}}. Match(tc.Type{id: I, type: T}; {I: I, T: T}) [I]
  tc.Type{id: 15, type: tapp{from: "string", to: "string"}}; {I: 15, T: tapp{from: "string", to: "string"}}
from 78 to 79: ide.expectedType{id: 7, type: "string"}; {I: 7, T: "string"}. Join(ide.suggestionVar, I: 78.id = 77.id) [I-T]
from 83 to 84: ide.expectedType{id: 7, type: "string"}; {I: 7, TT: "string"}. Join(ide.suggestionFunc, I: 83.id = 82.id) [I-TT]
from 93 to 94: ide.expectedType{id: 7, type: "string"}; {L: 7, T: "string"}. Join(ide.expectedType, L: 93.id = 92.id) []
from 104 to 105: ide.expectedType{id: 7, type: "string"}; {T: "string", UI: 7}. Join(ide.expectedTypeBinding, UI: 104.id = 103.id) []
from 35 to 36: tc.Type{id: 15, type: tapp{from: "string", to: "string"}}; {F: "string", FID: 15, T: "string"}. Join(tc.typeFC, FID: 35.id = 34.funcID) [F]
  tc.typeFC{id: 15, type: tapp{from: "string", to: "string"}}; {AID: 18, F: "string", FID: 15, I: 14, T: "string"}
from 37 to 38: tc.Type{id: 15, type: tapp{from: "string", to: "string"}}; {AID: 15, F: tapp{from: "string", to: "string"}}. Join(tc.typeFC, F: 37.type = 36.type.from) []
from 40 to 41: tc.Type{id: 15, type: tapp{from: "string", to: "string"}}; {BID: 15, T: tapp{from: "string", to: "string"}}. Join(tc.typeLet, BID: 40.id = 39.bodyID) []
from 48 to 49: tc.Type{id: 15, type: tapp{from: "string", to: "string"}}; {B: 15, R: tapp{from: "string", to: "string"}}. Join(tc.typeLambda, ) []
from 62 to 63: tc.Type{id: 15, type: tapp{from: "string", to: "string"}}; {B: 15, T: tapp{from: "string", to: "string"}}. Join(tc.scopeLet, B: 62.id = 61.bindingID) []
from 96 to 97: tc.Type{id: 15, type: tapp{from: "string", to: "string"}}; {F: 15, T: "string"}. Join(ide.expectedType, F: 96.id = 95.funcID) []
  ide.expectedType{id: 15, type: tapp{from: "string", to: "string"}}; {F: 15, I: 18, T: "string"}
from 125 to 126: tc.Type{id: 15, type: tapp{from: "string", to: "string"}}; {I: 15, T: tapp{from: "string", to: "string"}}. Join(ide.CurrentType, I: 125.id = 124.id) []
from 36 to 38: tc.typeFC{id: 15, type: tapp{from: "string", to: "string"}}; {AID: 18, F: "string", FID: 15, I: 14, T: "string"}. Join(tc.typeFC, F: 37.type = 36.type.from) []
from 97 to 90: ide.expectedType{id: 15, type: tapp{from: "string", to: "string"}}; {F: 15, I: 18, T: "string"}. Union []
  ide.expectedType{id: 15, type: tapp{from: "string", to: "string"}}; {F: 15, I: 18, T: "string"}
from 90 to ide.expectedType: ide.expectedType{id: 15, type: tapp{from: "string", to: "string"}}; {F: 15, I: 18, T: "string"}. Subst({id: I, type: T}) []
  ide.expectedType{id: 18, type: "string"}; {F: 15, I: 18, T: "string"}
from ide.expectedType to 78: ide.expectedType{id: 18, type: "string"}; {F: 15, I: 18, T: "string"}. Match(ide.expectedType{id: I, type: T}; {I: I, T: T}) [I]
  ide.expectedType{id: 18, type: "string"}; {I: 18, T: "string"}
from ide.expectedType to 83: ide.expectedType{id: 18, type: "string"}; {F: 15, I: 18, T: "string"}. Match(ide.expectedType{id: I, type: TT}; {I: I, T: TT}) [I]
  ide.expectedType{id: 18, type: "string"}; {I: 18, TT: "string"}
from ide.expectedType to 93: ide.expectedType{id: 18, type: "string"}; {F: 15, I: 18, T: "string"}. Match(ide.expectedType{id: L, type: T}; {I: L, T: T}) [L]
  ide.expectedType{id: 18, type: "string"}; {L: 18, T: "string"}
from ide.expectedType to 104: ide.expectedType{id: 18, type: "string"}; {F: 15, I: 18, T: "string"}. Match(ide.expectedType{id: UI, type: T}; {I: UI, T: T}) [UI]
  ide.expectedType{id: 18, type: "string"}; {T: "string", UI: 18}
from 78 to 79: ide.expectedType{id: 18, type: "string"}; {I: 18, T: "string"}. Join(ide.suggestionVar, I: 78.id = 77.id) [I-T]
from 83 to 84: ide.expectedType{id: 18, type: "string"}; {I: 18, TT: "string"}. Join(ide.suggestionFunc, I: 83.id = 82.id) [I-TT]
from 93 to 94: ide.expectedType{id: 18, type: "string"}; {L: 18, T: "string"}. Join(ide.expectedType, L: 93.id = 92.id) []
from 104 to 105: ide.expectedType{id: 18, type: "string"}; {T: "string", UI: 18}. Join(ide.expectedTypeBinding, UI: 104.id = 103.id) []

ast.Var{id: 18, location: span{from: 88, to: 89}, name: "z"}.
----
text/emission-log
from null to ast.Var: ast.Var{id: 18, location: span{from: 88, to: 89}, name: "z"}; {}.  []
  ast.Var{id: 18, location: span{from: 88, to: 89}, name: "z"}; {}
from ast.Var to 3: ast.Var{id: 18, location: span{from: 88, to: 89}, name: "z"}; {}. Match(ast.Var{id: I, location: S}; {}) []
  ast.Var{id: 18, location: span{from: 88, to: 89}, name: "z"}; {I: 18, S: span{from: 88, to: 89}}
from ast.Var to 42: ast.Var{id: 18, location: span{from: 88, to: 89}, name: "z"}; {}. Match(ast.Var{id: I, name: N}; {}) [I-N]
  ast.Var{id: 18, location: span{from: 88, to: 89}, name: "z"}; {I: 18, N: "z"}
from ast.Var to 106: ast.Var{id: 18, location: span{from: 88, to: 89}, name: "z"}; {}. Match(ast.Var{id: I, location: UL, name: N}; {}) [I-N]
  ast.Var{id: 18, location: span{from: 88, to: 89}, name: "z"}; {I: 18, N: "z", UL: span{from: 88, to: 89}}
from ast.Var to 179: ast.Var{id: 18, location: span{from: 88, to: 89}, name: "z"}; {}. Match(ast.Var{location: S}; {}) [S]
  ast.Var{id: 18, location: span{from: 88, to: 89}, name: "z"}; {S: span{from: 88, to: 89}}
from ast.Var to 182: ast.Var{id: 18, location: span{from: 88, to: 89}, name: "z"}; {}. Match(ast.Var{location: S}; {}) []
  ast.Var{id: 18, location: span{from: 88, to: 89}, name: "z"}; {S: span{from: 88, to: 89}}
from ast.Var to 184: ast.Var{id: 18, location: span{from: 88, to: 89}, name: "z"}; {}. Match(ast.Var{location: S}; {}) [S]
  ast.Var{id: 18, location: span{from: 88, to: 89}, name: "z"}; {S: span{from: 88, to: 89}}
from 3 to 0: ast.Var{id: 18, location: span{from: 88, to: 89}, name: "z"}; {I: 18, S: span{from: 88, to: 89}}. Union []
  ast.Var{id: 18, location: span{from: 88, to: 89}, name: "z"}; {I: 18, S: span{from: 88, to: 89}}
from 42 to 44: ast.Var{id: 18, location: span{from: 88, to: 89}, name: "z"}; {I: 18, N: "z"}. Join(tc.typeVar, I: 43.id = 42.id & N: 43.name = 42.name) []
  tc.typeVar{id: 18, location: span{from: 88, to: 89}, name: "z"}; {I: 18, N: "z", T: "string"}
from 106 to 108: ast.Var{id: 18, location: span{from: 88, to: 89}, name: "z"}; {I: 18, N: "z", UL: span{from: 88, to: 89}}. Join(ide.Usage, I: 107.id = 106.id & N: 107.name = 106.name) []
  ide.Usage{id: 18, location: span{from: 88, to: 89}, name: "z"}; {DL: span{from: 30, to: 31}, I: 18, N: "z", UL: span{from: 88, to: 89}}
from 179 to 181: ast.Var{id: 18, location: span{from: 88, to: 89}, name: "z"}; {S: span{from: 88, to: 89}}. Join(hl.segmentUsage, S: 180.usageLoc = 179.location) []
from 182 to hl.segmentUndefinedVar: ast.Var{id: 18, location: span{from: 88, to: 89}, name: "z"}; {S: span{from: 88, to: 89}}. Subst({highlight: false, span: S, type: "undefined-var"}) []
  hl.segmentUndefinedVar{highlight: false, span: span{from: 88, to: 89}, type: "undefined-var"}; {S: span{from: 88, to: 89}}
from 184 to 185: ast.Var{id: 18, location: span{from: 88, to: 89}, name: "z"}; {S: span{from: 88, to: 89}}. Join(hl.segmentUsageHL, S: 184.location = 183.usageLoc) []
from 0 to ast.Expr: ast.Var{id: 18, location: span{from: 88, to: 89}, name: "z"}; {I: 18, S: span{from: 88, to: 89}}. Subst({id: I, location: S}) []
  ast.Expr{id: 18, location: span{from: 88, to: 89}}; {I: 18, S: span{from: 88, to: 89}}
from 44 to tc.typeVar: tc.typeVar{id: 18, location: span{from: 88, to: 89}, name: "z"}; {I: 18, N: "z", T: "string"}. Subst({id: I, type: T}) []
  tc.typeVar{id: 18, type: "string"}; {I: 18, N: "z", T: "string"}
from 108 to ide.Usage: ide.Usage{id: 18, location: span{from: 88, to: 89}, name: "z"}; {DL: span{from: 30, to: 31}, I: 18, N: "z", UL: span{from: 88, to: 89}}. Subst({definitionLoc: DL, name: N, usageLoc: UL}) []
  ide.Usage{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {DL: span{from: 30, to: 31}, I: 18, N: "z", UL: span{from: 88, to: 89}}
from hl.segmentUndefinedVar to 163: hl.segmentUndefinedVar{highlight: false, span: span{from: 88, to: 89}, type: "undefined-var"}; {S: span{from: 88, to: 89}}. Match(hl.segmentUndefinedVar{highlight: H, span: S, type: T}; {S: S}) []
  hl.segmentUndefinedVar{highlight: false, span: span{from: 88, to: 89}, type: "undefined-var"}; {H: false, S: span{from: 88, to: 89}, T: "undefined-var"}
from ast.Expr to 9: ast.Expr{id: 18, location: span{from: 88, to: 89}}; {I: 18, S: span{from: 88, to: 89}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 18, location: span{from: 88, to: 89}}; {I: 18, S: span{from: 88, to: 89}}
from ast.Expr to 12: ast.Expr{id: 18, location: span{from: 88, to: 89}}; {I: 18, S: span{from: 88, to: 89}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 18, location: span{from: 88, to: 89}}; {I: 18, S: span{from: 88, to: 89}}
from ast.Expr to 15: ast.Expr{id: 18, location: span{from: 88, to: 89}}; {I: 18, S: span{from: 88, to: 89}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 18, location: span{from: 88, to: 89}}; {I: 18, S: span{from: 88, to: 89}}
from ast.Expr to 18: ast.Expr{id: 18, location: span{from: 88, to: 89}}; {I: 18, S: span{from: 88, to: 89}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 18, location: span{from: 88, to: 89}}; {I: 18, S: span{from: 88, to: 89}}
from ast.Expr to 21: ast.Expr{id: 18, location: span{from: 88, to: 89}}; {I: 18, S: span{from: 88, to: 89}}. Match(ast.Expr{id: I, location: S}; {I: I, S: S}) [I]
  ast.Expr{id: 18, location: span{from: 88, to: 89}}; {I: 18, S: span{from: 88, to: 89}}
from ast.Expr to 102: ast.Expr{id: 18, location: span{from: 88, to: 89}}; {I: 18, S: span{from: 88, to: 89}}. Match(ast.Expr{id: UI, location: UL}; {I: UI, S: UL}) [UL]
  ast.Expr{id: 18, location: span{from: 88, to: 89}}; {UI: 18, UL: span{from: 88, to: 89}}
from ast.Expr to 118: ast.Expr{id: 18, location: span{from: 88, to: 89}}; {I: 18, S: span{from: 88, to: 89}}. Match(ast.Expr{id: I, location: span{from: Idx}}; {I: I}) [Idx]
  ast.Expr{id: 18, location: span{from: 88, to: 89}}; {I: 18, Idx: 88}
from ast.Expr to 123: ast.Expr{id: 18, location: span{from: 88, to: 89}}; {I: 18, S: span{from: 88, to: 89}}. Match(ast.Expr{id: I, location: span{from: FIdx, to: TIdx}}; {I: I}) []
  ast.Expr{id: 18, location: span{from: 88, to: 89}}; {FIdx: 88, I: 18, TIdx: 89}
from tc.typeVar to 30: tc.typeVar{id: 18, type: "string"}; {I: 18, N: "z", T: "string"}. Match(tc.typeVar{id: I, type: T}; {I: I, T: T}) []
  tc.typeVar{id: 18, type: "string"}; {I: 18, T: "string"}
from ide.Usage to 100: ide.Usage{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {DL: span{from: 30, to: 31}, I: 18, N: "z", UL: span{from: 88, to: 89}}. Match(ide.Usage{definitionLoc: VL, usageLoc: UL}; {DL: VL, UL: UL}) [VL]
  ide.Usage{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {UL: span{from: 88, to: 89}, VL: span{from: 30, to: 31}}
from ide.Usage to 130: ide.Usage{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {DL: span{from: 30, to: 31}, I: 18, N: "z", UL: span{from: 88, to: 89}}. Match(ide.Usage{definitionLoc: DL, usageLoc: span{from: FIdx, to: TIdx}}; {DL: DL}) []
  ide.Usage{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {DL: span{from: 30, to: 31}, FIdx: 88, TIdx: 89}
from ide.Usage to 135: ide.Usage{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {DL: span{from: 30, to: 31}, I: 18, N: "z", UL: span{from: 88, to: 89}}. Match(ide.Usage{definitionLoc: span{from: FIdx, to: TIdx}, usageLoc: UL}; {UL: UL}) []
  ide.Usage{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {FIdx: 30, TIdx: 31, UL: span{from: 88, to: 89}}
from ide.Usage to 144: ide.Usage{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {DL: span{from: 30, to: 31}, I: 18, N: "z", UL: span{from: 88, to: 89}}. Match(ide.Usage{definitionLoc: span{from: FIdx, to: TIdx}, usageLoc: UL}; {UL: UL}) []
  ide.Usage{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {FIdx: 30, TIdx: 31, UL: span{from: 88, to: 89}}
from ide.Usage to 149: ide.Usage{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {DL: span{from: 30, to: 31}, I: 18, N: "z", UL: span{from: 88, to: 89}}. Match(ide.Usage{definitionLoc: DL, usageLoc: span{from: FIdx, to: TIdx}}; {DL: DL}) []
  ide.Usage{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {DL: span{from: 30, to: 31}, FIdx: 88, TIdx: 89}
from ide.Usage to 155: ide.Usage{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {DL: span{from: 30, to: 31}, I: 18, N: "z", UL: span{from: 88, to: 89}}. Match(ide.Usage{definitionLoc: DL, usageLoc: UL}; {DL: DL, UL: UL}) [DL]
  ide.Usage{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {DL: span{from: 30, to: 31}, UL: span{from: 88, to: 89}}
from ide.Usage to 171: ide.Usage{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {DL: span{from: 30, to: 31}, I: 18, N: "z", UL: span{from: 88, to: 89}}. Match(ide.Usage{definitionLoc: S}; {DL: S}) [S]
  ide.Usage{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {S: span{from: 30, to: 31}}
from ide.Usage to 180: ide.Usage{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {DL: span{from: 30, to: 31}, I: 18, N: "z", UL: span{from: 88, to: 89}}. Match(ide.Usage{usageLoc: S}; {UL: S}) [S]
  ide.Usage{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {S: span{from: 88, to: 89}}
from 163 to 159: hl.segmentUndefinedVar{highlight: false, span: span{from: 88, to: 89}, type: "undefined-var"}; {H: false, S: span{from: 88, to: 89}, T: "undefined-var"}. Union []
  hl.segmentUndefinedVar{highlight: false, span: span{from: 88, to: 89}, type: "undefined-var"}; {H: false, S: span{from: 88, to: 89}, T: "undefined-var"}
from 9 to 11: ast.Expr{id: 18, location: span{from: 88, to: 89}}; {I: 18, S: span{from: 88, to: 89}}. Join(ast.ParentExpr, I: 10.bodyID = 9.id) []
from 12 to 14: ast.Expr{id: 18, location: span{from: 88, to: 89}}; {I: 18, S: span{from: 88, to: 89}}. Join(ast.ParentExpr, I: 13.bindingID = 12.id) []
from 15 to 17: ast.Expr{id: 18, location: span{from: 88, to: 89}}; {I: 18, S: span{from: 88, to: 89}}. Join(ast.ParentExpr, I: 16.funcID = 15.id) []
from 18 to 20: ast.Expr{id: 18, location: span{from: 88, to: 89}}; {I: 18, S: span{from: 88, to: 89}}. Join(ast.ParentExpr, I: 19.argID = 18.id) []
  ast.ParentExpr{id: 18, location: span{from: 88, to: 89}}; {I: 18, P: 14, S: span{from: 88, to: 89}}
from 21 to 23: ast.Expr{id: 18, location: span{from: 88, to: 89}}; {I: 18, S: span{from: 88, to: 89}}. Join(ast.ParentExpr, I: 22.body = 21.id) []
from 102 to 103: ast.Expr{id: 18, location: span{from: 88, to: 89}}; {UI: 18, UL: span{from: 88, to: 89}}. Join(ide.expectedTypeBinding, UL: 102.location = 101.usageLoc) [UI]
from 118 to 119: ast.Expr{id: 18, location: span{from: 88, to: 89}}; {I: 18, Idx: 88}. Join(ide.CurrentScope, Idx: 118.location.from = 117.idx) [I]
from 123 to 124: ast.Expr{id: 18, location: span{from: 88, to: 89}}; {FIdx: 88, I: 18, TIdx: 89}. Join(ide.CurrentType, ) [I]
from 30 to 24: tc.typeVar{id: 18, type: "string"}; {I: 18, T: "string"}. Union []
  tc.typeVar{id: 18, type: "string"}; {I: 18, T: "string"}
from 100 to 101: ide.Usage{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {UL: span{from: 88, to: 89}, VL: span{from: 30, to: 31}}. Join(ide.expectedTypeBinding, VL: 100.definitionLoc = 99.varLoc) [UL]
  ide.expectedTypeBinding{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {I: 5, UL: span{from: 88, to: 89}, VL: span{from: 30, to: 31}}
from 130 to 131: ide.Usage{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {DL: span{from: 30, to: 31}, FIdx: 88, TIdx: 89}. Join(ide.DefnForCursor, ) []
from 135 to 136: ide.Usage{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {FIdx: 30, TIdx: 31, UL: span{from: 88, to: 89}}. Join(ide.UsageForCursor, ) []
from 144 to 146: ide.Usage{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {FIdx: 30, TIdx: 31, UL: span{from: 88, to: 89}}. Join(ide.CurrentUsageDefn, ) []
from 149 to 151: ide.Usage{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {DL: span{from: 30, to: 31}, FIdx: 88, TIdx: 89}. Join(ide.CurrentUsageUsage, ) []
from 155 to 156: ide.Usage{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {DL: span{from: 30, to: 31}, UL: span{from: 88, to: 89}}. Join(ide.CurrentUsageUsageIndirect, DL: 155.definitionLoc = 154.defnLoc) []
from 171 to 172: ide.Usage{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {S: span{from: 30, to: 31}}. Join(hl.segmentDefn, S: 171.definitionLoc = 170.span) []
  hl.segmentDefn{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {S: span{from: 30, to: 31}}
from 180 to 181: ide.Usage{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {S: span{from: 88, to: 89}}. Join(hl.segmentUsage, S: 180.usageLoc = 179.location) []
  hl.segmentUsage{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {S: span{from: 88, to: 89}}
from 159 to hl.Segment: hl.segmentUndefinedVar{highlight: false, span: span{from: 88, to: 89}, type: "undefined-var"}; {H: false, S: span{from: 88, to: 89}, T: "undefined-var"}. Subst({highlight: H, span: S, type: T}) []
  hl.Segment{highlight: false, span: span{from: 88, to: 89}, type: "undefined-var"}; {H: false, S: span{from: 88, to: 89}, T: "undefined-var"}
from 20 to 8: ast.ParentExpr{id: 18, location: span{from: 88, to: 89}}; {I: 18, P: 14, S: span{from: 88, to: 89}}. Union []
  ast.ParentExpr{id: 18, location: span{from: 88, to: 89}}; {I: 18, P: 14, S: span{from: 88, to: 89}}
from 24 to tc.Type: tc.typeVar{id: 18, type: "string"}; {I: 18, T: "string"}. Subst({id: I, type: T}) []
  tc.Type{id: 18, type: "string"}; {I: 18, T: "string"}
from 101 to 103: ide.expectedTypeBinding{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {I: 5, UL: span{from: 88, to: 89}, VL: span{from: 30, to: 31}}. Join(ide.expectedTypeBinding, UL: 102.location = 101.usageLoc) [UI]
  ide.expectedTypeBinding{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {I: 5, UI: 18, UL: span{from: 88, to: 89}, VL: span{from: 30, to: 31}}
from 172 to hl.segmentDefn: hl.segmentDefn{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {S: span{from: 30, to: 31}}. Subst({highlight: false, span: S, type: "defn"}) []
  hl.segmentDefn{highlight: false, span: span{from: 30, to: 31}, type: "defn"}; {S: span{from: 30, to: 31}}
from 181 to hl.segmentUsage: hl.segmentUsage{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {S: span{from: 88, to: 89}}. Subst({highlight: false, span: S, type: "usage"}) []
  hl.segmentUsage{highlight: false, span: span{from: 88, to: 89}, type: "usage"}; {S: span{from: 88, to: 89}}
from 8 to ast.ParentExpr: ast.ParentExpr{id: 18, location: span{from: 88, to: 89}}; {I: 18, P: 14, S: span{from: 88, to: 89}}. Subst({id: I, parent: P, span: S}) []
  ast.ParentExpr{id: 18, parent: 14, span: span{from: 88, to: 89}}; {I: 18, P: 14, S: span{from: 88, to: 89}}
from tc.Type to 35: tc.Type{id: 18, type: "string"}; {I: 18, T: "string"}. Match(tc.Type{id: FID, type: tapp{from: F, to: T}}; {I: FID}) [FID]
from tc.Type to 37: tc.Type{id: 18, type: "string"}; {I: 18, T: "string"}. Match(tc.Type{id: AID, type: F}; {I: AID, T: F}) [F]
  tc.Type{id: 18, type: "string"}; {AID: 18, F: "string"}
from tc.Type to 40: tc.Type{id: 18, type: "string"}; {I: 18, T: "string"}. Match(tc.Type{id: BID, type: T}; {I: BID, T: T}) [BID]
  tc.Type{id: 18, type: "string"}; {BID: 18, T: "string"}
from tc.Type to 48: tc.Type{id: 18, type: "string"}; {I: 18, T: "string"}. Match(tc.Type{id: B, type: R}; {I: B, T: R}) []
  tc.Type{id: 18, type: "string"}; {B: 18, R: "string"}
from tc.Type to 62: tc.Type{id: 18, type: "string"}; {I: 18, T: "string"}. Match(tc.Type{id: B, type: T}; {I: B, T: T}) [B]
  tc.Type{id: 18, type: "string"}; {B: 18, T: "string"}
from tc.Type to 96: tc.Type{id: 18, type: "string"}; {I: 18, T: "string"}. Match(tc.Type{id: F, type: tapp{from: T}}; {I: F}) [F]
from tc.Type to 125: tc.Type{id: 18, type: "string"}; {I: 18, T: "string"}. Match(tc.Type{id: I, type: T}; {I: I, T: T}) [I]
  tc.Type{id: 18, type: "string"}; {I: 18, T: "string"}
from 103 to 105: ide.expectedTypeBinding{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {I: 5, UI: 18, UL: span{from: 88, to: 89}, VL: span{from: 30, to: 31}}. Join(ide.expectedTypeBinding, UI: 104.id = 103.id) []
  ide.expectedTypeBinding{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {I: 5, T: "string", UI: 18, UL: span{from: 88, to: 89}, VL: span{from: 30, to: 31}}
from hl.segmentDefn to 160: hl.segmentDefn{highlight: false, span: span{from: 30, to: 31}, type: "defn"}; {S: span{from: 30, to: 31}}. Match(hl.segmentDefn{highlight: H, span: S, type: T}; {S: S}) []
  hl.segmentDefn{highlight: false, span: span{from: 30, to: 31}, type: "defn"}; {H: false, S: span{from: 30, to: 31}, T: "defn"}
from hl.segmentUsage to 162: hl.segmentUsage{highlight: false, span: span{from: 88, to: 89}, type: "usage"}; {S: span{from: 88, to: 89}}. Match(hl.segmentUsage{highlight: H, span: S, type: T}; {S: S}) []
  hl.segmentUsage{highlight: false, span: span{from: 88, to: 89}, type: "usage"}; {H: false, S: span{from: 88, to: 89}, T: "usage"}
from 37 to 38: tc.Type{id: 18, type: "string"}; {AID: 18, F: "string"}. Join(tc.typeFC, F: 37.type = 36.type.from) []
  tc.typeFC{id: 18, type: "string"}; {AID: 18, F: "string", FID: 15, I: 14, T: "string"}
from 40 to 41: tc.Type{id: 18, type: "string"}; {BID: 18, T: "string"}. Join(tc.typeLet, BID: 40.id = 39.bodyID) []
from 48 to 49: tc.Type{id: 18, type: "string"}; {B: 18, R: "string"}. Join(tc.typeLambda, ) []
from 62 to 63: tc.Type{id: 18, type: "string"}; {B: 18, T: "string"}. Join(tc.scopeLet, B: 62.id = 61.bindingID) []
from 125 to 126: tc.Type{id: 18, type: "string"}; {I: 18, T: "string"}. Join(ide.CurrentType, I: 125.id = 124.id) []
from 105 to ide.expectedTypeBinding: ide.expectedTypeBinding{definitionLoc: span{from: 30, to: 31}, name: "z", usageLoc: span{from: 88, to: 89}}; {I: 5, T: "string", UI: 18, UL: span{from: 88, to: 89}, VL: span{from: 30, to: 31}}. Subst({id: I, type: T}) []
  ide.expectedTypeBinding{id: 5, type: "string"}; {I: 5, T: "string", UI: 18, UL: span{from: 88, to: 89}, VL: span{from: 30, to: 31}}
from 160 to 159: hl.segmentDefn{highlight: false, span: span{from: 30, to: 31}, type: "defn"}; {H: false, S: span{from: 30, to: 31}, T: "defn"}. Union []
  hl.segmentDefn{highlight: false, span: span{from: 30, to: 31}, type: "defn"}; {H: false, S: span{from: 30, to: 31}, T: "defn"}
from 162 to 159: hl.segmentUsage{highlight: false, span: span{from: 88, to: 89}, type: "usage"}; {H: false, S: span{from: 88, to: 89}, T: "usage"}. Union []
  hl.segmentUsage{highlight: false, span: span{from: 88, to: 89}, type: "usage"}; {H: false, S: span{from: 88, to: 89}, T: "usage"}
from 38 to tc.typeFC: tc.typeFC{id: 18, type: "string"}; {AID: 18, F: "string", FID: 15, I: 14, T: "string"}. Subst({id: I, type: T}) []
  tc.typeFC{id: 14, type: "string"}; {AID: 18, F: "string", FID: 15, I: 14, T: "string"}
from ide.expectedTypeBinding to 98: ide.expectedTypeBinding{id: 5, type: "string"}; {I: 5, T: "string", UI: 18, UL: span{from: 88, to: 89}, VL: span{from: 30, to: 31}}. Match(ide.expectedTypeBinding{id: I, type: T}; {I: I, T: T}) []
  ide.expectedTypeBinding{id: 5, type: "string"}; {I: 5, T: "string"}
from 159 to hl.Segment: hl.segmentDefn{highlight: false, span: span{from: 30, to: 31}, type: "defn"}; {H: false, S: span{from: 30, to: 31}, T: "defn"}. Subst({highlight: H, span: S, type: T}) []
  hl.Segment{highlight: false, span: span{from: 30, to: 31}, type: "defn"}; {H: false, S: span{from: 30, to: 31}, T: "defn"}
from 159 to hl.Segment: hl.segmentUsage{highlight: false, span: span{from: 88, to: 89}, type: "usage"}; {H: false, S: span{from: 88, to: 89}, T: "usage"}. Subst({highlight: H, span: S, type: T}) []
  hl.Segment{highlight: false, span: span{from: 88, to: 89}, type: "usage"}; {H: false, S: span{from: 88, to: 89}, T: "usage"}
from tc.typeFC to 28: tc.typeFC{id: 14, type: "string"}; {AID: 18, F: "string", FID: 15, I: 14, T: "string"}. Match(tc.typeFC{id: I, type: T}; {I: I, T: T}) []
  tc.typeFC{id: 14, type: "string"}; {I: 14, T: "string"}
from 98 to 90: ide.expectedTypeBinding{id: 5, type: "string"}; {I: 5, T: "string"}. Union []
  ide.expectedTypeBinding{id: 5, type: "string"}; {I: 5, T: "string"}
from 28 to 24: tc.typeFC{id: 14, type: "string"}; {I: 14, T: "string"}. Union []
  tc.typeFC{id: 14, type: "string"}; {I: 14, T: "string"}
from 90 to ide.expectedType: ide.expectedTypeBinding{id: 5, type: "string"}; {I: 5, T: "string"}. Subst({id: I, type: T}) []
  ide.expectedType{id: 5, type: "string"}; {I: 5, T: "string"}
from 24 to tc.Type: tc.typeFC{id: 14, type: "string"}; {I: 14, T: "string"}. Subst({id: I, type: T}) []
  tc.Type{id: 14, type: "string"}; {I: 14, T: "string"}
from ide.expectedType to 78: ide.expectedType{id: 5, type: "string"}; {I: 5, T: "string"}. Match(ide.expectedType{id: I, type: T}; {I: I, T: T}) [I]
  ide.expectedType{id: 5, type: "string"}; {I: 5, T: "string"}
from ide.expectedType to 83: ide.expectedType{id: 5, type: "string"}; {I: 5, T: "string"}. Match(ide.expectedType{id: I, type: TT}; {I: I, T: TT}) [I]
  ide.expectedType{id: 5, type: "string"}; {I: 5, TT: "string"}
from ide.expectedType to 93: ide.expectedType{id: 5, type: "string"}; {I: 5, T: "string"}. Match(ide.expectedType{id: L, type: T}; {I: L, T: T}) [L]
  ide.expectedType{id: 5, type: "string"}; {L: 5, T: "string"}
from ide.expectedType to 104: ide.expectedType{id: 5, type: "string"}; {I: 5, T: "string"}. Match(ide.expectedType{id: UI, type: T}; {I: UI, T: T}) [UI]
  ide.expectedType{id: 5, type: "string"}; {T: "string", UI: 5}
from tc.Type to 35: tc.Type{id: 14, type: "string"}; {I: 14, T: "string"}. Match(tc.Type{id: FID, type: tapp{from: F, to: T}}; {I: FID}) [FID]
from tc.Type to 37: tc.Type{id: 14, type: "string"}; {I: 14, T: "string"}. Match(tc.Type{id: AID, type: F}; {I: AID, T: F}) [F]
  tc.Type{id: 14, type: "string"}; {AID: 14, F: "string"}
from tc.Type to 40: tc.Type{id: 14, type: "string"}; {I: 14, T: "string"}. Match(tc.Type{id: BID, type: T}; {I: BID, T: T}) [BID]
  tc.Type{id: 14, type: "string"}; {BID: 14, T: "string"}
from tc.Type to 48: tc.Type{id: 14, type: "string"}; {I: 14, T: "string"}. Match(tc.Type{id: B, type: R}; {I: B, T: R}) []
  tc.Type{id: 14, type: "string"}; {B: 14, R: "string"}
from tc.Type to 62: tc.Type{id: 14, type: "string"}; {I: 14, T: "string"}. Match(tc.Type{id: B, type: T}; {I: B, T: T}) [B]
  tc.Type{id: 14, type: "string"}; {B: 14, T: "string"}
from tc.Type to 96: tc.Type{id: 14, type: "string"}; {I: 14, T: "string"}. Match(tc.Type{id: F, type: tapp{from: T}}; {I: F}) [F]
from tc.Type to 125: tc.Type{id: 14, type: "string"}; {I: 14, T: "string"}. Match(tc.Type{id: I, type: T}; {I: I, T: T}) [I]
  tc.Type{id: 14, type: "string"}; {I: 14, T: "string"}
from 78 to 79: ide.expectedType{id: 5, type: "string"}; {I: 5, T: "string"}. Join(ide.suggestionVar, I: 78.id = 77.id) [I-T]
from 83 to 84: ide.expectedType{id: 5, type: "string"}; {I: 5, TT: "string"}. Join(ide.suggestionFunc, I: 83.id = 82.id) [I-TT]
from 93 to 94: ide.expectedType{id: 5, type: "string"}; {L: 5, T: "string"}. Join(ide.expectedType, L: 93.id = 92.id) []
from 104 to 105: ide.expectedType{id: 5, type: "string"}; {T: "string", UI: 5}. Join(ide.expectedTypeBinding, UI: 104.id = 103.id) []
from 37 to 38: tc.Type{id: 14, type: "string"}; {AID: 14, F: "string"}. Join(tc.typeFC, F: 37.type = 36.type.from) []
from 40 to 41: tc.Type{id: 14, type: "string"}; {BID: 14, T: "string"}. Join(tc.typeLet, BID: 40.id = 39.bodyID) []
  tc.typeLet{id: 14, type: "string"}; {BID: 14, I: 6, T: "string"}
from 48 to 49: tc.Type{id: 14, type: "string"}; {B: 14, R: "string"}. Join(tc.typeLambda, ) []
from 62 to 63: tc.Type{id: 14, type: "string"}; {B: 14, T: "string"}. Join(tc.scopeLet, B: 62.id = 61.bindingID) []
from 125 to 126: tc.Type{id: 14, type: "string"}; {I: 14, T: "string"}. Join(ide.CurrentType, I: 125.id = 124.id) []
from 41 to tc.typeLet: tc.typeLet{id: 14, type: "string"}; {BID: 14, I: 6, T: "string"}. Subst({id: I, type: T}) []
  tc.typeLet{id: 6, type: "string"}; {BID: 14, I: 6, T: "string"}
from tc.typeLet to 29: tc.typeLet{id: 6, type: "string"}; {BID: 14, I: 6, T: "string"}. Match(tc.typeLet{id: I, type: T}; {I: I, T: T}) []
  tc.typeLet{id: 6, type: "string"}; {I: 6, T: "string"}
from 29 to 24: tc.typeLet{id: 6, type: "string"}; {I: 6, T: "string"}. Union []
  tc.typeLet{id: 6, type: "string"}; {I: 6, T: "string"}
from 24 to tc.Type: tc.typeLet{id: 6, type: "string"}; {I: 6, T: "string"}. Subst({id: I, type: T}) []
  tc.Type{id: 6, type: "string"}; {I: 6, T: "string"}
from tc.Type to 35: tc.Type{id: 6, type: "string"}; {I: 6, T: "string"}. Match(tc.Type{id: FID, type: tapp{from: F, to: T}}; {I: FID}) [FID]
from tc.Type to 37: tc.Type{id: 6, type: "string"}; {I: 6, T: "string"}. Match(tc.Type{id: AID, type: F}; {I: AID, T: F}) [F]
  tc.Type{id: 6, type: "string"}; {AID: 6, F: "string"}
from tc.Type to 40: tc.Type{id: 6, type: "string"}; {I: 6, T: "string"}. Match(tc.Type{id: BID, type: T}; {I: BID, T: T}) [BID]
  tc.Type{id: 6, type: "string"}; {BID: 6, T: "string"}
from tc.Type to 48: tc.Type{id: 6, type: "string"}; {I: 6, T: "string"}. Match(tc.Type{id: B, type: R}; {I: B, T: R}) []
  tc.Type{id: 6, type: "string"}; {B: 6, R: "string"}
from tc.Type to 62: tc.Type{id: 6, type: "string"}; {I: 6, T: "string"}. Match(tc.Type{id: B, type: T}; {I: B, T: T}) [B]
  tc.Type{id: 6, type: "string"}; {B: 6, T: "string"}
from tc.Type to 96: tc.Type{id: 6, type: "string"}; {I: 6, T: "string"}. Match(tc.Type{id: F, type: tapp{from: T}}; {I: F}) [F]
from tc.Type to 125: tc.Type{id: 6, type: "string"}; {I: 6, T: "string"}. Match(tc.Type{id: I, type: T}; {I: I, T: T}) [I]
  tc.Type{id: 6, type: "string"}; {I: 6, T: "string"}
from 37 to 38: tc.Type{id: 6, type: "string"}; {AID: 6, F: "string"}. Join(tc.typeFC, F: 37.type = 36.type.from) []
from 40 to 41: tc.Type{id: 6, type: "string"}; {BID: 6, T: "string"}. Join(tc.typeLet, BID: 40.id = 39.bodyID) []
  tc.typeLet{id: 6, type: "string"}; {BID: 6, I: 4, T: "string"}
from 48 to 49: tc.Type{id: 6, type: "string"}; {B: 6, R: "string"}. Join(tc.typeLambda, ) []
from 62 to 63: tc.Type{id: 6, type: "string"}; {B: 6, T: "string"}. Join(tc.scopeLet, B: 62.id = 61.bindingID) []
from 125 to 126: tc.Type{id: 6, type: "string"}; {I: 6, T: "string"}. Join(ide.CurrentType, I: 125.id = 124.id) []
from 41 to tc.typeLet: tc.typeLet{id: 6, type: "string"}; {BID: 6, I: 4, T: "string"}. Subst({id: I, type: T}) []
  tc.typeLet{id: 4, type: "string"}; {BID: 6, I: 4, T: "string"}
from tc.typeLet to 29: tc.typeLet{id: 4, type: "string"}; {BID: 6, I: 4, T: "string"}. Match(tc.typeLet{id: I, type: T}; {I: I, T: T}) []
  tc.typeLet{id: 4, type: "string"}; {I: 4, T: "string"}
from 29 to 24: tc.typeLet{id: 4, type: "string"}; {I: 4, T: "string"}. Union []
  tc.typeLet{id: 4, type: "string"}; {I: 4, T: "string"}
from 24 to tc.Type: tc.typeLet{id: 4, type: "string"}; {I: 4, T: "string"}. Subst({id: I, type: T}) []
  tc.Type{id: 4, type: "string"}; {I: 4, T: "string"}
from tc.Type to 35: tc.Type{id: 4, type: "string"}; {I: 4, T: "string"}. Match(tc.Type{id: FID, type: tapp{from: F, to: T}}; {I: FID}) [FID]
from tc.Type to 37: tc.Type{id: 4, type: "string"}; {I: 4, T: "string"}. Match(tc.Type{id: AID, type: F}; {I: AID, T: F}) [F]
  tc.Type{id: 4, type: "string"}; {AID: 4, F: "string"}
from tc.Type to 40: tc.Type{id: 4, type: "string"}; {I: 4, T: "string"}. Match(tc.Type{id: BID, type: T}; {I: BID, T: T}) [BID]
  tc.Type{id: 4, type: "string"}; {BID: 4, T: "string"}
from tc.Type to 48: tc.Type{id: 4, type: "string"}; {I: 4, T: "string"}. Match(tc.Type{id: B, type: R}; {I: B, T: R}) []
  tc.Type{id: 4, type: "string"}; {B: 4, R: "string"}
from tc.Type to 62: tc.Type{id: 4, type: "string"}; {I: 4, T: "string"}. Match(tc.Type{id: B, type: T}; {I: B, T: T}) [B]
  tc.Type{id: 4, type: "string"}; {B: 4, T: "string"}
from tc.Type to 96: tc.Type{id: 4, type: "string"}; {I: 4, T: "string"}. Match(tc.Type{id: F, type: tapp{from: T}}; {I: F}) [F]
from tc.Type to 125: tc.Type{id: 4, type: "string"}; {I: 4, T: "string"}. Match(tc.Type{id: I, type: T}; {I: I, T: T}) [I]
  tc.Type{id: 4, type: "string"}; {I: 4, T: "string"}
from 37 to 38: tc.Type{id: 4, type: "string"}; {AID: 4, F: "string"}. Join(tc.typeFC, F: 37.type = 36.type.from) []
from 40 to 41: tc.Type{id: 4, type: "string"}; {BID: 4, T: "string"}. Join(tc.typeLet, BID: 40.id = 39.bodyID) []
  tc.typeLet{id: 4, type: "string"}; {BID: 4, I: 2, T: "string"}
from 48 to 49: tc.Type{id: 4, type: "string"}; {B: 4, R: "string"}. Join(tc.typeLambda, ) []
from 62 to 63: tc.Type{id: 4, type: "string"}; {B: 4, T: "string"}. Join(tc.scopeLet, B: 62.id = 61.bindingID) []
from 125 to 126: tc.Type{id: 4, type: "string"}; {I: 4, T: "string"}. Join(ide.CurrentType, I: 125.id = 124.id) []
from 41 to tc.typeLet: tc.typeLet{id: 4, type: "string"}; {BID: 4, I: 2, T: "string"}. Subst({id: I, type: T}) []
  tc.typeLet{id: 2, type: "string"}; {BID: 4, I: 2, T: "string"}
from tc.typeLet to 29: tc.typeLet{id: 2, type: "string"}; {BID: 4, I: 2, T: "string"}. Match(tc.typeLet{id: I, type: T}; {I: I, T: T}) []
  tc.typeLet{id: 2, type: "string"}; {I: 2, T: "string"}
from 29 to 24: tc.typeLet{id: 2, type: "string"}; {I: 2, T: "string"}. Union []
  tc.typeLet{id: 2, type: "string"}; {I: 2, T: "string"}
from 24 to tc.Type: tc.typeLet{id: 2, type: "string"}; {I: 2, T: "string"}. Subst({id: I, type: T}) []
  tc.Type{id: 2, type: "string"}; {I: 2, T: "string"}
from tc.Type to 35: tc.Type{id: 2, type: "string"}; {I: 2, T: "string"}. Match(tc.Type{id: FID, type: tapp{from: F, to: T}}; {I: FID}) [FID]
from tc.Type to 37: tc.Type{id: 2, type: "string"}; {I: 2, T: "string"}. Match(tc.Type{id: AID, type: F}; {I: AID, T: F}) [F]
  tc.Type{id: 2, type: "string"}; {AID: 2, F: "string"}
from tc.Type to 40: tc.Type{id: 2, type: "string"}; {I: 2, T: "string"}. Match(tc.Type{id: BID, type: T}; {I: BID, T: T}) [BID]
  tc.Type{id: 2, type: "string"}; {BID: 2, T: "string"}
from tc.Type to 48: tc.Type{id: 2, type: "string"}; {I: 2, T: "string"}. Match(tc.Type{id: B, type: R}; {I: B, T: R}) []
  tc.Type{id: 2, type: "string"}; {B: 2, R: "string"}
from tc.Type to 62: tc.Type{id: 2, type: "string"}; {I: 2, T: "string"}. Match(tc.Type{id: B, type: T}; {I: B, T: T}) [B]
  tc.Type{id: 2, type: "string"}; {B: 2, T: "string"}
from tc.Type to 96: tc.Type{id: 2, type: "string"}; {I: 2, T: "string"}. Match(tc.Type{id: F, type: tapp{from: T}}; {I: F}) [F]
from tc.Type to 125: tc.Type{id: 2, type: "string"}; {I: 2, T: "string"}. Match(tc.Type{id: I, type: T}; {I: I, T: T}) [I]
  tc.Type{id: 2, type: "string"}; {I: 2, T: "string"}
from 37 to 38: tc.Type{id: 2, type: "string"}; {AID: 2, F: "string"}. Join(tc.typeFC, F: 37.type = 36.type.from) []
from 40 to 41: tc.Type{id: 2, type: "string"}; {BID: 2, T: "string"}. Join(tc.typeLet, BID: 40.id = 39.bodyID) []
  tc.typeLet{id: 2, type: "string"}; {BID: 2, I: 0, T: "string"}
from 48 to 49: tc.Type{id: 2, type: "string"}; {B: 2, R: "string"}. Join(tc.typeLambda, ) []
from 62 to 63: tc.Type{id: 2, type: "string"}; {B: 2, T: "string"}. Join(tc.scopeLet, B: 62.id = 61.bindingID) []
from 125 to 126: tc.Type{id: 2, type: "string"}; {I: 2, T: "string"}. Join(ide.CurrentType, I: 125.id = 124.id) []
from 41 to tc.typeLet: tc.typeLet{id: 2, type: "string"}; {BID: 2, I: 0, T: "string"}. Subst({id: I, type: T}) []
  tc.typeLet{id: 0, type: "string"}; {BID: 2, I: 0, T: "string"}
from tc.typeLet to 29: tc.typeLet{id: 0, type: "string"}; {BID: 2, I: 0, T: "string"}. Match(tc.typeLet{id: I, type: T}; {I: I, T: T}) []
  tc.typeLet{id: 0, type: "string"}; {I: 0, T: "string"}
from 29 to 24: tc.typeLet{id: 0, type: "string"}; {I: 0, T: "string"}. Union []
  tc.typeLet{id: 0, type: "string"}; {I: 0, T: "string"}
from 24 to tc.Type: tc.typeLet{id: 0, type: "string"}; {I: 0, T: "string"}. Subst({id: I, type: T}) []
  tc.Type{id: 0, type: "string"}; {I: 0, T: "string"}
from tc.Type to 35: tc.Type{id: 0, type: "string"}; {I: 0, T: "string"}. Match(tc.Type{id: FID, type: tapp{from: F, to: T}}; {I: FID}) [FID]
from tc.Type to 37: tc.Type{id: 0, type: "string"}; {I: 0, T: "string"}. Match(tc.Type{id: AID, type: F}; {I: AID, T: F}) [F]
  tc.Type{id: 0, type: "string"}; {AID: 0, F: "string"}
from tc.Type to 40: tc.Type{id: 0, type: "string"}; {I: 0, T: "string"}. Match(tc.Type{id: BID, type: T}; {I: BID, T: T}) [BID]
  tc.Type{id: 0, type: "string"}; {BID: 0, T: "string"}
from tc.Type to 48: tc.Type{id: 0, type: "string"}; {I: 0, T: "string"}. Match(tc.Type{id: B, type: R}; {I: B, T: R}) []
  tc.Type{id: 0, type: "string"}; {B: 0, R: "string"}
from tc.Type to 62: tc.Type{id: 0, type: "string"}; {I: 0, T: "string"}. Match(tc.Type{id: B, type: T}; {I: B, T: T}) [B]
  tc.Type{id: 0, type: "string"}; {B: 0, T: "string"}
from tc.Type to 96: tc.Type{id: 0, type: "string"}; {I: 0, T: "string"}. Match(tc.Type{id: F, type: tapp{from: T}}; {I: F}) [F]
from tc.Type to 125: tc.Type{id: 0, type: "string"}; {I: 0, T: "string"}. Match(tc.Type{id: I, type: T}; {I: I, T: T}) [I]
  tc.Type{id: 0, type: "string"}; {I: 0, T: "string"}
from 37 to 38: tc.Type{id: 0, type: "string"}; {AID: 0, F: "string"}. Join(tc.typeFC, F: 37.type = 36.type.from) []
from 40 to 41: tc.Type{id: 0, type: "string"}; {BID: 0, T: "string"}. Join(tc.typeLet, BID: 40.id = 39.bodyID) []
from 48 to 49: tc.Type{id: 0, type: "string"}; {B: 0, R: "string"}. Join(tc.typeLambda, ) []
from 62 to 63: tc.Type{id: 0, type: "string"}; {B: 0, T: "string"}. Join(tc.scopeLet, B: 62.id = 61.bindingID) []
from 125 to 126: tc.Type{id: 0, type: "string"}; {I: 0, T: "string"}. Join(ide.CurrentType, I: 125.id = 124.id) []
