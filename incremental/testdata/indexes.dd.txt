.table need
----
text/plain

.table worker
----
text/plain

opportunity{worker: N, capability: C, objective: O} :-
  need{capability: C, objective: O} &
  worker{name: N, capability: C}.
----
text/propagation-log

.rulegraph
----
application/graphviz
digraph G {
  "0" [fillcolor="darkseagreen2" label="0: Match(need{capability: C, objective: O}; {}) [C]" shape="box" style="filled"];
  "1" [fillcolor="darkseagreen2" label="1: Match(worker{capability: C, name: N}; {}) [C]" shape="box" style="filled"];
  "2" [fillcolor="thistle" label="2: Join(opportunity, C: 1.capability = 0.capability) []" shape="box" style="filled"];
  "need" [fillcolor="darksalmon" label="need:  []" shape="box" style="filled"];
  "worker" [fillcolor="darksalmon" label="worker:  []" shape="box" style="filled"];
  "opportunity" [fillcolor="lightblue" label="opportunity: Subst({capability: C, objective: O, worker: N}) []" shape="box" style="filled"];
  "0" -> "2" [];
  "1" -> "2" [];
  "2" -> "opportunity" [];
  "need" -> "0" [];
  "worker" -> "1" [];
}

need{capability: "write HTML", objective: "make website"}.
----
text/propagation-log
from null to need: need{capability: "write HTML", objective: "make website"}; {}. 
  need{capability: "write HTML", objective: "make website"}; {}
from need to 0: need{capability: "write HTML", objective: "make website"}; {}. Match(need{capability: C, objective: O}; {})
  need{capability: "write HTML", objective: "make website"}; {C: "write HTML", O: "make website"}
from 0 to 2: need{capability: "write HTML", objective: "make website"}; {C: "write HTML", O: "make website"}. Join(opportunity, C: 1.capability = 0.capability)

worker{name: "Pete", capability: "write HTML"}.
----
text/propagation-log
from null to worker: worker{capability: "write HTML", name: "Pete"}; {}. 
  worker{capability: "write HTML", name: "Pete"}; {}
from worker to 1: worker{capability: "write HTML", name: "Pete"}; {}. Match(worker{capability: C, name: N}; {})
  worker{capability: "write HTML", name: "Pete"}; {C: "write HTML", N: "Pete"}
from 1 to 2: worker{capability: "write HTML", name: "Pete"}; {C: "write HTML", N: "Pete"}. Join(opportunity, C: 1.capability = 0.capability)
  opportunity{capability: "write HTML", name: "Pete"}; {C: "write HTML", N: "Pete", O: "make website"}
from 2 to opportunity: opportunity{capability: "write HTML", name: "Pete"}; {C: "write HTML", N: "Pete", O: "make website"}. Subst({capability: C, objective: O, worker: N})
  opportunity{capability: "write HTML", objective: "make website", worker: "Pete"}; {C: "write HTML", N: "Pete", O: "make website"}

.dumpcaches
----
application/json
{
  "0": {
    "nodeID": "0",
    "cache": {
      "C": {
        "items": {
          "\"write HTML\"": [
            {
              "term": {
                "type": "Record",
                "relation": "need",
                "attrs": {
                  "capability": {
                    "type": "StringLit",
                    "val": "write HTML"
                  },
                  "objective": {
                    "type": "StringLit",
                    "val": "make website"
                  }
                }
              },
              "bindings": {
                "C": {
                  "type": "StringLit",
                  "val": "write HTML"
                },
                "O": {
                  "type": "StringLit",
                  "val": "make website"
                }
              }
            }
          ]
        }
      }
    }
  },
  "1": {
    "nodeID": "1",
    "cache": {
      "C": {
        "items": {
          "\"write HTML\"": [
            {
              "term": {
                "type": "Record",
                "relation": "worker",
                "attrs": {
                  "name": {
                    "type": "StringLit",
                    "val": "Pete"
                  },
                  "capability": {
                    "type": "StringLit",
                    "val": "write HTML"
                  }
                }
              },
              "bindings": {
                "N": {
                  "type": "StringLit",
                  "val": "Pete"
                },
                "C": {
                  "type": "StringLit",
                  "val": "write HTML"
                }
              }
            }
          ]
        }
      }
    }
  },
  "2": {
    "nodeID": "2",
    "cache": {}
  },
  "need": {
    "nodeID": "need",
    "cache": {}
  },
  "worker": {
    "nodeID": "worker",
    "cache": {}
  },
  "opportunity": {
    "nodeID": "opportunity",
    "cache": {}
  }
}
