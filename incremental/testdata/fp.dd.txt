.load fp/dl/ast.dl
----
text/plain

.load fp/dl/typecheck.dl
----
text/plain

lang.Builtin{name: "intToString", type: tapp{from: "int", to: "string"}}.
----
text/plain
lang.Builtin: [lang.Builtin{name: "intToString", type: tapp{from: "int", to: "string"}}; {}]
16: [lang.Builtin{name: "intToString", type: tapp{from: "int", to: "string"}}; {N: "intToString", T: tapp{from: "int", to: "string"}}]
17: []

.rulegraph
----
application/graphviz
digraph G {
  "0" [color="black" label="0: Match(ast.Var{id: I}; {})" shape="box"];
  "1" [color="black" label="1: Union" shape="box"];
  "10" [color="black" label="10: Match(tc.Type{id: FID, type: tapp{from: F, to: T}}; {I: FID})" shape="box"];
  "11" [color="black" label="11: Join(10 & 9): tc.typeFC" shape="box"];
  "12" [color="black" label="12: Match(ast.FuncCall{argID: AID, funcID: FID, id: I}; {})" shape="box"];
  "13" [color="black" label="13: Join(12 & 11): tc.typeFC" shape="box"];
  "14" [color="black" label="14: Match(tc.scopeBuiltin{id: I, location: L, name: N, type: T}; {I: I, N: N, T: T})" shape="box"];
  "15" [color="black" label="15: Match(ast.Expr{id: I}; {I: I})" shape="box"];
  "16" [color="black" label="16: Match(lang.Builtin{name: N, type: T}; {})" shape="box"]; // cache: [lang.Builtin{name: "intToString", type: tapp{from: "int", to: "string"}}; {N: "intToString", T: tapp{from: "int", to: "string"}}]
  "17" [color="black" label="17: Join(16 & 15): tc.scopeBuiltin" shape="box"];
  "2" [color="black" label="2: Match(tc.typeI{id: I, type: T}; {I: I})" shape="box"];
  "3" [color="black" label="3: Match(tc.typeFC{id: I, type: T}; {I: I, T: T})" shape="box"];
  "4" [color="black" label="4: Match(tc.typeVar{id: I, type: T}; {I: I, T: T})" shape="box"];
  "5" [color="black" label="5: Match(ast.IntLit{id: I}; {})" shape="box"];
  "6" [color="black" label="6: Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T})" shape="box"];
  "7" [color="black" label="7: Match(ast.Var{id: I, name: N}; {})" shape="box"];
  "8" [color="black" label="8: Join(7 & 6): tc.typeVar" shape="box"];
  "9" [color="black" label="9: Match(tc.Type{id: AID, type: F}; {I: AID, T: F})" shape="box"];
  "ast.Expr" [color="black" label="ast.Expr: Subst(ast.Expr{id: I})" shape="box"];
  "ast.FuncCall" [color="black" label="ast.FuncCall: Base" shape="box"];
  "ast.IntLit" [color="black" label="ast.IntLit: Base" shape="box"];
  "ast.RootExpr" [color="black" label="ast.RootExpr: Base" shape="box"];
  "ast.Var" [color="black" label="ast.Var: Base" shape="box"];
  "lang.Builtin" [color="black" label="lang.Builtin: Base" shape="box"]; // cache: [lang.Builtin{name: "intToString", type: tapp{from: "int", to: "string"}}; {}]
  "tc.ScopeItem" [color="black" label="tc.ScopeItem: Subst(tc.ScopeItem{id: I, location: L, name: N, type: T})" shape="box"];
  "tc.Type" [color="black" label="tc.Type: Subst(tc.Type{id: I, type: T})" shape="box"];
  "tc.scopeBuiltin" [color="black" label="tc.scopeBuiltin: Subst(tc.scopeBuiltin{id: I, location: \"builtin\", name: N, type: T})" shape="box"];
  "tc.typeFC" [color="black" label="tc.typeFC: Subst(tc.typeFC{id: I, type: T})" shape="box"];
  "tc.typeI" [color="black" label="tc.typeI: Subst(tc.typeI{id: I, type: \"int\"})" shape="box"];
  "tc.typeVar" [color="black" label="tc.typeVar: Subst(tc.typeVar{id: I, type: T})" shape="box"];
  "0" -> "ast.Expr" [];
  "1" -> "tc.Type" [];
  "10" -> "11" [];
  "11" -> "13" [];
  "12" -> "13" [];
  "13" -> "tc.typeFC" [];
  "14" -> "tc.ScopeItem" [];
  "15" -> "17" [];
  "16" -> "17" [];
  "17" -> "tc.scopeBuiltin" [];
  "2" -> "1" [];
  "3" -> "1" [];
  "4" -> "1" [];
  "5" -> "tc.typeI" [];
  "6" -> "8" [];
  "7" -> "8" [];
  "8" -> "tc.typeVar" [];
  "9" -> "11" [];
  "ast.Expr" -> "15" [];
  "ast.FuncCall" -> "12" [];
  "ast.IntLit" -> "5" [];
  "ast.Var" -> "0" [];
  "ast.Var" -> "7" [];
  "lang.Builtin" -> "16" [];
  "tc.ScopeItem" -> "6" [];
  "tc.Type" -> "9" [];
  "tc.Type" -> "10" [];
  "tc.scopeBuiltin" -> "14" [];
  "tc.typeFC" -> "3" [];
  "tc.typeI" -> "2" [];
  "tc.typeVar" -> "4" [];
}

ast.RootExpr{id: 0}.
----
text/plain
ast.RootExpr: [ast.RootExpr{id: 0}; {}]

ast.FuncCall{argID: 2, funcID: 1, id: 0, location: span{from: 0, to: 13}}.
----
text/plain
ast.FuncCall: [ast.FuncCall{argID: 2, funcID: 1, id: 0, location: span{from: 0, to: 13}}; {}]
12: [ast.FuncCall{argID: 2, funcID: 1, id: 0, location: span{from: 0, to: 13}}; {AID: 2, FID: 1, I: 0}]
13: []

ast.Var{id: 1, location: span{from: 0, to: 10}, name: "int2string"}.
----
text/plain
ast.Var: [ast.Var{id: 1, location: span{from: 0, to: 10}, name: "int2string"}; {}]
0: [ast.Var{id: 1, location: span{from: 0, to: 10}, name: "int2string"}; {I: 1}]
7: [ast.Var{id: 1, location: span{from: 0, to: 10}, name: "int2string"}; {I: 1, N: "int2string"}]
ast.Expr: [ast.Expr{id: 1}; {I: 1}]
8: []
15: [ast.Expr{id: 1}; {I: 1}]
17: [tc.scopeBuiltin{id: 1}; {I: 1, N: "intToString", T: tapp{from: "int", to: "string"}}]
tc.scopeBuiltin: [tc.scopeBuiltin{id: 1, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 1, N: "intToString", T: tapp{from: "int", to: "string"}}]
14: [tc.scopeBuiltin{id: 1, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 1, L: "builtin", N: "intToString", T: tapp{from: "int", to: "string"}}]
tc.ScopeItem: [tc.ScopeItem{id: 1, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 1, L: "builtin", N: "intToString", T: tapp{from: "int", to: "string"}}]
6: [tc.ScopeItem{id: 1, location: "builtin", name: "intToString", type: tapp{from: "int", to: "string"}}; {I: 1, N: "intToString", T: tapp{from: "int", to: "string"}}]
8: []

ast.IntLit{id: 2, location: span{from: 11, to: 12}, val: 2}.
----
text/plain
ast.IntLit: [ast.IntLit{id: 2, location: span{from: 11, to: 12}, val: 2}; {}]
5: [ast.IntLit{id: 2, location: span{from: 11, to: 12}, val: 2}; {I: 2}]
tc.typeI: [tc.typeI{id: 2, type: "int"}; {I: 2}]
2: [tc.typeI{id: 2, type: "int"}; {I: 2, T: "int"}]
1: [tc.typeI{id: 2, type: "int"}; {I: 2, T: "int"}]
tc.Type: [tc.Type{id: 2, type: "int"}; {I: 2, T: "int"}]
9: [tc.Type{id: 2, type: "int"}; {AID: 2, F: "int"}]
10: []
11: []
