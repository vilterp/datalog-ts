.load fp/dl/main.dl
----

.rulegraph
----
digraph G {
  "0" [label="0: Union" shape="box"];
  "1" [label="1: Match(ast.StringLit{id: I, location: S}; {})" shape="box"];
  "10" [label="10: Match(ast.Expr{id: I, location: S}; {I: I, S: S})" shape="box"];
  "100" [label="100: Match(ast.Expr{id: UI, location: UL}; {I: UI, S: UL})" shape="box"];
  "101" [label="101: Join(100 & 99)" shape="box"];
  "102" [label="102: Match(ide.Usage{definitionLoc: VL, usageLoc: UL}; {DL: VL, UL: UL})" shape="box"];
  "103" [label="103: Join(102 & 101)" shape="box"];
  "104" [label="104: Match(ast.LetExpr{bindingID: I, varLoc: VL}; {})" shape="box"];
  "105" [label="105: Join(104 & 103)" shape="box"];
  "106" [label="106: Match(tc.ScopeItem{id: I, location: DL, name: N}; {I: I, L: DL, N: N})" shape="box"];
  "107" [label="107: Match(ast.Var{id: I, location: UL, name: N}; {})" shape="box"];
  "108" [label="108: Join(107 & 106)" shape="box"];
  "109" [label="109: Match(ide.Cursor{idx: CIdx}; {})" shape="box"];
  "11" [label="11: Join(10 & 9)" shape="box"];
  "110" [label="110: Match(ast.Placeholder{id: I, location: span{from: FIdx, to: TIdx}}; {})" shape="box"];
  "111" [label="111: Join(110 & 109)" shape="box"];
  "112" [label="112: FIdx <= CIdx" shape="box"];
  "113" [label="113: CIdx <= TIdx" shape="box"];
  "114" [label="114: Match(ide.Suggestion{id: I, name: N, type: T, typeMatch: M}; {I: I, M: M, N: N, T: T})" shape="box"];
  "115" [label="115: Match(ide.CurrentPlaceholder{id: I}; {I: I})" shape="box"];
  "116" [label="116: Join(115 & 114)" shape="box"];
  "117" [label="117: Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T})" shape="box"];
  "118" [label="118: Match(ast.Expr{id: I, location: span{from: Idx}}; {I: I})" shape="box"];
  "119" [label="119: Join(118 & 117)" shape="box"];
  "12" [label="12: Match(ast.LetExpr{bindingID: I, id: P}; {})" shape="box"];
  "120" [label="120: Match(ide.Cursor{idx: Idx}; {})" shape="box"];
  "121" [label="121: Join(120 & 119)" shape="box"];
  "122" [label="122: Match(tc.Type{id: I, type: T}; {I: I, T: T})" shape="box"];
  "123" [label="123: Match(ast.Expr{id: I, location: span{from: FIdx, to: TIdx}}; {I: I})" shape="box"];
  "124" [label="124: Join(123 & 122)" shape="box"];
  "125" [label="125: Match(ide.Cursor{idx: CIdx}; {})" shape="box"];
  "126" [label="126: Join(125 & 124)" shape="box"];
  "127" [label="127: FIdx <= CIdx" shape="box"];
  "128" [label="128: CIdx <= TIdx" shape="box"];
  "129" [label="129: Match(ide.Usage{definitionLoc: DL, usageLoc: span{from: FIdx, to: TIdx}}; {DL: DL})" shape="box"];
  "13" [label="13: Match(ast.Expr{id: I, location: S}; {I: I, S: S})" shape="box"];
  "130" [label="130: Match(ide.Cursor{idx: CIdx}; {})" shape="box"];
  "131" [label="131: Join(130 & 129)" shape="box"];
  "132" [label="132: FIdx <= CIdx" shape="box"];
  "133" [label="133: CIdx <= TIdx" shape="box"];
  "134" [label="134: Match(ide.Usage{definitionLoc: span{from: FIdx, to: TIdx}, usageLoc: UL}; {UL: UL})" shape="box"];
  "135" [label="135: Match(ide.Cursor{idx: CIdx}; {})" shape="box"];
  "136" [label="136: Join(135 & 134)" shape="box"];
  "137" [label="137: FIdx <= CIdx" shape="box"];
  "138" [label="138: CIdx <= TIdx" shape="box"];
  "139" [label="139: Union" shape="box"];
  "14" [label="14: Join(13 & 12)" shape="box"];
  "140" [label="140: Match(ide.CurrentUsageDefn{defnLoc: DL, usageLoc: UL}; {UL: UL})" shape="box"];
  "141" [label="141: Match(ide.CurrentUsageUsage{defnLoc: DL, usageLoc: UL}; {DL: DL})" shape="box"];
  "142" [label="142: Match(ide.CurrentUsageUsageIndirect{defnLoc: DL, usageLoc: UL}; {DL: DL, UL: UL})" shape="box"];
  "143" [label="143: DL != \"builtin\"" shape="box"];
  "144" [label="144: Match(ide.Cursor{idx: CIdx}; {})" shape="box"];
  "145" [label="145: Match(ide.Usage{definitionLoc: span{from: FIdx, to: TIdx}, usageLoc: UL}; {UL: UL})" shape="box"];
  "146" [label="146: Join(145 & 144)" shape="box"];
  "147" [label="147: FIdx <= CIdx" shape="box"];
  "148" [label="148: CIdx <= TIdx" shape="box"];
  "149" [label="149: Match(ide.Cursor{idx: CIdx}; {})" shape="box"];
  "15" [label="15: Match(ast.FuncCall{funcID: I, id: P}; {})" shape="box"];
  "150" [label="150: Match(ide.Usage{definitionLoc: DL, usageLoc: span{from: FIdx, to: TIdx}}; {DL: DL})" shape="box"];
  "151" [label="151: Join(150 & 149)" shape="box"];
  "152" [label="152: FIdx <= CIdx" shape="box"];
  "153" [label="153: CIdx <= TIdx" shape="box"];
  "154" [label="154: Match(ide.Usage{definitionLoc: DL, usageLoc: UL}; {DL: DL, UL: UL})" shape="box"];
  "155" [label="155: Match(ide.CurrentUsageUsage{defnLoc: DL}; {DL: DL})" shape="box"];
  "156" [label="156: Join(155 & 154)" shape="box"];
  "157" [label="157: Match(ide.CurrentUsage{defnLoc: DL, usageLoc: UL}; {DL: DL, UL: UL})" shape="box"];
  "158" [label="158: DL != \"builtin\"" shape="box"];
  "159" [label="159: Union" shape="box"];
  "16" [label="16: Match(ast.Expr{id: I, location: S}; {I: I, S: S})" shape="box"];
  "160" [label="160: Match(hl.segmentDefn{highlight: H, span: S, type: T}; {S: S})" shape="box"];
  "161" [label="161: Match(hl.segmentDefnHL{highlight: H, span: S, type: T}; {S: S})" shape="box"];
  "162" [label="162: Match(hl.segmentUsage{highlight: H, span: S, type: T}; {S: S})" shape="box"];
  "163" [label="163: Match(hl.segmentUndefinedVar{highlight: H, span: S, type: T}; {S: S})" shape="box"];
  "164" [label="164: Match(hl.segmentUsageHL{highlight: H, span: S, type: T}; {S: S})" shape="box"];
  "165" [label="165: Match(hl.segmentStr{highlight: H, span: S, type: T}; {S: S})" shape="box"];
  "166" [label="166: Match(hl.segmentInt{highlight: H, span: S, type: T}; {S: S})" shape="box"];
  "167" [label="167: Match(hl.segmentKeyword{highlight: H, span: S, type: T}; {S: S})" shape="box"];
  "168" [label="168: Match(hl.segmentType{highlight: H, span: S, type: T}; {S: S})" shape="box"];
  "169" [label="169: Match(hl.segmentTypeHL{highlight: H, span: S, type: T}; {S: S})" shape="box"];
  "17" [label="17: Join(16 & 15)" shape="box"];
  "170" [label="170: Match(ide.Usage{definitionLoc: S}; {DL: S})" shape="box"];
  "171" [label="171: Match(hl.varDefn{span: S}; {S: S})" shape="box"];
  "172" [label="172: Join(171 & 170)" shape="box"];
  "173" [label="173: Match(hl.varDefn{span: S}; {S: S})" shape="box"];
  "174" [label="174: Match(ide.CurrentUsage{defnLoc: S}; {DL: S})" shape="box"];
  "175" [label="175: Join(174 & 173)" shape="box"];
  "176" [label="176: Union" shape="box"];
  "177" [label="177: Match(ast.LetExpr{varLoc: S}; {})" shape="box"];
  "178" [label="178: Match(ast.LambdaParam{location: S}; {})" shape="box"];
  "179" [label="179: Match(ide.Usage{usageLoc: S}; {UL: S})" shape="box"];
  "18" [label="18: Match(ast.FuncCall{argID: I, id: P}; {})" shape="box"];
  "180" [label="180: Match(ast.Var{location: S}; {})" shape="box"];
  "181" [label="181: Join(180 & 179)" shape="box"];
  "182" [label="182: Match(ast.Var{location: S}; {})" shape="box"];
  "183" [label="183: Match(ast.Var{location: S}; {})" shape="box"];
  "184" [label="184: Match(ide.CurrentUsage{usageLoc: S}; {UL: S})" shape="box"];
  "185" [label="185: Join(184 & 183)" shape="box"];
  "186" [label="186: Match(ast.StringLit{location: S}; {})" shape="box"];
  "187" [label="187: Match(ast.IntLit{location: S}; {})" shape="box"];
  "188" [label="188: Union" shape="box"];
  "189" [label="189: Match(ast.LetExpr{inLoc: S}; {})" shape="box"];
  "19" [label="19: Match(ast.Expr{id: I, location: S}; {I: I, S: S})" shape="box"];
  "190" [label="190: Match(ast.LetExpr{letLoc: S}; {})" shape="box"];
  "191" [label="191: Union" shape="box"];
  "192" [label="192: Match(ast.LambdaParam{ty: N, typeLoc: S}; {})" shape="box"];
  "193" [label="193: Match(ast.Lambda{retType: N, retTypeLoc: S}; {})" shape="box"];
  "194" [label="194: Match(hl.typeHighlighted{name: N}; {T: N})" shape="box"];
  "195" [label="195: Match(hl.segmentType{name: N, span: S}; {N: N, S: S})" shape="box"];
  "196" [label="196: Join(195 & 194)" shape="box"];
  "197" [label="197: Union" shape="box"];
  "198" [label="198: Match(hl.typeHighlightedParam{name: T}; {T: T})" shape="box"];
  "199" [label="199: Match(hl.typeHighlightedRet{name: T}; {T: T})" shape="box"];
  "2" [label="2: Match(ast.IntLit{id: I, location: S}; {})" shape="box"];
  "20" [label="20: Join(19 & 18)" shape="box"];
  "200" [label="200: Match(ide.Cursor{idx: CIdx}; {})" shape="box"];
  "201" [label="201: Match(ast.LambdaParam{ty: T, typeLoc: span{from: FIdx, to: TIdx}}; {})" shape="box"];
  "202" [label="202: Join(201 & 200)" shape="box"];
  "203" [label="203: FIdx <= CIdx" shape="box"];
  "204" [label="204: CIdx <= TIdx" shape="box"];
  "205" [label="205: Match(ide.Cursor{idx: CIdx}; {})" shape="box"];
  "206" [label="206: Match(ast.Lambda{retType: T, retTypeLoc: span{from: FIdx, to: TIdx}}; {})" shape="box"];
  "207" [label="207: Join(206 & 205)" shape="box"];
  "208" [label="208: FIdx <= CIdx" shape="box"];
  "209" [label="209: CIdx <= TIdx" shape="box"];
  "21" [label="21: Match(ast.Lambda{body: I, id: P}; {})" shape="box"];
  "22" [label="22: Match(ast.Expr{id: I, location: S}; {I: I, S: S})" shape="box"];
  "23" [label="23: Join(22 & 21)" shape="box"];
  "24" [label="24: Union" shape="box"];
  "25" [label="25: Match(tc.typeS{id: I, type: T}; {I: I})" shape="box"];
  "26" [label="26: Match(tc.typeI{id: I, type: T}; {I: I})" shape="box"];
  "27" [label="27: Match(tc.typeLambda{id: I, type: T}; {I: I})" shape="box"];
  "28" [label="28: Match(tc.typeFC{id: I, type: T}; {I: I, T: T})" shape="box"];
  "29" [label="29: Match(tc.typeLet{id: I, type: T}; {I: I, T: T})" shape="box"];
  "3" [label="3: Match(ast.Var{id: I, location: S}; {})" shape="box"];
  "30" [label="30: Match(tc.typeVar{id: I, type: T}; {I: I, T: T})" shape="box"];
  "31" [label="31: Match(tc.typePlaceholder{id: I, type: T}; {I: I})" shape="box"];
  "32" [label="32: Match(ast.StringLit{id: I}; {})" shape="box"];
  "33" [label="33: Match(ast.IntLit{id: I}; {})" shape="box"];
  "34" [label="34: Match(tc.Type{id: AID, type: F}; {I: AID, T: F})" shape="box"];
  "35" [label="35: Match(tc.Type{id: FID, type: tapp{from: F, to: T}}; {I: FID})" shape="box"];
  "36" [label="36: Join(35 & 34)" shape="box"];
  "37" [label="37: Match(ast.FuncCall{argID: AID, funcID: FID, id: I}; {})" shape="box"];
  "38" [label="38: Join(37 & 36)" shape="box"];
  "39" [label="39: Match(tc.Type{id: BID, type: T}; {I: BID, T: T})" shape="box"];
  "4" [label="4: Match(ast.LetExpr{id: I, location: S}; {})" shape="box"];
  "40" [label="40: Match(ast.LetExpr{bodyID: BID, id: I}; {})" shape="box"];
  "41" [label="41: Join(40 & 39)" shape="box"];
  "42" [label="42: Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T})" shape="box"];
  "43" [label="43: Match(ast.Var{id: I, name: N}; {})" shape="box"];
  "44" [label="44: Join(43 & 42)" shape="box"];
  "45" [label="45: Match(tc.Type{id: B, type: R}; {I: B, T: R})" shape="box"];
  "46" [label="46: Match(ast.LambdaParam{lambdaID: I, ty: F}; {})" shape="box"];
  "47" [label="47: Join(46 & 45)" shape="box"];
  "48" [label="48: Match(ast.Lambda{body: B, id: I, retType: R}; {})" shape="box"];
  "49" [label="49: Join(48 & 47)" shape="box"];
  "5" [label="5: Match(ast.FuncCall{id: I, location: S}; {})" shape="box"];
  "50" [label="50: Match(ast.Placeholder{id: I}; {})" shape="box"];
  "51" [label="51: Union" shape="box"];
  "52" [label="52: Match(tc.scopeBuiltin{id: I, location: L, name: N, type: T}; {I: I, N: N, T: T})" shape="box"];
  "53" [label="53: Match(tc.scopeLet{id: I, location: L, name: N, type: T}; {I: I, L: L, N: N, T: T})" shape="box"];
  "54" [label="54: Match(tc.scopeLambda{id: I, location: L, name: N, type: T}; {I: I, L: L, N: N, T: T})" shape="box"];
  "55" [label="55: Match(tc.ScopeItem{id: P, location: L, name: N, type: T}; {I: P, L: L, N: N, T: T})" shape="box"];
  "56" [label="56: Match(tc.parentScope{id: I, parentID: P}; {I: I, P: P})" shape="box"];
  "57" [label="57: Join(56 & 55)" shape="box"];
  "58" [label="58: Match(lang.Builtin{name: N, type: T}; {})" shape="box"]; // cache: [lang.Builtin{name: "intToString", type: tapp{from: "int", to: "string"}}; {N: "intToString", T: tapp{from: "int", to: "string"}}, lang.Builtin{name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {N: "plus", T: tapp{from: "int", to: tapp{from: "int", to: "int"}}}, lang.Builtin{name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {N: "concat", T: tapp{from: "string", to: tapp{from: "string", to: "string"}}}]
  "59" [label="59: Match(ast.RootExpr{id: I}; {})" shape="box"];
  "6" [label="6: Match(ast.Lambda{id: I, location: S}; {})" shape="box"];
  "60" [label="60: Join(59 & 58)" shape="box"];
  "61" [label="61: Match(tc.Type{id: B, type: T}; {I: B, T: T})" shape="box"];
  "62" [label="62: Match(ast.LetExpr{bindingID: B, bodyID: I, varLoc: L, varName: N}; {})" shape="box"];
  "63" [label="63: Join(62 & 61)" shape="box"];
  "64" [label="64: Match(ast.LambdaParam{lambdaID: LID, location: L, name: N, ty: T}; {})" shape="box"];
  "65" [label="65: Match(ast.Lambda{body: I, id: LID}; {})" shape="box"];
  "66" [label="66: Join(65 & 64)" shape="box"];
  "67" [label="67: Union" shape="box"];
  "68" [label="68: Match(ast.LetExpr{bodyID: I, id: P}; {})" shape="box"];
  "69" [label="69: Match(ast.LetExpr{bindingID: I, id: P}; {})" shape="box"];
  "7" [label="7: Match(ast.Placeholder{id: I, location: S}; {})" shape="box"];
  "70" [label="70: Match(ast.FuncCall{argID: I, id: P}; {})" shape="box"];
  "71" [label="71: Match(ast.FuncCall{funcID: I, id: P}; {})" shape="box"];
  "72" [label="72: Match(ast.Lambda{body: I, id: P}; {})" shape="box"];
  "73" [label="73: Union" shape="box"];
  "74" [label="74: Match(ide.suggestionVar{id: I, name: N, type: T, typeMatch: M}; {I: I, N: N, T: T})" shape="box"];
  "75" [label="75: Match(ide.suggestionFunc{id: I, name: N, type: T, typeMatch: M}; {I: I, N: N})" shape="box"];
  "76" [label="76: Match(ide.suggestionScope{id: I, name: N, type: T, typeMatch: M}; {I: I, N: N, T: T})" shape="box"];
  "77" [label="77: Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T})" shape="box"];
  "78" [label="78: Match(ide.expectedType{id: I, type: T}; {I: I, T: T})" shape="box"];
  "79" [label="79: Join(78 & 77)" shape="box"];
  "8" [label="8: Union" shape="box"];
  "80" [label="80: Match(ast.Placeholder{id: I}; {})" shape="box"];
  "81" [label="81: Join(80 & 79)" shape="box"];
  "82" [label="82: Match(tc.ScopeItem{id: I, name: N, type: tapp{from: TF, to: TT}}; {I: I, N: N})" shape="box"];
  "83" [label="83: Match(ide.expectedType{id: I, type: TT}; {I: I, T: TT})" shape="box"];
  "84" [label="84: Join(83 & 82)" shape="box"];
  "85" [label="85: Match(ast.Placeholder{id: I}; {})" shape="box"];
  "86" [label="86: Join(85 & 84)" shape="box"];
  "87" [label="87: Match(tc.ScopeItem{id: I, name: N, type: T}; {I: I, N: N, T: T})" shape="box"];
  "88" [label="88: Match(ast.Placeholder{id: I}; {})" shape="box"];
  "89" [label="89: Join(88 & 87)" shape="box"];
  "9" [label="9: Match(ast.LetExpr{bodyID: I, id: P}; {})" shape="box"];
  "90" [label="90: Union" shape="box"];
  "91" [label="91: Match(ast.Lambda{body: I, retType: T}; {})" shape="box"];
  "92" [label="92: Match(ide.expectedType{id: L, type: T}; {I: L, T: T})" shape="box"];
  "93" [label="93: Match(ast.LetExpr{bodyID: I, id: L}; {})" shape="box"];
  "94" [label="94: Join(93 & 92)" shape="box"];
  "95" [label="95: Match(tc.Type{id: F, type: tapp{from: T}}; {I: F})" shape="box"];
  "96" [label="96: Match(ast.FuncCall{argID: I, funcID: F}; {})" shape="box"];
  "97" [label="97: Join(96 & 95)" shape="box"];
  "98" [label="98: Match(ide.expectedTypeBinding{id: I, type: T}; {I: I, T: T})" shape="box"];
  "99" [label="99: Match(ide.expectedType{id: UI, type: T}; {I: UI, T: T})" shape="box"];
  "ast.Expr" [label="ast.Expr: Subst(ast.Expr{id: I, location: S})" shape="box"];
  "ast.FuncCall" [label="ast.FuncCall: Base" shape="box"];
  "ast.IntLit" [label="ast.IntLit: Base" shape="box"];
  "ast.Lambda" [label="ast.Lambda: Base" shape="box"];
  "ast.LambdaParam" [label="ast.LambdaParam: Base" shape="box"];
  "ast.LetExpr" [label="ast.LetExpr: Base" shape="box"];
  "ast.ParentExpr" [label="ast.ParentExpr: Subst(ast.ParentExpr{id: I, parent: P, span: S})" shape="box"];
  "ast.Placeholder" [label="ast.Placeholder: Base" shape="box"];
  "ast.RootExpr" [label="ast.RootExpr: Base" shape="box"];
  "ast.StringLit" [label="ast.StringLit: Base" shape="box"];
  "ast.Var" [label="ast.Var: Base" shape="box"];
  "hl.Segment" [label="hl.Segment: Subst(hl.Segment{highlight: H, span: S, type: T})" shape="box"];
  "hl.segmentDefn" [label="hl.segmentDefn: Subst(hl.segmentDefn{highlight: false, span: S, type: \"defn\"})" shape="box"];
  "hl.segmentDefnHL" [label="hl.segmentDefnHL: Subst(hl.segmentDefnHL{highlight: true, span: S, type: \"defn\"})" shape="box"];
  "hl.segmentInt" [label="hl.segmentInt: Subst(hl.segmentInt{highlight: false, span: S, type: \"int\"})" shape="box"];
  "hl.segmentKeyword" [label="hl.segmentKeyword: Subst(hl.segmentKeyword{highlight: false, span: S, type: \"keyword\"})" shape="box"];
  "hl.segmentStr" [label="hl.segmentStr: Subst(hl.segmentStr{highlight: false, span: S, type: \"string\"})" shape="box"];
  "hl.segmentType" [label="hl.segmentType: Subst(hl.segmentType{highlight: false, name: N, span: S, type: \"type\"})" shape="box"];
  "hl.segmentTypeHL" [label="hl.segmentTypeHL: Subst(hl.segmentTypeHL{highlight: true, span: S, type: \"type\"})" shape="box"];
  "hl.segmentUndefinedVar" [label="hl.segmentUndefinedVar: Subst(hl.segmentUndefinedVar{highlight: false, span: S, type: \"undefined-var\"})" shape="box"];
  "hl.segmentUsage" [label="hl.segmentUsage: Subst(hl.segmentUsage{highlight: false, span: S, type: \"usage\"})" shape="box"];
  "hl.segmentUsageHL" [label="hl.segmentUsageHL: Subst(hl.segmentUsageHL{highlight: true, span: S, type: \"usage\"})" shape="box"];
  "hl.typeHighlighted" [label="hl.typeHighlighted: Subst(hl.typeHighlighted{name: T})" shape="box"];
  "hl.typeHighlightedParam" [label="hl.typeHighlightedParam: Subst(hl.typeHighlightedParam{name: T})" shape="box"];
  "hl.typeHighlightedRet" [label="hl.typeHighlightedRet: Subst(hl.typeHighlightedRet{name: T})" shape="box"];
  "hl.varDefn" [label="hl.varDefn: Subst(hl.varDefn{span: S})" shape="box"];
  "ide.CurrentPlaceholder" [label="ide.CurrentPlaceholder: Subst(ide.CurrentPlaceholder{id: I, span: span{from: FIdx, to: TIdx}})" shape="box"];
  "ide.CurrentScope" [label="ide.CurrentScope: Subst(ide.CurrentScope{id: I, name: N, type: T})" shape="box"];
  "ide.CurrentSuggestion" [label="ide.CurrentSuggestion: Subst(ide.CurrentSuggestion{id: I, name: N, type: T, typeMatch: M})" shape="box"];
  "ide.CurrentType" [label="ide.CurrentType: Subst(ide.CurrentType{id: I, span: span{from: FIdx, to: TIdx}, type: T})" shape="box"];
  "ide.CurrentUsage" [label="ide.CurrentUsage: Subst(ide.CurrentUsage{defnLoc: DL, usageLoc: UL})" shape="box"];
  "ide.CurrentUsageDefn" [label="ide.CurrentUsageDefn: Subst(ide.CurrentUsageDefn{defnLoc: span{from: FIdx, to: TIdx}, usageLoc: UL})" shape="box"];
  "ide.CurrentUsageUsage" [label="ide.CurrentUsageUsage: Subst(ide.CurrentUsageUsage{defnLoc: DL, usageLoc: span{from: FIdx, to: TIdx}})" shape="box"];
  "ide.CurrentUsageUsageIndirect" [label="ide.CurrentUsageUsageIndirect: Subst(ide.CurrentUsageUsageIndirect{defnLoc: DL, usageLoc: UL})" shape="box"];
  "ide.Cursor" [label="ide.Cursor: Base" shape="box"];
  "ide.DefnForCursor" [label="ide.DefnForCursor: Subst(ide.DefnForCursor{defnLoc: DL})" shape="box"];
  "ide.RenameCandidate" [label="ide.RenameCandidate: Subst(ide.RenameCandidate{defnLoc: DL, usageLoc: UL})" shape="box"];
  "ide.Suggestion" [label="ide.Suggestion: Subst(ide.Suggestion{id: I, name: N, type: T, typeMatch: M})" shape="box"];
  "ide.Usage" [label="ide.Usage: Subst(ide.Usage{definitionLoc: DL, name: N, usageLoc: UL})" shape="box"];
  "ide.UsageForCursor" [label="ide.UsageForCursor: Subst(ide.UsageForCursor{usageLoc: UL})" shape="box"];
  "ide.expectedType" [label="ide.expectedType: Subst(ide.expectedType{id: I, type: T})" shape="box"];
  "ide.expectedTypeBinding" [label="ide.expectedTypeBinding: Subst(ide.expectedTypeBinding{id: I, type: T})" shape="box"];
  "ide.suggestionFunc" [label="ide.suggestionFunc: Subst(ide.suggestionFunc{id: I, name: N, type: tapp{from: TF, to: TT}, typeMatch: true})" shape="box"];
  "ide.suggestionScope" [label="ide.suggestionScope: Subst(ide.suggestionScope{id: I, name: N, type: T, typeMatch: false})" shape="box"];
  "ide.suggestionVar" [label="ide.suggestionVar: Subst(ide.suggestionVar{id: I, name: N, type: T, typeMatch: true})" shape="box"];
  "lang.Builtin" [label="lang.Builtin: Base" shape="box"]; // cache: [lang.Builtin{name: "intToString", type: tapp{from: "int", to: "string"}}; {}, lang.Builtin{name: "plus", type: tapp{from: "int", to: tapp{from: "int", to: "int"}}}; {}, lang.Builtin{name: "concat", type: tapp{from: "string", to: tapp{from: "string", to: "string"}}}; {}]
  "tc.ScopeItem" [label="tc.ScopeItem: Subst(tc.ScopeItem{id: I, location: L, name: N, type: T})" shape="box"];
  "tc.Type" [label="tc.Type: Subst(tc.Type{id: I, type: T})" shape="box"];
  "tc.parentScope" [label="tc.parentScope: Subst(tc.parentScope{id: I, parentID: P})" shape="box"];
  "tc.scopeBuiltin" [label="tc.scopeBuiltin: Subst(tc.scopeBuiltin{id: I, location: \"builtin\", name: N, type: T})" shape="box"];
  "tc.scopeLambda" [label="tc.scopeLambda: Subst(tc.scopeLambda{id: I, location: L, name: N, type: T})" shape="box"];
  "tc.scopeLet" [label="tc.scopeLet: Subst(tc.scopeLet{id: I, location: L, name: N, type: T})" shape="box"];
  "tc.typeFC" [label="tc.typeFC: Subst(tc.typeFC{id: I, type: T})" shape="box"];
  "tc.typeI" [label="tc.typeI: Subst(tc.typeI{id: I, type: \"int\"})" shape="box"];
  "tc.typeLambda" [label="tc.typeLambda: Subst(tc.typeLambda{id: I, type: tapp{from: F, to: R}})" shape="box"];
  "tc.typeLet" [label="tc.typeLet: Subst(tc.typeLet{id: I, type: T})" shape="box"];
  "tc.typePlaceholder" [label="tc.typePlaceholder: Subst(tc.typePlaceholder{id: I, type: \"unknown\"})" shape="box"];
  "tc.typeS" [label="tc.typeS: Subst(tc.typeS{id: I, type: \"string\"})" shape="box"];
  "tc.typeVar" [label="tc.typeVar: Subst(tc.typeVar{id: I, type: T})" shape="box"];
  "0" -> "ast.Expr" [];
  "1" -> "0" [];
  "10" -> "11" [];
  "100" -> "101" [];
  "101" -> "103" [];
  "102" -> "103" [];
  "103" -> "105" [];
  "104" -> "105" [];
  "105" -> "ide.expectedTypeBinding" [];
  "106" -> "108" [];
  "107" -> "108" [];
  "108" -> "ide.Usage" [];
  "109" -> "111" [];
  "11" -> "8" [];
  "110" -> "111" [];
  "111" -> "112" [];
  "112" -> "113" [];
  "113" -> "ide.CurrentPlaceholder" [];
  "114" -> "116" [];
  "115" -> "116" [];
  "116" -> "ide.CurrentSuggestion" [];
  "117" -> "119" [];
  "118" -> "119" [];
  "119" -> "121" [];
  "12" -> "14" [];
  "120" -> "121" [];
  "121" -> "ide.CurrentScope" [];
  "122" -> "124" [];
  "123" -> "124" [];
  "124" -> "126" [];
  "125" -> "126" [];
  "126" -> "127" [];
  "127" -> "128" [];
  "128" -> "ide.CurrentType" [];
  "129" -> "131" [];
  "13" -> "14" [];
  "130" -> "131" [];
  "131" -> "132" [];
  "132" -> "133" [];
  "133" -> "ide.DefnForCursor" [];
  "134" -> "136" [];
  "135" -> "136" [];
  "136" -> "137" [];
  "137" -> "138" [];
  "138" -> "ide.UsageForCursor" [];
  "139" -> "ide.CurrentUsage" [];
  "14" -> "8" [];
  "140" -> "139" [];
  "141" -> "139" [];
  "142" -> "143" [];
  "143" -> "139" [];
  "144" -> "146" [];
  "145" -> "146" [];
  "146" -> "147" [];
  "147" -> "148" [];
  "148" -> "ide.CurrentUsageDefn" [];
  "149" -> "151" [];
  "15" -> "17" [];
  "150" -> "151" [];
  "151" -> "152" [];
  "152" -> "153" [];
  "153" -> "ide.CurrentUsageUsage" [];
  "154" -> "156" [];
  "155" -> "156" [];
  "156" -> "ide.CurrentUsageUsageIndirect" [];
  "157" -> "158" [];
  "158" -> "ide.RenameCandidate" [];
  "159" -> "hl.Segment" [];
  "16" -> "17" [];
  "160" -> "159" [];
  "161" -> "159" [];
  "162" -> "159" [];
  "163" -> "159" [];
  "164" -> "159" [];
  "165" -> "159" [];
  "166" -> "159" [];
  "167" -> "159" [];
  "168" -> "159" [];
  "169" -> "159" [];
  "17" -> "8" [];
  "170" -> "172" [];
  "171" -> "172" [];
  "172" -> "hl.segmentDefn" [];
  "173" -> "175" [];
  "174" -> "175" [];
  "175" -> "hl.segmentDefnHL" [];
  "176" -> "hl.varDefn" [];
  "177" -> "176" [];
  "178" -> "176" [];
  "179" -> "181" [];
  "18" -> "20" [];
  "180" -> "181" [];
  "181" -> "hl.segmentUsage" [];
  "182" -> "hl.segmentUndefinedVar" [];
  "183" -> "185" [];
  "184" -> "185" [];
  "185" -> "hl.segmentUsageHL" [];
  "186" -> "hl.segmentStr" [];
  "187" -> "hl.segmentInt" [];
  "188" -> "hl.segmentKeyword" [];
  "189" -> "188" [];
  "19" -> "20" [];
  "190" -> "188" [];
  "191" -> "hl.segmentType" [];
  "192" -> "191" [];
  "193" -> "191" [];
  "194" -> "196" [];
  "195" -> "196" [];
  "196" -> "hl.segmentTypeHL" [];
  "197" -> "hl.typeHighlighted" [];
  "198" -> "197" [];
  "199" -> "197" [];
  "2" -> "0" [];
  "20" -> "8" [];
  "200" -> "202" [];
  "201" -> "202" [];
  "202" -> "203" [];
  "203" -> "204" [];
  "204" -> "hl.typeHighlightedParam" [];
  "205" -> "207" [];
  "206" -> "207" [];
  "207" -> "208" [];
  "208" -> "209" [];
  "209" -> "hl.typeHighlightedRet" [];
  "21" -> "23" [];
  "22" -> "23" [];
  "23" -> "8" [];
  "24" -> "tc.Type" [];
  "25" -> "24" [];
  "26" -> "24" [];
  "27" -> "24" [];
  "28" -> "24" [];
  "29" -> "24" [];
  "3" -> "0" [];
  "30" -> "24" [];
  "31" -> "24" [];
  "32" -> "tc.typeS" [];
  "33" -> "tc.typeI" [];
  "34" -> "36" [];
  "35" -> "36" [];
  "36" -> "38" [];
  "37" -> "38" [];
  "38" -> "tc.typeFC" [];
  "39" -> "41" [];
  "4" -> "0" [];
  "40" -> "41" [];
  "41" -> "tc.typeLet" [];
  "42" -> "44" [];
  "43" -> "44" [];
  "44" -> "tc.typeVar" [];
  "45" -> "47" [];
  "46" -> "47" [];
  "47" -> "49" [];
  "48" -> "49" [];
  "49" -> "tc.typeLambda" [];
  "5" -> "0" [];
  "50" -> "tc.typePlaceholder" [];
  "51" -> "tc.ScopeItem" [];
  "52" -> "51" [];
  "53" -> "51" [];
  "54" -> "51" [];
  "55" -> "57" [];
  "56" -> "57" [];
  "57" -> "51" [];
  "58" -> "60" [];
  "59" -> "60" [];
  "6" -> "0" [];
  "60" -> "tc.scopeBuiltin" [];
  "61" -> "63" [];
  "62" -> "63" [];
  "63" -> "tc.scopeLet" [];
  "64" -> "66" [];
  "65" -> "66" [];
  "66" -> "tc.scopeLambda" [];
  "67" -> "tc.parentScope" [];
  "68" -> "67" [];
  "69" -> "67" [];
  "7" -> "0" [];
  "70" -> "67" [];
  "71" -> "67" [];
  "72" -> "67" [];
  "73" -> "ide.Suggestion" [];
  "74" -> "73" [];
  "75" -> "73" [];
  "76" -> "73" [];
  "77" -> "79" [];
  "78" -> "79" [];
  "79" -> "81" [];
  "8" -> "ast.ParentExpr" [];
  "80" -> "81" [];
  "81" -> "ide.suggestionVar" [];
  "82" -> "84" [];
  "83" -> "84" [];
  "84" -> "86" [];
  "85" -> "86" [];
  "86" -> "ide.suggestionFunc" [];
  "87" -> "89" [];
  "88" -> "89" [];
  "89" -> "ide.suggestionScope" [];
  "9" -> "11" [];
  "90" -> "ide.expectedType" [];
  "91" -> "90" [];
  "92" -> "94" [];
  "93" -> "94" [];
  "94" -> "90" [];
  "95" -> "97" [];
  "96" -> "97" [];
  "97" -> "90" [];
  "98" -> "90" [];
  "99" -> "101" [];
  "ast.Expr" -> "10" [];
  "ast.Expr" -> "13" [];
  "ast.Expr" -> "16" [];
  "ast.Expr" -> "19" [];
  "ast.Expr" -> "22" [];
  "ast.Expr" -> "100" [];
  "ast.Expr" -> "118" [];
  "ast.Expr" -> "123" [];
  "ast.FuncCall" -> "5" [];
  "ast.FuncCall" -> "15" [];
  "ast.FuncCall" -> "18" [];
  "ast.FuncCall" -> "37" [];
  "ast.FuncCall" -> "70" [];
  "ast.FuncCall" -> "71" [];
  "ast.FuncCall" -> "96" [];
  "ast.IntLit" -> "2" [];
  "ast.IntLit" -> "33" [];
  "ast.IntLit" -> "187" [];
  "ast.Lambda" -> "6" [];
  "ast.Lambda" -> "21" [];
  "ast.Lambda" -> "48" [];
  "ast.Lambda" -> "65" [];
  "ast.Lambda" -> "72" [];
  "ast.Lambda" -> "91" [];
  "ast.Lambda" -> "193" [];
  "ast.Lambda" -> "206" [];
  "ast.LambdaParam" -> "46" [];
  "ast.LambdaParam" -> "64" [];
  "ast.LambdaParam" -> "178" [];
  "ast.LambdaParam" -> "192" [];
  "ast.LambdaParam" -> "201" [];
  "ast.LetExpr" -> "4" [];
  "ast.LetExpr" -> "9" [];
  "ast.LetExpr" -> "12" [];
  "ast.LetExpr" -> "40" [];
  "ast.LetExpr" -> "62" [];
  "ast.LetExpr" -> "68" [];
  "ast.LetExpr" -> "69" [];
  "ast.LetExpr" -> "93" [];
  "ast.LetExpr" -> "104" [];
  "ast.LetExpr" -> "177" [];
  "ast.LetExpr" -> "189" [];
  "ast.LetExpr" -> "190" [];
  "ast.Placeholder" -> "7" [];
  "ast.Placeholder" -> "50" [];
  "ast.Placeholder" -> "80" [];
  "ast.Placeholder" -> "85" [];
  "ast.Placeholder" -> "88" [];
  "ast.Placeholder" -> "110" [];
  "ast.RootExpr" -> "59" [];
  "ast.StringLit" -> "1" [];
  "ast.StringLit" -> "32" [];
  "ast.StringLit" -> "186" [];
  "ast.Var" -> "3" [];
  "ast.Var" -> "43" [];
  "ast.Var" -> "107" [];
  "ast.Var" -> "180" [];
  "ast.Var" -> "182" [];
  "ast.Var" -> "183" [];
  "hl.segmentDefn" -> "160" [];
  "hl.segmentDefnHL" -> "161" [];
  "hl.segmentInt" -> "166" [];
  "hl.segmentKeyword" -> "167" [];
  "hl.segmentStr" -> "165" [];
  "hl.segmentType" -> "168" [];
  "hl.segmentType" -> "195" [];
  "hl.segmentTypeHL" -> "169" [];
  "hl.segmentUndefinedVar" -> "163" [];
  "hl.segmentUsage" -> "162" [];
  "hl.segmentUsageHL" -> "164" [];
  "hl.typeHighlighted" -> "194" [];
  "hl.typeHighlightedParam" -> "198" [];
  "hl.typeHighlightedRet" -> "199" [];
  "hl.varDefn" -> "171" [];
  "hl.varDefn" -> "173" [];
  "ide.CurrentPlaceholder" -> "115" [];
  "ide.CurrentUsage" -> "157" [];
  "ide.CurrentUsage" -> "174" [];
  "ide.CurrentUsage" -> "184" [];
  "ide.CurrentUsageDefn" -> "140" [];
  "ide.CurrentUsageUsage" -> "141" [];
  "ide.CurrentUsageUsage" -> "155" [];
  "ide.CurrentUsageUsageIndirect" -> "142" [];
  "ide.Cursor" -> "109" [];
  "ide.Cursor" -> "120" [];
  "ide.Cursor" -> "125" [];
  "ide.Cursor" -> "130" [];
  "ide.Cursor" -> "135" [];
  "ide.Cursor" -> "144" [];
  "ide.Cursor" -> "149" [];
  "ide.Cursor" -> "200" [];
  "ide.Cursor" -> "205" [];
  "ide.Suggestion" -> "114" [];
  "ide.Usage" -> "102" [];
  "ide.Usage" -> "129" [];
  "ide.Usage" -> "134" [];
  "ide.Usage" -> "145" [];
  "ide.Usage" -> "150" [];
  "ide.Usage" -> "154" [];
  "ide.Usage" -> "170" [];
  "ide.Usage" -> "179" [];
  "ide.expectedType" -> "78" [];
  "ide.expectedType" -> "83" [];
  "ide.expectedType" -> "92" [];
  "ide.expectedType" -> "99" [];
  "ide.expectedTypeBinding" -> "98" [];
  "ide.suggestionFunc" -> "75" [];
  "ide.suggestionScope" -> "76" [];
  "ide.suggestionVar" -> "74" [];
  "lang.Builtin" -> "58" [];
  "tc.ScopeItem" -> "42" [];
  "tc.ScopeItem" -> "55" [];
  "tc.ScopeItem" -> "77" [];
  "tc.ScopeItem" -> "82" [];
  "tc.ScopeItem" -> "87" [];
  "tc.ScopeItem" -> "106" [];
  "tc.ScopeItem" -> "117" [];
  "tc.Type" -> "34" [];
  "tc.Type" -> "35" [];
  "tc.Type" -> "39" [];
  "tc.Type" -> "45" [];
  "tc.Type" -> "61" [];
  "tc.Type" -> "95" [];
  "tc.Type" -> "122" [];
  "tc.parentScope" -> "56" [];
  "tc.scopeBuiltin" -> "52" [];
  "tc.scopeLambda" -> "54" [];
  "tc.scopeLet" -> "53" [];
  "tc.typeFC" -> "28" [];
  "tc.typeI" -> "26" [];
  "tc.typeLambda" -> "27" [];
  "tc.typeLet" -> "29" [];
  "tc.typePlaceholder" -> "31" [];
  "tc.typeS" -> "25" [];
  "tc.typeVar" -> "30" [];
}
