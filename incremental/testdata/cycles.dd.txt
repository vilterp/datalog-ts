.table baseEdge
----
text/plain

edge{from: F, to: T} :-
  baseEdge{from: F, to: T} |
  baseEdge{from: F, to: I} & edge{from: I, to: T}.
----
text/plain

.rulegraph
----
application/graphviz
digraph G {
  "0" [fillcolor="moccasin" label="0: Union []" shape="box" style="filled"];
  "1" [fillcolor="thistle" label="1: edge: Join(I: edge.from = baseEdge.to) []" shape="box" style="filled"];
  "baseEdge" [fillcolor="darksalmon" label="baseEdge:  [to]" shape="box" style="filled"];
  "edge" [fillcolor="lightblue" label="edge: Subst({from: F, to: T}) [from]" shape="box" style="filled"];
  "0" -> "edge" [];
  "1" -> "0" [];
  "baseEdge" -> "0" [];
  "baseEdge" -> "1" [];
  "edge" -> "1" [];
}

baseEdge{from: "A", to: "B"}.
----
text/plain
baseEdge: [baseEdge{from: "A", to: "B"}; {}]
0: [baseEdge{from: "A", to: "B"}; {}]
1: []
edge: [edge{from: F, to: T}; {}]
1: []

baseEdge{from: "C", to: "D"}.
----
text/plain
baseEdge: [baseEdge{from: "C", to: "D"}; {}]
0: [baseEdge{from: "C", to: "D"}; {}]
1: []
edge: [edge{from: F, to: T}; {}]
1: []

baseEdge{from: "B", to: "C"}.
----
text/plain
baseEdge: [baseEdge{from: "B", to: "C"}; {}]
0: [baseEdge{from: "B", to: "C"}; {}]
1: []
edge: [edge{from: F, to: T}; {}]
1: []

edge{from: F, to: T}.
----
application/datalog
edge{from: F, to: T}; {F: F, T: T}.
edge{from: F, to: T}; {F: F, T: T}.
edge{from: F, to: T}; {F: F, T: T}.
