.table mother
----
text/plain

.table father
----
text/plain

mother{child: "Pete", mother: "Mary"}.
----
text/propagation-log
mother from null: mother{child: "Pete", mother: "Mary"}; {}. 
  mother{child: "Pete", mother: "Mary"}; {}

father{child: "Pete", father: "Paul"}.
----
text/propagation-log
father from null: father{child: "Pete", father: "Paul"}; {}. 
  father{child: "Pete", father: "Paul"}; {}

mother{child: "Carolyn", mother: "Mary"}.
----
text/propagation-log
mother from null: mother{child: "Carolyn", mother: "Mary"}; {}. 
  mother{child: "Carolyn", mother: "Mary"}; {}

father{child: "Carolyn", father: "Paul"}.
----
text/propagation-log
father from null: father{child: "Carolyn", father: "Paul"}; {}. 
  father{child: "Carolyn", father: "Paul"}; {}

.rulegraph
----
application/graphviz
digraph G {
  "mother" [fillcolor="darksalmon" label="mother:  []" shape="box" style="filled"]; // cache: [mother{child: "Pete", mother: "Mary"}; {}, mother{child: "Carolyn", mother: "Mary"}; {}]
  "father" [fillcolor="darksalmon" label="father:  []" shape="box" style="filled"]; // cache: [father{child: "Pete", father: "Paul"}; {}, father{child: "Carolyn", father: "Paul"}; {}]
}

parents{child: C, mother: M, father: F} :-
  mother{child: C, mother: M} &
  father{child: C, father: F}.
----
text/propagation-log
0 from mother: mother{child: "Pete", mother: "Mary"}; {}. Match(mother{child: C, mother: M}; {})
  mother{child: "Pete", mother: "Mary"}; {C: "Pete", M: "Mary"}
2 from 0: mother{child: "Pete", mother: "Mary"}; {C: "Pete", M: "Mary"}. Join(C)
0 from mother: mother{child: "Carolyn", mother: "Mary"}; {}. Match(mother{child: C, mother: M}; {})
  mother{child: "Carolyn", mother: "Mary"}; {C: "Carolyn", M: "Mary"}
2 from 0: mother{child: "Carolyn", mother: "Mary"}; {C: "Carolyn", M: "Mary"}. Join(C)
1 from father: father{child: "Pete", father: "Paul"}; {}. Match(father{child: C, father: F}; {})
  father{child: "Pete", father: "Paul"}; {C: "Pete", F: "Paul"}
2 from 1: father{child: "Pete", father: "Paul"}; {C: "Pete", F: "Paul"}. Join(C)
  (); {C: "Pete", F: "Paul", M: "Mary"}
parents from 2: (); {C: "Pete", F: "Paul", M: "Mary"}. Subst({child: C, father: F, mother: M})
  parents{child: "Pete", father: "Paul", mother: "Mary"}; {C: "Pete", F: "Paul", M: "Mary"}
1 from father: father{child: "Carolyn", father: "Paul"}; {}. Match(father{child: C, father: F}; {})
  father{child: "Carolyn", father: "Paul"}; {C: "Carolyn", F: "Paul"}
2 from 1: father{child: "Carolyn", father: "Paul"}; {C: "Carolyn", F: "Paul"}. Join(C)
  (); {C: "Carolyn", F: "Paul", M: "Mary"}
parents from 2: (); {C: "Carolyn", F: "Paul", M: "Mary"}. Subst({child: C, father: F, mother: M})
  parents{child: "Carolyn", father: "Paul", mother: "Mary"}; {C: "Carolyn", F: "Paul", M: "Mary"}

.rulegraph
----
application/graphviz
digraph G {
  "0" [fillcolor="darkseagreen2" label="0: Match(mother{child: C, mother: M}; {}) [C]" shape="box" style="filled"]; // cache: [mother{child: "Pete", mother: "Mary"}; {C: "Pete", M: "Mary"}, mother{child: "Carolyn", mother: "Mary"}; {C: "Carolyn", M: "Mary"}]
  "1" [fillcolor="darkseagreen2" label="1: Match(father{child: C, father: F}; {}) [C]" shape="box" style="filled"]; // cache: [father{child: "Pete", father: "Paul"}; {C: "Pete", F: "Paul"}, father{child: "Carolyn", father: "Paul"}; {C: "Carolyn", F: "Paul"}]
  "2" [fillcolor="thistle" label="2: Join(C) []" shape="box" style="filled"]; // cache: [(); {C: "Pete", F: "Paul", M: "Mary"}, (); {C: "Carolyn", F: "Paul", M: "Mary"}]
  "mother" [fillcolor="darksalmon" label="mother:  []" shape="box" style="filled"]; // cache: [mother{child: "Pete", mother: "Mary"}; {}, mother{child: "Carolyn", mother: "Mary"}; {}]
  "father" [fillcolor="darksalmon" label="father:  []" shape="box" style="filled"]; // cache: [father{child: "Pete", father: "Paul"}; {}, father{child: "Carolyn", father: "Paul"}; {}]
  "parents" [fillcolor="lightblue" label="parents: Subst({child: C, father: F, mother: M}) []" shape="box" style="filled"]; // cache: [parents{child: "Pete", father: "Paul", mother: "Mary"}; {C: "Pete", F: "Paul", M: "Mary"}, parents{child: "Carolyn", father: "Paul", mother: "Mary"}; {C: "Carolyn", F: "Paul", M: "Mary"}]
  "0" -> "2" [];
  "1" -> "2" [];
  "2" -> "parents" [];
  "father" -> "1" [];
  "mother" -> "0" [];
}

sibling{left: L, right: R} :-
  parents{child: L, mother: M, father: F} &
  parents{child: R, mother: M, father: F} &
  L != R.
----
text/propagation-log
3 from parents: parents{child: "Pete", father: "Paul", mother: "Mary"}; {C: "Pete", F: "Paul", M: "Mary"}. Match(parents{child: L, father: F, mother: M}; {C: L, F: F, M: M})
  parents{child: "Pete", father: "Paul", mother: "Mary"}; {F: "Paul", L: "Pete", M: "Mary"}
5 from 3: parents{child: "Pete", father: "Paul", mother: "Mary"}; {F: "Paul", L: "Pete", M: "Mary"}. Join(M, F)
4 from parents: parents{child: "Pete", father: "Paul", mother: "Mary"}; {C: "Pete", F: "Paul", M: "Mary"}. Match(parents{child: R, father: F, mother: M}; {C: R, F: F, M: M})
  parents{child: "Pete", father: "Paul", mother: "Mary"}; {F: "Paul", M: "Mary", R: "Pete"}
5 from 4: parents{child: "Pete", father: "Paul", mother: "Mary"}; {F: "Paul", M: "Mary", R: "Pete"}. Join(M, F)
  (); {F: "Paul", L: "Pete", M: "Mary", R: "Pete"}
6 from 5: (); {F: "Paul", L: "Pete", M: "Mary", R: "Pete"}. L != R
3 from parents: parents{child: "Carolyn", father: "Paul", mother: "Mary"}; {C: "Carolyn", F: "Paul", M: "Mary"}. Match(parents{child: L, father: F, mother: M}; {C: L, F: F, M: M})
  parents{child: "Carolyn", father: "Paul", mother: "Mary"}; {F: "Paul", L: "Carolyn", M: "Mary"}
5 from 3: parents{child: "Carolyn", father: "Paul", mother: "Mary"}; {F: "Paul", L: "Carolyn", M: "Mary"}. Join(M, F)
  (); {F: "Paul", L: "Carolyn", M: "Mary", R: "Pete"}
6 from 5: (); {F: "Paul", L: "Carolyn", M: "Mary", R: "Pete"}. L != R
  (); {F: "Paul", L: "Carolyn", M: "Mary", R: "Pete"}
sibling from 6: (); {F: "Paul", L: "Carolyn", M: "Mary", R: "Pete"}. Subst({left: L, right: R})
  sibling{left: "Carolyn", right: "Pete"}; {F: "Paul", L: "Carolyn", M: "Mary", R: "Pete"}
4 from parents: parents{child: "Carolyn", father: "Paul", mother: "Mary"}; {C: "Carolyn", F: "Paul", M: "Mary"}. Match(parents{child: R, father: F, mother: M}; {C: R, F: F, M: M})
  parents{child: "Carolyn", father: "Paul", mother: "Mary"}; {F: "Paul", M: "Mary", R: "Carolyn"}
5 from 4: parents{child: "Carolyn", father: "Paul", mother: "Mary"}; {F: "Paul", M: "Mary", R: "Carolyn"}. Join(M, F)
  (); {F: "Paul", L: "Pete", M: "Mary", R: "Carolyn"}
  (); {F: "Paul", L: "Carolyn", M: "Mary", R: "Carolyn"}
6 from 5: (); {F: "Paul", L: "Pete", M: "Mary", R: "Carolyn"}. L != R
  (); {F: "Paul", L: "Pete", M: "Mary", R: "Carolyn"}
6 from 5: (); {F: "Paul", L: "Carolyn", M: "Mary", R: "Carolyn"}. L != R
sibling from 6: (); {F: "Paul", L: "Pete", M: "Mary", R: "Carolyn"}. Subst({left: L, right: R})
  sibling{left: "Pete", right: "Carolyn"}; {F: "Paul", L: "Pete", M: "Mary", R: "Carolyn"}

.rulegraph
----
application/graphviz
digraph G {
  "0" [fillcolor="darkseagreen2" label="0: Match(mother{child: C, mother: M}; {}) [C]" shape="box" style="filled"]; // cache: [mother{child: "Pete", mother: "Mary"}; {C: "Pete", M: "Mary"}, mother{child: "Carolyn", mother: "Mary"}; {C: "Carolyn", M: "Mary"}]
  "1" [fillcolor="darkseagreen2" label="1: Match(father{child: C, father: F}; {}) [C]" shape="box" style="filled"]; // cache: [father{child: "Pete", father: "Paul"}; {C: "Pete", F: "Paul"}, father{child: "Carolyn", father: "Paul"}; {C: "Carolyn", F: "Paul"}]
  "2" [fillcolor="thistle" label="2: Join(C) []" shape="box" style="filled"]; // cache: [(); {C: "Pete", F: "Paul", M: "Mary"}, (); {C: "Carolyn", F: "Paul", M: "Mary"}]
  "3" [fillcolor="darkseagreen2" label="3: Match(parents{child: L, father: F, mother: M}; {C: L, F: F, M: M}) [M-F]" shape="box" style="filled"]; // cache: [parents{child: "Pete", father: "Paul", mother: "Mary"}; {F: "Paul", L: "Pete", M: "Mary"}, parents{child: "Carolyn", father: "Paul", mother: "Mary"}; {F: "Paul", L: "Carolyn", M: "Mary"}]
  "4" [fillcolor="darkseagreen2" label="4: Match(parents{child: R, father: F, mother: M}; {C: R, F: F, M: M}) [M-F]" shape="box" style="filled"]; // cache: [parents{child: "Pete", father: "Paul", mother: "Mary"}; {F: "Paul", M: "Mary", R: "Pete"}, parents{child: "Carolyn", father: "Paul", mother: "Mary"}; {F: "Paul", M: "Mary", R: "Carolyn"}]
  "5" [fillcolor="thistle" label="5: Join(M, F) []" shape="box" style="filled"]; // cache: [(); {F: "Paul", L: "Pete", M: "Mary", R: "Pete"}, (); {F: "Paul", L: "Carolyn", M: "Mary", R: "Pete"}, (); {F: "Paul", L: "Pete", M: "Mary", R: "Carolyn"}, (); {F: "Paul", L: "Carolyn", M: "Mary", R: "Carolyn"}]
  "6" [fillcolor="darkseagreen1" label="6: L != R []" shape="box" style="filled"]; // cache: [(); {F: "Paul", L: "Carolyn", M: "Mary", R: "Pete"}, (); {F: "Paul", L: "Pete", M: "Mary", R: "Carolyn"}]
  "mother" [fillcolor="darksalmon" label="mother:  []" shape="box" style="filled"]; // cache: [mother{child: "Pete", mother: "Mary"}; {}, mother{child: "Carolyn", mother: "Mary"}; {}]
  "father" [fillcolor="darksalmon" label="father:  []" shape="box" style="filled"]; // cache: [father{child: "Pete", father: "Paul"}; {}, father{child: "Carolyn", father: "Paul"}; {}]
  "parents" [fillcolor="lightblue" label="parents: Subst({child: C, father: F, mother: M}) []" shape="box" style="filled"]; // cache: [parents{child: "Pete", father: "Paul", mother: "Mary"}; {C: "Pete", F: "Paul", M: "Mary"}, parents{child: "Carolyn", father: "Paul", mother: "Mary"}; {C: "Carolyn", F: "Paul", M: "Mary"}]
  "sibling" [fillcolor="lightblue" label="sibling: Subst({left: L, right: R}) []" shape="box" style="filled"]; // cache: [sibling{left: "Carolyn", right: "Pete"}; {F: "Paul", L: "Carolyn", M: "Mary", R: "Pete"}, sibling{left: "Pete", right: "Carolyn"}; {F: "Paul", L: "Pete", M: "Mary", R: "Carolyn"}]
  "0" -> "2" [];
  "1" -> "2" [];
  "2" -> "parents" [];
  "3" -> "5" [];
  "4" -> "5" [];
  "5" -> "6" [];
  "6" -> "sibling" [];
  "father" -> "1" [];
  "mother" -> "0" [];
  "parents" -> "3" [];
  "parents" -> "4" [];
}
