.table mother
----
text/plain

.table father
----
text/plain

mother{child: "Pete", mother: "Mary"}.
----
text/plain
mother: [mother{child: "Pete", mother: "Mary"}; {}]

father{child: "Pete", father: "Paul"}.
----
text/plain
father: [father{child: "Pete", father: "Paul"}; {}]

mother{child: "Carolyn", mother: "Mary"}.
----
text/plain
mother: [mother{child: "Carolyn", mother: "Mary"}; {}]

father{child: "Carolyn", father: "Paul"}.
----
text/plain
father: [father{child: "Carolyn", father: "Paul"}; {}]

.rulegraph
----
application/graphviz
digraph G {
  "mother" [color="black" label="mother: Base []" shape="box"]; // cache: [mother{child: "Pete", mother: "Mary"}; {}, mother{child: "Carolyn", mother: "Mary"}; {}]
  "father" [color="black" label="father: Base []" shape="box"]; // cache: [father{child: "Pete", father: "Paul"}; {}, father{child: "Carolyn", father: "Paul"}; {}]
}

parents{child: C, mother: M, father: F} :-
  mother{child: C, mother: M} &
  father{child: C, father: F}.
----
text/plain

.rulegraph
----
application/graphviz
digraph G {
  "0" [color="black" label="0: Match(mother{child: C, mother: M}; {}) [child]" shape="box"];
  "1" [color="black" label="1: Match(father{child: C, father: F}; {}) [child]" shape="box"];
  "2" [color="black" label="2: Join(1 & 0): parents []" shape="box"];
  "mother" [color="black" label="mother: Base []" shape="box"]; // cache: [mother{child: "Pete", mother: "Mary"}; {}, mother{child: "Carolyn", mother: "Mary"}; {}]
  "father" [color="black" label="father: Base []" shape="box"]; // cache: [father{child: "Pete", father: "Paul"}; {}, father{child: "Carolyn", father: "Paul"}; {}]
  "parents" [color="black" label="parents: Subst(parents{child: C, father: F, mother: M}) []" shape="box"];
  "0" -> "2" [];
  "1" -> "2" [];
  "2" -> "parents" [];
  "father" -> "1" [];
  "mother" -> "0" [];
}

sibling{left: L, right: R} :-
  parents{child: L, mother: M, father: F} &
  parents{child: R, mother: M, father: F} &
  L != R.
----
text/plain

.rulegraph
----
application/graphviz
digraph G {
  "0" [color="black" label="0: Match(mother{child: C, mother: M}; {}) [child]" shape="box"];
  "1" [color="black" label="1: Match(father{child: C, father: F}; {}) [child]" shape="box"];
  "2" [color="black" label="2: Join(1 & 0): parents []" shape="box"];
  "3" [color="black" label="3: Match(parents{child: L, father: F, mother: M}; {C: L, F: F, M: M}) [mother-father]" shape="box"];
  "4" [color="black" label="4: Match(parents{child: R, father: F, mother: M}; {C: R, F: F, M: M}) [mother-father]" shape="box"];
  "5" [color="black" label="5: Join(4 & 3): sibling []" shape="box"];
  "6" [color="black" label="6: L != R []" shape="box"];
  "mother" [color="black" label="mother: Base []" shape="box"]; // cache: [mother{child: "Pete", mother: "Mary"}; {}, mother{child: "Carolyn", mother: "Mary"}; {}]
  "father" [color="black" label="father: Base []" shape="box"]; // cache: [father{child: "Pete", father: "Paul"}; {}, father{child: "Carolyn", father: "Paul"}; {}]
  "parents" [color="black" label="parents: Subst(parents{child: C, father: F, mother: M}) []" shape="box"];
  "sibling" [color="black" label="sibling: Subst(sibling{left: L, right: R}) []" shape="box"];
  "0" -> "2" [];
  "1" -> "2" [];
  "2" -> "parents" [];
  "3" -> "5" [];
  "4" -> "5" [];
  "5" -> "6" [];
  "6" -> "sibling" [];
  "father" -> "1" [];
  "mother" -> "0" [];
  "parents" -> "3" [];
  "parents" -> "4" [];
}
